
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model SB1010
 * 
 */
export type SB1010 = $Result.DefaultSelection<Prisma.$SB1010Payload>
/**
 * Model SF1010
 * 
 */
export type SF1010 = $Result.DefaultSelection<Prisma.$SF1010Payload>
/**
 * Model SD1010
 * 
 */
export type SD1010 = $Result.DefaultSelection<Prisma.$SD1010Payload>
/**
 * Model SF4010
 * 
 */
export type SF4010 = $Result.DefaultSelection<Prisma.$SF4010Payload>
/**
 * Model SA2010
 * 
 */
export type SA2010 = $Result.DefaultSelection<Prisma.$SA2010Payload>
/**
 * Model SC7010
 * 
 */
export type SC7010 = $Result.DefaultSelection<Prisma.$SC7010Payload>
/**
 * Model SE2010
 * 
 */
export type SE2010 = $Result.DefaultSelection<Prisma.$SE2010Payload>
/**
 * Model Z05010
 * 
 */
export type Z05010 = $Result.DefaultSelection<Prisma.$Z05010Payload>
/**
 * Model SYS_USR
 * 
 */
export type SYS_USR = $Result.DefaultSelection<Prisma.$SYS_USRPayload>
/**
 * Model Z10010
 * 
 */
export type Z10010 = $Result.DefaultSelection<Prisma.$Z10010Payload>
/**
 * Model Z07010
 * 
 */
export type Z07010 = $Result.DefaultSelection<Prisma.$Z07010Payload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SB1010s
 * const sB1010s = await prisma.sB1010.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SB1010s
   * const sB1010s = await prisma.sB1010.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.sB1010`: Exposes CRUD operations for the **SB1010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SB1010s
    * const sB1010s = await prisma.sB1010.findMany()
    * ```
    */
  get sB1010(): Prisma.SB1010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sF1010`: Exposes CRUD operations for the **SF1010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SF1010s
    * const sF1010s = await prisma.sF1010.findMany()
    * ```
    */
  get sF1010(): Prisma.SF1010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sD1010`: Exposes CRUD operations for the **SD1010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SD1010s
    * const sD1010s = await prisma.sD1010.findMany()
    * ```
    */
  get sD1010(): Prisma.SD1010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sF4010`: Exposes CRUD operations for the **SF4010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SF4010s
    * const sF4010s = await prisma.sF4010.findMany()
    * ```
    */
  get sF4010(): Prisma.SF4010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sA2010`: Exposes CRUD operations for the **SA2010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SA2010s
    * const sA2010s = await prisma.sA2010.findMany()
    * ```
    */
  get sA2010(): Prisma.SA2010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sC7010`: Exposes CRUD operations for the **SC7010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SC7010s
    * const sC7010s = await prisma.sC7010.findMany()
    * ```
    */
  get sC7010(): Prisma.SC7010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sE2010`: Exposes CRUD operations for the **SE2010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SE2010s
    * const sE2010s = await prisma.sE2010.findMany()
    * ```
    */
  get sE2010(): Prisma.SE2010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.z05010`: Exposes CRUD operations for the **Z05010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Z05010s
    * const z05010s = await prisma.z05010.findMany()
    * ```
    */
  get z05010(): Prisma.Z05010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sYS_USR`: Exposes CRUD operations for the **SYS_USR** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SYS_USRS
    * const sYS_USRS = await prisma.sYS_USR.findMany()
    * ```
    */
  get sYS_USR(): Prisma.SYS_USRDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.z10010`: Exposes CRUD operations for the **Z10010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Z10010s
    * const z10010s = await prisma.z10010.findMany()
    * ```
    */
  get z10010(): Prisma.Z10010Delegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.z07010`: Exposes CRUD operations for the **Z07010** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Z07010s
    * const z07010s = await prisma.z07010.findMany()
    * ```
    */
  get z07010(): Prisma.Z07010Delegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    SB1010: 'SB1010',
    SF1010: 'SF1010',
    SD1010: 'SD1010',
    SF4010: 'SF4010',
    SA2010: 'SA2010',
    SC7010: 'SC7010',
    SE2010: 'SE2010',
    Z05010: 'Z05010',
    SYS_USR: 'SYS_USR',
    Z10010: 'Z10010',
    Z07010: 'Z07010'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "sB1010" | "sF1010" | "sD1010" | "sF4010" | "sA2010" | "sC7010" | "sE2010" | "z05010" | "sYS_USR" | "z10010" | "z07010"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      SB1010: {
        payload: Prisma.$SB1010Payload<ExtArgs>
        fields: Prisma.SB1010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SB1010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SB1010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          findFirst: {
            args: Prisma.SB1010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SB1010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          findMany: {
            args: Prisma.SB1010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>[]
          }
          create: {
            args: Prisma.SB1010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          createMany: {
            args: Prisma.SB1010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SB1010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          update: {
            args: Prisma.SB1010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          deleteMany: {
            args: Prisma.SB1010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SB1010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SB1010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SB1010Payload>
          }
          aggregate: {
            args: Prisma.SB1010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSB1010>
          }
          groupBy: {
            args: Prisma.SB1010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SB1010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SB1010CountArgs<ExtArgs>
            result: $Utils.Optional<SB1010CountAggregateOutputType> | number
          }
        }
      }
      SF1010: {
        payload: Prisma.$SF1010Payload<ExtArgs>
        fields: Prisma.SF1010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SF1010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SF1010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          findFirst: {
            args: Prisma.SF1010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SF1010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          findMany: {
            args: Prisma.SF1010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>[]
          }
          create: {
            args: Prisma.SF1010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          createMany: {
            args: Prisma.SF1010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SF1010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          update: {
            args: Prisma.SF1010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          deleteMany: {
            args: Prisma.SF1010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SF1010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SF1010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF1010Payload>
          }
          aggregate: {
            args: Prisma.SF1010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSF1010>
          }
          groupBy: {
            args: Prisma.SF1010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SF1010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SF1010CountArgs<ExtArgs>
            result: $Utils.Optional<SF1010CountAggregateOutputType> | number
          }
        }
      }
      SD1010: {
        payload: Prisma.$SD1010Payload<ExtArgs>
        fields: Prisma.SD1010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SD1010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SD1010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          findFirst: {
            args: Prisma.SD1010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SD1010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          findMany: {
            args: Prisma.SD1010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>[]
          }
          create: {
            args: Prisma.SD1010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          createMany: {
            args: Prisma.SD1010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SD1010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          update: {
            args: Prisma.SD1010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          deleteMany: {
            args: Prisma.SD1010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SD1010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SD1010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SD1010Payload>
          }
          aggregate: {
            args: Prisma.SD1010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSD1010>
          }
          groupBy: {
            args: Prisma.SD1010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SD1010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SD1010CountArgs<ExtArgs>
            result: $Utils.Optional<SD1010CountAggregateOutputType> | number
          }
        }
      }
      SF4010: {
        payload: Prisma.$SF4010Payload<ExtArgs>
        fields: Prisma.SF4010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SF4010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SF4010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          findFirst: {
            args: Prisma.SF4010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SF4010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          findMany: {
            args: Prisma.SF4010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>[]
          }
          create: {
            args: Prisma.SF4010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          createMany: {
            args: Prisma.SF4010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SF4010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          update: {
            args: Prisma.SF4010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          deleteMany: {
            args: Prisma.SF4010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SF4010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SF4010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SF4010Payload>
          }
          aggregate: {
            args: Prisma.SF4010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSF4010>
          }
          groupBy: {
            args: Prisma.SF4010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SF4010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SF4010CountArgs<ExtArgs>
            result: $Utils.Optional<SF4010CountAggregateOutputType> | number
          }
        }
      }
      SA2010: {
        payload: Prisma.$SA2010Payload<ExtArgs>
        fields: Prisma.SA2010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SA2010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SA2010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          findFirst: {
            args: Prisma.SA2010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SA2010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          findMany: {
            args: Prisma.SA2010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>[]
          }
          create: {
            args: Prisma.SA2010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          createMany: {
            args: Prisma.SA2010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SA2010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          update: {
            args: Prisma.SA2010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          deleteMany: {
            args: Prisma.SA2010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SA2010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SA2010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SA2010Payload>
          }
          aggregate: {
            args: Prisma.SA2010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSA2010>
          }
          groupBy: {
            args: Prisma.SA2010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SA2010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SA2010CountArgs<ExtArgs>
            result: $Utils.Optional<SA2010CountAggregateOutputType> | number
          }
        }
      }
      SC7010: {
        payload: Prisma.$SC7010Payload<ExtArgs>
        fields: Prisma.SC7010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SC7010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SC7010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          findFirst: {
            args: Prisma.SC7010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SC7010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          findMany: {
            args: Prisma.SC7010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>[]
          }
          create: {
            args: Prisma.SC7010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          createMany: {
            args: Prisma.SC7010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SC7010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          update: {
            args: Prisma.SC7010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          deleteMany: {
            args: Prisma.SC7010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SC7010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SC7010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SC7010Payload>
          }
          aggregate: {
            args: Prisma.SC7010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSC7010>
          }
          groupBy: {
            args: Prisma.SC7010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SC7010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SC7010CountArgs<ExtArgs>
            result: $Utils.Optional<SC7010CountAggregateOutputType> | number
          }
        }
      }
      SE2010: {
        payload: Prisma.$SE2010Payload<ExtArgs>
        fields: Prisma.SE2010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.SE2010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SE2010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          findFirst: {
            args: Prisma.SE2010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SE2010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          findMany: {
            args: Prisma.SE2010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>[]
          }
          create: {
            args: Prisma.SE2010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          createMany: {
            args: Prisma.SE2010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SE2010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          update: {
            args: Prisma.SE2010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          deleteMany: {
            args: Prisma.SE2010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SE2010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SE2010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SE2010Payload>
          }
          aggregate: {
            args: Prisma.SE2010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSE2010>
          }
          groupBy: {
            args: Prisma.SE2010GroupByArgs<ExtArgs>
            result: $Utils.Optional<SE2010GroupByOutputType>[]
          }
          count: {
            args: Prisma.SE2010CountArgs<ExtArgs>
            result: $Utils.Optional<SE2010CountAggregateOutputType> | number
          }
        }
      }
      Z05010: {
        payload: Prisma.$Z05010Payload<ExtArgs>
        fields: Prisma.Z05010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Z05010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Z05010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          findFirst: {
            args: Prisma.Z05010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Z05010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          findMany: {
            args: Prisma.Z05010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>[]
          }
          create: {
            args: Prisma.Z05010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          createMany: {
            args: Prisma.Z05010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Z05010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          update: {
            args: Prisma.Z05010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          deleteMany: {
            args: Prisma.Z05010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Z05010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Z05010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z05010Payload>
          }
          aggregate: {
            args: Prisma.Z05010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZ05010>
          }
          groupBy: {
            args: Prisma.Z05010GroupByArgs<ExtArgs>
            result: $Utils.Optional<Z05010GroupByOutputType>[]
          }
          count: {
            args: Prisma.Z05010CountArgs<ExtArgs>
            result: $Utils.Optional<Z05010CountAggregateOutputType> | number
          }
        }
      }
      SYS_USR: {
        payload: Prisma.$SYS_USRPayload<ExtArgs>
        fields: Prisma.SYS_USRFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SYS_USRFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SYS_USRFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          findFirst: {
            args: Prisma.SYS_USRFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SYS_USRFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          findMany: {
            args: Prisma.SYS_USRFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>[]
          }
          create: {
            args: Prisma.SYS_USRCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          createMany: {
            args: Prisma.SYS_USRCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SYS_USRDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          update: {
            args: Prisma.SYS_USRUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          deleteMany: {
            args: Prisma.SYS_USRDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SYS_USRUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SYS_USRUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SYS_USRPayload>
          }
          aggregate: {
            args: Prisma.SYS_USRAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSYS_USR>
          }
          groupBy: {
            args: Prisma.SYS_USRGroupByArgs<ExtArgs>
            result: $Utils.Optional<SYS_USRGroupByOutputType>[]
          }
          count: {
            args: Prisma.SYS_USRCountArgs<ExtArgs>
            result: $Utils.Optional<SYS_USRCountAggregateOutputType> | number
          }
        }
      }
      Z10010: {
        payload: Prisma.$Z10010Payload<ExtArgs>
        fields: Prisma.Z10010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Z10010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Z10010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          findFirst: {
            args: Prisma.Z10010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Z10010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          findMany: {
            args: Prisma.Z10010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>[]
          }
          create: {
            args: Prisma.Z10010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          createMany: {
            args: Prisma.Z10010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Z10010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          update: {
            args: Prisma.Z10010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          deleteMany: {
            args: Prisma.Z10010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Z10010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Z10010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z10010Payload>
          }
          aggregate: {
            args: Prisma.Z10010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZ10010>
          }
          groupBy: {
            args: Prisma.Z10010GroupByArgs<ExtArgs>
            result: $Utils.Optional<Z10010GroupByOutputType>[]
          }
          count: {
            args: Prisma.Z10010CountArgs<ExtArgs>
            result: $Utils.Optional<Z10010CountAggregateOutputType> | number
          }
        }
      }
      Z07010: {
        payload: Prisma.$Z07010Payload<ExtArgs>
        fields: Prisma.Z07010FieldRefs
        operations: {
          findUnique: {
            args: Prisma.Z07010FindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Z07010FindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          findFirst: {
            args: Prisma.Z07010FindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Z07010FindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          findMany: {
            args: Prisma.Z07010FindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>[]
          }
          create: {
            args: Prisma.Z07010CreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          createMany: {
            args: Prisma.Z07010CreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Z07010DeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          update: {
            args: Prisma.Z07010UpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          deleteMany: {
            args: Prisma.Z07010DeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Z07010UpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Z07010UpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Z07010Payload>
          }
          aggregate: {
            args: Prisma.Z07010AggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateZ07010>
          }
          groupBy: {
            args: Prisma.Z07010GroupByArgs<ExtArgs>
            result: $Utils.Optional<Z07010GroupByOutputType>[]
          }
          count: {
            args: Prisma.Z07010CountArgs<ExtArgs>
            result: $Utils.Optional<Z07010CountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    sB1010?: SB1010Omit
    sF1010?: SF1010Omit
    sD1010?: SD1010Omit
    sF4010?: SF4010Omit
    sA2010?: SA2010Omit
    sC7010?: SC7010Omit
    sE2010?: SE2010Omit
    z05010?: Z05010Omit
    sYS_USR?: SYS_USROmit
    z10010?: Z10010Omit
    z07010?: Z07010Omit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SF1010CountOutputType
   */

  export type SF1010CountOutputType = {
    SD1: number
  }

  export type SF1010CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SD1?: boolean | SF1010CountOutputTypeCountSD1Args
  }

  // Custom InputTypes
  /**
   * SF1010CountOutputType without action
   */
  export type SF1010CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010CountOutputType
     */
    select?: SF1010CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SF1010CountOutputType without action
   */
  export type SF1010CountOutputTypeCountSD1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SD1010WhereInput
  }


  /**
   * Count Type SF4010CountOutputType
   */

  export type SF4010CountOutputType = {
    SD1: number
  }

  export type SF4010CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SD1?: boolean | SF4010CountOutputTypeCountSD1Args
  }

  // Custom InputTypes
  /**
   * SF4010CountOutputType without action
   */
  export type SF4010CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010CountOutputType
     */
    select?: SF4010CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SF4010CountOutputType without action
   */
  export type SF4010CountOutputTypeCountSD1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SD1010WhereInput
  }


  /**
   * Count Type SA2010CountOutputType
   */

  export type SA2010CountOutputType = {
    SF1: number
  }

  export type SA2010CountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SF1?: boolean | SA2010CountOutputTypeCountSF1Args
  }

  // Custom InputTypes
  /**
   * SA2010CountOutputType without action
   */
  export type SA2010CountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010CountOutputType
     */
    select?: SA2010CountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SA2010CountOutputType without action
   */
  export type SA2010CountOutputTypeCountSF1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SF1010WhereInput
  }


  /**
   * Models
   */

  /**
   * Model SB1010
   */

  export type AggregateSB1010 = {
    _count: SB1010CountAggregateOutputType | null
    _avg: SB1010AvgAggregateOutputType | null
    _sum: SB1010SumAggregateOutputType | null
    _min: SB1010MinAggregateOutputType | null
    _max: SB1010MaxAggregateOutputType | null
  }

  export type SB1010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
    B1_PRV1: number | null
  }

  export type SB1010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
    B1_PRV1: number | null
  }

  export type SB1010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    B1_FILIAL: string | null
    B1_COD: string | null
    B1_DESC: string | null
    B1_TIPO: string | null
    B1_UM: string | null
    B1_GRUPO: string | null
    B1_PRV1: number | null
    B1_LOCPAD: string | null
    B1_MARCA: string | null
    B1_MSBLQL: string | null
    D_E_L_E_T_: string | null
  }

  export type SB1010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    B1_FILIAL: string | null
    B1_COD: string | null
    B1_DESC: string | null
    B1_TIPO: string | null
    B1_UM: string | null
    B1_GRUPO: string | null
    B1_PRV1: number | null
    B1_LOCPAD: string | null
    B1_MARCA: string | null
    B1_MSBLQL: string | null
    D_E_L_E_T_: string | null
  }

  export type SB1010CountAggregateOutputType = {
    R_E_C_N_O_: number
    B1_FILIAL: number
    B1_COD: number
    B1_DESC: number
    B1_TIPO: number
    B1_UM: number
    B1_GRUPO: number
    B1_PRV1: number
    B1_LOCPAD: number
    B1_MARCA: number
    B1_MSBLQL: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SB1010AvgAggregateInputType = {
    R_E_C_N_O_?: true
    B1_PRV1?: true
  }

  export type SB1010SumAggregateInputType = {
    R_E_C_N_O_?: true
    B1_PRV1?: true
  }

  export type SB1010MinAggregateInputType = {
    R_E_C_N_O_?: true
    B1_FILIAL?: true
    B1_COD?: true
    B1_DESC?: true
    B1_TIPO?: true
    B1_UM?: true
    B1_GRUPO?: true
    B1_PRV1?: true
    B1_LOCPAD?: true
    B1_MARCA?: true
    B1_MSBLQL?: true
    D_E_L_E_T_?: true
  }

  export type SB1010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    B1_FILIAL?: true
    B1_COD?: true
    B1_DESC?: true
    B1_TIPO?: true
    B1_UM?: true
    B1_GRUPO?: true
    B1_PRV1?: true
    B1_LOCPAD?: true
    B1_MARCA?: true
    B1_MSBLQL?: true
    D_E_L_E_T_?: true
  }

  export type SB1010CountAggregateInputType = {
    R_E_C_N_O_?: true
    B1_FILIAL?: true
    B1_COD?: true
    B1_DESC?: true
    B1_TIPO?: true
    B1_UM?: true
    B1_GRUPO?: true
    B1_PRV1?: true
    B1_LOCPAD?: true
    B1_MARCA?: true
    B1_MSBLQL?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SB1010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SB1010 to aggregate.
     */
    where?: SB1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SB1010s to fetch.
     */
    orderBy?: SB1010OrderByWithRelationInput | SB1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SB1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SB1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SB1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SB1010s
    **/
    _count?: true | SB1010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SB1010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SB1010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SB1010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SB1010MaxAggregateInputType
  }

  export type GetSB1010AggregateType<T extends SB1010AggregateArgs> = {
        [P in keyof T & keyof AggregateSB1010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSB1010[P]>
      : GetScalarType<T[P], AggregateSB1010[P]>
  }




  export type SB1010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SB1010WhereInput
    orderBy?: SB1010OrderByWithAggregationInput | SB1010OrderByWithAggregationInput[]
    by: SB1010ScalarFieldEnum[] | SB1010ScalarFieldEnum
    having?: SB1010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SB1010CountAggregateInputType | true
    _avg?: SB1010AvgAggregateInputType
    _sum?: SB1010SumAggregateInputType
    _min?: SB1010MinAggregateInputType
    _max?: SB1010MaxAggregateInputType
  }

  export type SB1010GroupByOutputType = {
    R_E_C_N_O_: number
    B1_FILIAL: string
    B1_COD: string
    B1_DESC: string
    B1_TIPO: string | null
    B1_UM: string | null
    B1_GRUPO: string | null
    B1_PRV1: number | null
    B1_LOCPAD: string | null
    B1_MARCA: string | null
    B1_MSBLQL: string | null
    D_E_L_E_T_: string | null
    _count: SB1010CountAggregateOutputType | null
    _avg: SB1010AvgAggregateOutputType | null
    _sum: SB1010SumAggregateOutputType | null
    _min: SB1010MinAggregateOutputType | null
    _max: SB1010MaxAggregateOutputType | null
  }

  type GetSB1010GroupByPayload<T extends SB1010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SB1010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SB1010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SB1010GroupByOutputType[P]>
            : GetScalarType<T[P], SB1010GroupByOutputType[P]>
        }
      >
    >


  export type SB1010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    B1_FILIAL?: boolean
    B1_COD?: boolean
    B1_DESC?: boolean
    B1_TIPO?: boolean
    B1_UM?: boolean
    B1_GRUPO?: boolean
    B1_PRV1?: boolean
    B1_LOCPAD?: boolean
    B1_MARCA?: boolean
    B1_MSBLQL?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["sB1010"]>



  export type SB1010SelectScalar = {
    R_E_C_N_O_?: boolean
    B1_FILIAL?: boolean
    B1_COD?: boolean
    B1_DESC?: boolean
    B1_TIPO?: boolean
    B1_UM?: boolean
    B1_GRUPO?: boolean
    B1_PRV1?: boolean
    B1_LOCPAD?: boolean
    B1_MARCA?: boolean
    B1_MSBLQL?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SB1010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "B1_FILIAL" | "B1_COD" | "B1_DESC" | "B1_TIPO" | "B1_UM" | "B1_GRUPO" | "B1_PRV1" | "B1_LOCPAD" | "B1_MARCA" | "B1_MSBLQL" | "D_E_L_E_T_", ExtArgs["result"]["sB1010"]>

  export type $SB1010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SB1010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      B1_FILIAL: string
      B1_COD: string
      B1_DESC: string
      B1_TIPO: string | null
      B1_UM: string | null
      B1_GRUPO: string | null
      B1_PRV1: number | null
      B1_LOCPAD: string | null
      B1_MARCA: string | null
      B1_MSBLQL: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sB1010"]>
    composites: {}
  }

  type SB1010GetPayload<S extends boolean | null | undefined | SB1010DefaultArgs> = $Result.GetResult<Prisma.$SB1010Payload, S>

  type SB1010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SB1010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SB1010CountAggregateInputType | true
    }

  export interface SB1010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SB1010'], meta: { name: 'SB1010' } }
    /**
     * Find zero or one SB1010 that matches the filter.
     * @param {SB1010FindUniqueArgs} args - Arguments to find a SB1010
     * @example
     * // Get one SB1010
     * const sB1010 = await prisma.sB1010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SB1010FindUniqueArgs>(args: SelectSubset<T, SB1010FindUniqueArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SB1010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SB1010FindUniqueOrThrowArgs} args - Arguments to find a SB1010
     * @example
     * // Get one SB1010
     * const sB1010 = await prisma.sB1010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SB1010FindUniqueOrThrowArgs>(args: SelectSubset<T, SB1010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SB1010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010FindFirstArgs} args - Arguments to find a SB1010
     * @example
     * // Get one SB1010
     * const sB1010 = await prisma.sB1010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SB1010FindFirstArgs>(args?: SelectSubset<T, SB1010FindFirstArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SB1010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010FindFirstOrThrowArgs} args - Arguments to find a SB1010
     * @example
     * // Get one SB1010
     * const sB1010 = await prisma.sB1010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SB1010FindFirstOrThrowArgs>(args?: SelectSubset<T, SB1010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SB1010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SB1010s
     * const sB1010s = await prisma.sB1010.findMany()
     * 
     * // Get first 10 SB1010s
     * const sB1010s = await prisma.sB1010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sB1010WithR_E_C_N_O_Only = await prisma.sB1010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SB1010FindManyArgs>(args?: SelectSubset<T, SB1010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SB1010.
     * @param {SB1010CreateArgs} args - Arguments to create a SB1010.
     * @example
     * // Create one SB1010
     * const SB1010 = await prisma.sB1010.create({
     *   data: {
     *     // ... data to create a SB1010
     *   }
     * })
     * 
     */
    create<T extends SB1010CreateArgs>(args: SelectSubset<T, SB1010CreateArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SB1010s.
     * @param {SB1010CreateManyArgs} args - Arguments to create many SB1010s.
     * @example
     * // Create many SB1010s
     * const sB1010 = await prisma.sB1010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SB1010CreateManyArgs>(args?: SelectSubset<T, SB1010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SB1010.
     * @param {SB1010DeleteArgs} args - Arguments to delete one SB1010.
     * @example
     * // Delete one SB1010
     * const SB1010 = await prisma.sB1010.delete({
     *   where: {
     *     // ... filter to delete one SB1010
     *   }
     * })
     * 
     */
    delete<T extends SB1010DeleteArgs>(args: SelectSubset<T, SB1010DeleteArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SB1010.
     * @param {SB1010UpdateArgs} args - Arguments to update one SB1010.
     * @example
     * // Update one SB1010
     * const sB1010 = await prisma.sB1010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SB1010UpdateArgs>(args: SelectSubset<T, SB1010UpdateArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SB1010s.
     * @param {SB1010DeleteManyArgs} args - Arguments to filter SB1010s to delete.
     * @example
     * // Delete a few SB1010s
     * const { count } = await prisma.sB1010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SB1010DeleteManyArgs>(args?: SelectSubset<T, SB1010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SB1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SB1010s
     * const sB1010 = await prisma.sB1010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SB1010UpdateManyArgs>(args: SelectSubset<T, SB1010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SB1010.
     * @param {SB1010UpsertArgs} args - Arguments to update or create a SB1010.
     * @example
     * // Update or create a SB1010
     * const sB1010 = await prisma.sB1010.upsert({
     *   create: {
     *     // ... data to create a SB1010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SB1010 we want to update
     *   }
     * })
     */
    upsert<T extends SB1010UpsertArgs>(args: SelectSubset<T, SB1010UpsertArgs<ExtArgs>>): Prisma__SB1010Client<$Result.GetResult<Prisma.$SB1010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SB1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010CountArgs} args - Arguments to filter SB1010s to count.
     * @example
     * // Count the number of SB1010s
     * const count = await prisma.sB1010.count({
     *   where: {
     *     // ... the filter for the SB1010s we want to count
     *   }
     * })
    **/
    count<T extends SB1010CountArgs>(
      args?: Subset<T, SB1010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SB1010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SB1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SB1010AggregateArgs>(args: Subset<T, SB1010AggregateArgs>): Prisma.PrismaPromise<GetSB1010AggregateType<T>>

    /**
     * Group by SB1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SB1010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SB1010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SB1010GroupByArgs['orderBy'] }
        : { orderBy?: SB1010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SB1010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSB1010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SB1010 model
   */
  readonly fields: SB1010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SB1010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SB1010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SB1010 model
   */
  interface SB1010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SB1010", 'Int'>
    readonly B1_FILIAL: FieldRef<"SB1010", 'String'>
    readonly B1_COD: FieldRef<"SB1010", 'String'>
    readonly B1_DESC: FieldRef<"SB1010", 'String'>
    readonly B1_TIPO: FieldRef<"SB1010", 'String'>
    readonly B1_UM: FieldRef<"SB1010", 'String'>
    readonly B1_GRUPO: FieldRef<"SB1010", 'String'>
    readonly B1_PRV1: FieldRef<"SB1010", 'Float'>
    readonly B1_LOCPAD: FieldRef<"SB1010", 'String'>
    readonly B1_MARCA: FieldRef<"SB1010", 'String'>
    readonly B1_MSBLQL: FieldRef<"SB1010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SB1010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SB1010 findUnique
   */
  export type SB1010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter, which SB1010 to fetch.
     */
    where: SB1010WhereUniqueInput
  }

  /**
   * SB1010 findUniqueOrThrow
   */
  export type SB1010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter, which SB1010 to fetch.
     */
    where: SB1010WhereUniqueInput
  }

  /**
   * SB1010 findFirst
   */
  export type SB1010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter, which SB1010 to fetch.
     */
    where?: SB1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SB1010s to fetch.
     */
    orderBy?: SB1010OrderByWithRelationInput | SB1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SB1010s.
     */
    cursor?: SB1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SB1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SB1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SB1010s.
     */
    distinct?: SB1010ScalarFieldEnum | SB1010ScalarFieldEnum[]
  }

  /**
   * SB1010 findFirstOrThrow
   */
  export type SB1010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter, which SB1010 to fetch.
     */
    where?: SB1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SB1010s to fetch.
     */
    orderBy?: SB1010OrderByWithRelationInput | SB1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SB1010s.
     */
    cursor?: SB1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SB1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SB1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SB1010s.
     */
    distinct?: SB1010ScalarFieldEnum | SB1010ScalarFieldEnum[]
  }

  /**
   * SB1010 findMany
   */
  export type SB1010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter, which SB1010s to fetch.
     */
    where?: SB1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SB1010s to fetch.
     */
    orderBy?: SB1010OrderByWithRelationInput | SB1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SB1010s.
     */
    cursor?: SB1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SB1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SB1010s.
     */
    skip?: number
    distinct?: SB1010ScalarFieldEnum | SB1010ScalarFieldEnum[]
  }

  /**
   * SB1010 create
   */
  export type SB1010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * The data needed to create a SB1010.
     */
    data: XOR<SB1010CreateInput, SB1010UncheckedCreateInput>
  }

  /**
   * SB1010 createMany
   */
  export type SB1010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SB1010s.
     */
    data: SB1010CreateManyInput | SB1010CreateManyInput[]
  }

  /**
   * SB1010 update
   */
  export type SB1010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * The data needed to update a SB1010.
     */
    data: XOR<SB1010UpdateInput, SB1010UncheckedUpdateInput>
    /**
     * Choose, which SB1010 to update.
     */
    where: SB1010WhereUniqueInput
  }

  /**
   * SB1010 updateMany
   */
  export type SB1010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SB1010s.
     */
    data: XOR<SB1010UpdateManyMutationInput, SB1010UncheckedUpdateManyInput>
    /**
     * Filter which SB1010s to update
     */
    where?: SB1010WhereInput
    /**
     * Limit how many SB1010s to update.
     */
    limit?: number
  }

  /**
   * SB1010 upsert
   */
  export type SB1010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * The filter to search for the SB1010 to update in case it exists.
     */
    where: SB1010WhereUniqueInput
    /**
     * In case the SB1010 found by the `where` argument doesn't exist, create a new SB1010 with this data.
     */
    create: XOR<SB1010CreateInput, SB1010UncheckedCreateInput>
    /**
     * In case the SB1010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SB1010UpdateInput, SB1010UncheckedUpdateInput>
  }

  /**
   * SB1010 delete
   */
  export type SB1010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
    /**
     * Filter which SB1010 to delete.
     */
    where: SB1010WhereUniqueInput
  }

  /**
   * SB1010 deleteMany
   */
  export type SB1010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SB1010s to delete
     */
    where?: SB1010WhereInput
    /**
     * Limit how many SB1010s to delete.
     */
    limit?: number
  }

  /**
   * SB1010 without action
   */
  export type SB1010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SB1010
     */
    select?: SB1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SB1010
     */
    omit?: SB1010Omit<ExtArgs> | null
  }


  /**
   * Model SF1010
   */

  export type AggregateSF1010 = {
    _count: SF1010CountAggregateOutputType | null
    _avg: SF1010AvgAggregateOutputType | null
    _sum: SF1010SumAggregateOutputType | null
    _min: SF1010MinAggregateOutputType | null
    _max: SF1010MaxAggregateOutputType | null
  }

  export type SF1010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SF1010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SF1010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    F1_FILIAL: string | null
    F1_DOC: string | null
    F1_SERIE: string | null
    F1_FORNECE: string | null
    F1_LOJA: string | null
    F1_STATUS: string | null
    F1_EMISSAO: string | null
    F1_DTDIGIT: string | null
    F1_RECBMTO: string | null
    F1_USERLGI: string | null
    D_E_L_E_T_: string | null
    F1_XTIPO: string | null
    F1_XPRIOR: string | null
    F1_XORI: string | null
    F1_XUSRRA: string | null
    F1_XOBS: string | null
    F1_XREV: string | null
    F1_ZOBSREV: string | null
  }

  export type SF1010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    F1_FILIAL: string | null
    F1_DOC: string | null
    F1_SERIE: string | null
    F1_FORNECE: string | null
    F1_LOJA: string | null
    F1_STATUS: string | null
    F1_EMISSAO: string | null
    F1_DTDIGIT: string | null
    F1_RECBMTO: string | null
    F1_USERLGI: string | null
    D_E_L_E_T_: string | null
    F1_XTIPO: string | null
    F1_XPRIOR: string | null
    F1_XORI: string | null
    F1_XUSRRA: string | null
    F1_XOBS: string | null
    F1_XREV: string | null
    F1_ZOBSREV: string | null
  }

  export type SF1010CountAggregateOutputType = {
    R_E_C_N_O_: number
    F1_FILIAL: number
    F1_DOC: number
    F1_SERIE: number
    F1_FORNECE: number
    F1_LOJA: number
    F1_STATUS: number
    F1_EMISSAO: number
    F1_DTDIGIT: number
    F1_RECBMTO: number
    F1_USERLGI: number
    D_E_L_E_T_: number
    F1_XTIPO: number
    F1_XPRIOR: number
    F1_XORI: number
    F1_XUSRRA: number
    F1_XOBS: number
    F1_XREV: number
    F1_ZOBSREV: number
    _all: number
  }


  export type SF1010AvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SF1010SumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SF1010MinAggregateInputType = {
    R_E_C_N_O_?: true
    F1_FILIAL?: true
    F1_DOC?: true
    F1_SERIE?: true
    F1_FORNECE?: true
    F1_LOJA?: true
    F1_STATUS?: true
    F1_EMISSAO?: true
    F1_DTDIGIT?: true
    F1_RECBMTO?: true
    F1_USERLGI?: true
    D_E_L_E_T_?: true
    F1_XTIPO?: true
    F1_XPRIOR?: true
    F1_XORI?: true
    F1_XUSRRA?: true
    F1_XOBS?: true
    F1_XREV?: true
    F1_ZOBSREV?: true
  }

  export type SF1010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    F1_FILIAL?: true
    F1_DOC?: true
    F1_SERIE?: true
    F1_FORNECE?: true
    F1_LOJA?: true
    F1_STATUS?: true
    F1_EMISSAO?: true
    F1_DTDIGIT?: true
    F1_RECBMTO?: true
    F1_USERLGI?: true
    D_E_L_E_T_?: true
    F1_XTIPO?: true
    F1_XPRIOR?: true
    F1_XORI?: true
    F1_XUSRRA?: true
    F1_XOBS?: true
    F1_XREV?: true
    F1_ZOBSREV?: true
  }

  export type SF1010CountAggregateInputType = {
    R_E_C_N_O_?: true
    F1_FILIAL?: true
    F1_DOC?: true
    F1_SERIE?: true
    F1_FORNECE?: true
    F1_LOJA?: true
    F1_STATUS?: true
    F1_EMISSAO?: true
    F1_DTDIGIT?: true
    F1_RECBMTO?: true
    F1_USERLGI?: true
    D_E_L_E_T_?: true
    F1_XTIPO?: true
    F1_XPRIOR?: true
    F1_XORI?: true
    F1_XUSRRA?: true
    F1_XOBS?: true
    F1_XREV?: true
    F1_ZOBSREV?: true
    _all?: true
  }

  export type SF1010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SF1010 to aggregate.
     */
    where?: SF1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF1010s to fetch.
     */
    orderBy?: SF1010OrderByWithRelationInput | SF1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SF1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SF1010s
    **/
    _count?: true | SF1010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SF1010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SF1010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SF1010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SF1010MaxAggregateInputType
  }

  export type GetSF1010AggregateType<T extends SF1010AggregateArgs> = {
        [P in keyof T & keyof AggregateSF1010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSF1010[P]>
      : GetScalarType<T[P], AggregateSF1010[P]>
  }




  export type SF1010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SF1010WhereInput
    orderBy?: SF1010OrderByWithAggregationInput | SF1010OrderByWithAggregationInput[]
    by: SF1010ScalarFieldEnum[] | SF1010ScalarFieldEnum
    having?: SF1010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SF1010CountAggregateInputType | true
    _avg?: SF1010AvgAggregateInputType
    _sum?: SF1010SumAggregateInputType
    _min?: SF1010MinAggregateInputType
    _max?: SF1010MaxAggregateInputType
  }

  export type SF1010GroupByOutputType = {
    R_E_C_N_O_: number
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_FORNECE: string
    F1_LOJA: string
    F1_STATUS: string | null
    F1_EMISSAO: string | null
    F1_DTDIGIT: string | null
    F1_RECBMTO: string | null
    F1_USERLGI: string | null
    D_E_L_E_T_: string | null
    F1_XTIPO: string | null
    F1_XPRIOR: string | null
    F1_XORI: string | null
    F1_XUSRRA: string | null
    F1_XOBS: string | null
    F1_XREV: string | null
    F1_ZOBSREV: string | null
    _count: SF1010CountAggregateOutputType | null
    _avg: SF1010AvgAggregateOutputType | null
    _sum: SF1010SumAggregateOutputType | null
    _min: SF1010MinAggregateOutputType | null
    _max: SF1010MaxAggregateOutputType | null
  }

  type GetSF1010GroupByPayload<T extends SF1010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SF1010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SF1010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SF1010GroupByOutputType[P]>
            : GetScalarType<T[P], SF1010GroupByOutputType[P]>
        }
      >
    >


  export type SF1010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    F1_FILIAL?: boolean
    F1_DOC?: boolean
    F1_SERIE?: boolean
    F1_FORNECE?: boolean
    F1_LOJA?: boolean
    F1_STATUS?: boolean
    F1_EMISSAO?: boolean
    F1_DTDIGIT?: boolean
    F1_RECBMTO?: boolean
    F1_USERLGI?: boolean
    D_E_L_E_T_?: boolean
    F1_XTIPO?: boolean
    F1_XPRIOR?: boolean
    F1_XORI?: boolean
    F1_XUSRRA?: boolean
    F1_XOBS?: boolean
    F1_XREV?: boolean
    F1_ZOBSREV?: boolean
    SD1?: boolean | SF1010$SD1Args<ExtArgs>
    SA2?: boolean | SF1010$SA2Args<ExtArgs>
    _count?: boolean | SF1010CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sF1010"]>



  export type SF1010SelectScalar = {
    R_E_C_N_O_?: boolean
    F1_FILIAL?: boolean
    F1_DOC?: boolean
    F1_SERIE?: boolean
    F1_FORNECE?: boolean
    F1_LOJA?: boolean
    F1_STATUS?: boolean
    F1_EMISSAO?: boolean
    F1_DTDIGIT?: boolean
    F1_RECBMTO?: boolean
    F1_USERLGI?: boolean
    D_E_L_E_T_?: boolean
    F1_XTIPO?: boolean
    F1_XPRIOR?: boolean
    F1_XORI?: boolean
    F1_XUSRRA?: boolean
    F1_XOBS?: boolean
    F1_XREV?: boolean
    F1_ZOBSREV?: boolean
  }

  export type SF1010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "F1_FILIAL" | "F1_DOC" | "F1_SERIE" | "F1_FORNECE" | "F1_LOJA" | "F1_STATUS" | "F1_EMISSAO" | "F1_DTDIGIT" | "F1_RECBMTO" | "F1_USERLGI" | "D_E_L_E_T_" | "F1_XTIPO" | "F1_XPRIOR" | "F1_XORI" | "F1_XUSRRA" | "F1_XOBS" | "F1_XREV" | "F1_ZOBSREV", ExtArgs["result"]["sF1010"]>
  export type SF1010Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SD1?: boolean | SF1010$SD1Args<ExtArgs>
    SA2?: boolean | SF1010$SA2Args<ExtArgs>
    _count?: boolean | SF1010CountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SF1010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SF1010"
    objects: {
      SD1: Prisma.$SD1010Payload<ExtArgs>[]
      SA2: Prisma.$SA2010Payload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      F1_FILIAL: string
      F1_DOC: string
      F1_SERIE: string
      F1_FORNECE: string
      F1_LOJA: string
      F1_STATUS: string | null
      F1_EMISSAO: string | null
      F1_DTDIGIT: string | null
      F1_RECBMTO: string | null
      F1_USERLGI: string | null
      D_E_L_E_T_: string | null
      F1_XTIPO: string | null
      F1_XPRIOR: string | null
      F1_XORI: string | null
      F1_XUSRRA: string | null
      F1_XOBS: string | null
      F1_XREV: string | null
      F1_ZOBSREV: string | null
    }, ExtArgs["result"]["sF1010"]>
    composites: {}
  }

  type SF1010GetPayload<S extends boolean | null | undefined | SF1010DefaultArgs> = $Result.GetResult<Prisma.$SF1010Payload, S>

  type SF1010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SF1010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SF1010CountAggregateInputType | true
    }

  export interface SF1010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SF1010'], meta: { name: 'SF1010' } }
    /**
     * Find zero or one SF1010 that matches the filter.
     * @param {SF1010FindUniqueArgs} args - Arguments to find a SF1010
     * @example
     * // Get one SF1010
     * const sF1010 = await prisma.sF1010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SF1010FindUniqueArgs>(args: SelectSubset<T, SF1010FindUniqueArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SF1010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SF1010FindUniqueOrThrowArgs} args - Arguments to find a SF1010
     * @example
     * // Get one SF1010
     * const sF1010 = await prisma.sF1010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SF1010FindUniqueOrThrowArgs>(args: SelectSubset<T, SF1010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SF1010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010FindFirstArgs} args - Arguments to find a SF1010
     * @example
     * // Get one SF1010
     * const sF1010 = await prisma.sF1010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SF1010FindFirstArgs>(args?: SelectSubset<T, SF1010FindFirstArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SF1010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010FindFirstOrThrowArgs} args - Arguments to find a SF1010
     * @example
     * // Get one SF1010
     * const sF1010 = await prisma.sF1010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SF1010FindFirstOrThrowArgs>(args?: SelectSubset<T, SF1010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SF1010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SF1010s
     * const sF1010s = await prisma.sF1010.findMany()
     * 
     * // Get first 10 SF1010s
     * const sF1010s = await prisma.sF1010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sF1010WithR_E_C_N_O_Only = await prisma.sF1010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SF1010FindManyArgs>(args?: SelectSubset<T, SF1010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SF1010.
     * @param {SF1010CreateArgs} args - Arguments to create a SF1010.
     * @example
     * // Create one SF1010
     * const SF1010 = await prisma.sF1010.create({
     *   data: {
     *     // ... data to create a SF1010
     *   }
     * })
     * 
     */
    create<T extends SF1010CreateArgs>(args: SelectSubset<T, SF1010CreateArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SF1010s.
     * @param {SF1010CreateManyArgs} args - Arguments to create many SF1010s.
     * @example
     * // Create many SF1010s
     * const sF1010 = await prisma.sF1010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SF1010CreateManyArgs>(args?: SelectSubset<T, SF1010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SF1010.
     * @param {SF1010DeleteArgs} args - Arguments to delete one SF1010.
     * @example
     * // Delete one SF1010
     * const SF1010 = await prisma.sF1010.delete({
     *   where: {
     *     // ... filter to delete one SF1010
     *   }
     * })
     * 
     */
    delete<T extends SF1010DeleteArgs>(args: SelectSubset<T, SF1010DeleteArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SF1010.
     * @param {SF1010UpdateArgs} args - Arguments to update one SF1010.
     * @example
     * // Update one SF1010
     * const sF1010 = await prisma.sF1010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SF1010UpdateArgs>(args: SelectSubset<T, SF1010UpdateArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SF1010s.
     * @param {SF1010DeleteManyArgs} args - Arguments to filter SF1010s to delete.
     * @example
     * // Delete a few SF1010s
     * const { count } = await prisma.sF1010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SF1010DeleteManyArgs>(args?: SelectSubset<T, SF1010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SF1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SF1010s
     * const sF1010 = await prisma.sF1010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SF1010UpdateManyArgs>(args: SelectSubset<T, SF1010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SF1010.
     * @param {SF1010UpsertArgs} args - Arguments to update or create a SF1010.
     * @example
     * // Update or create a SF1010
     * const sF1010 = await prisma.sF1010.upsert({
     *   create: {
     *     // ... data to create a SF1010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SF1010 we want to update
     *   }
     * })
     */
    upsert<T extends SF1010UpsertArgs>(args: SelectSubset<T, SF1010UpsertArgs<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SF1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010CountArgs} args - Arguments to filter SF1010s to count.
     * @example
     * // Count the number of SF1010s
     * const count = await prisma.sF1010.count({
     *   where: {
     *     // ... the filter for the SF1010s we want to count
     *   }
     * })
    **/
    count<T extends SF1010CountArgs>(
      args?: Subset<T, SF1010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SF1010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SF1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SF1010AggregateArgs>(args: Subset<T, SF1010AggregateArgs>): Prisma.PrismaPromise<GetSF1010AggregateType<T>>

    /**
     * Group by SF1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF1010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SF1010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SF1010GroupByArgs['orderBy'] }
        : { orderBy?: SF1010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SF1010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSF1010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SF1010 model
   */
  readonly fields: SF1010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SF1010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SF1010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SD1<T extends SF1010$SD1Args<ExtArgs> = {}>(args?: Subset<T, SF1010$SD1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SA2<T extends SF1010$SA2Args<ExtArgs> = {}>(args?: Subset<T, SF1010$SA2Args<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SF1010 model
   */
  interface SF1010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SF1010", 'Int'>
    readonly F1_FILIAL: FieldRef<"SF1010", 'String'>
    readonly F1_DOC: FieldRef<"SF1010", 'String'>
    readonly F1_SERIE: FieldRef<"SF1010", 'String'>
    readonly F1_FORNECE: FieldRef<"SF1010", 'String'>
    readonly F1_LOJA: FieldRef<"SF1010", 'String'>
    readonly F1_STATUS: FieldRef<"SF1010", 'String'>
    readonly F1_EMISSAO: FieldRef<"SF1010", 'String'>
    readonly F1_DTDIGIT: FieldRef<"SF1010", 'String'>
    readonly F1_RECBMTO: FieldRef<"SF1010", 'String'>
    readonly F1_USERLGI: FieldRef<"SF1010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SF1010", 'String'>
    readonly F1_XTIPO: FieldRef<"SF1010", 'String'>
    readonly F1_XPRIOR: FieldRef<"SF1010", 'String'>
    readonly F1_XORI: FieldRef<"SF1010", 'String'>
    readonly F1_XUSRRA: FieldRef<"SF1010", 'String'>
    readonly F1_XOBS: FieldRef<"SF1010", 'String'>
    readonly F1_XREV: FieldRef<"SF1010", 'String'>
    readonly F1_ZOBSREV: FieldRef<"SF1010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SF1010 findUnique
   */
  export type SF1010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter, which SF1010 to fetch.
     */
    where: SF1010WhereUniqueInput
  }

  /**
   * SF1010 findUniqueOrThrow
   */
  export type SF1010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter, which SF1010 to fetch.
     */
    where: SF1010WhereUniqueInput
  }

  /**
   * SF1010 findFirst
   */
  export type SF1010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter, which SF1010 to fetch.
     */
    where?: SF1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF1010s to fetch.
     */
    orderBy?: SF1010OrderByWithRelationInput | SF1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SF1010s.
     */
    cursor?: SF1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SF1010s.
     */
    distinct?: SF1010ScalarFieldEnum | SF1010ScalarFieldEnum[]
  }

  /**
   * SF1010 findFirstOrThrow
   */
  export type SF1010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter, which SF1010 to fetch.
     */
    where?: SF1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF1010s to fetch.
     */
    orderBy?: SF1010OrderByWithRelationInput | SF1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SF1010s.
     */
    cursor?: SF1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SF1010s.
     */
    distinct?: SF1010ScalarFieldEnum | SF1010ScalarFieldEnum[]
  }

  /**
   * SF1010 findMany
   */
  export type SF1010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter, which SF1010s to fetch.
     */
    where?: SF1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF1010s to fetch.
     */
    orderBy?: SF1010OrderByWithRelationInput | SF1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SF1010s.
     */
    cursor?: SF1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF1010s.
     */
    skip?: number
    distinct?: SF1010ScalarFieldEnum | SF1010ScalarFieldEnum[]
  }

  /**
   * SF1010 create
   */
  export type SF1010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * The data needed to create a SF1010.
     */
    data: XOR<SF1010CreateInput, SF1010UncheckedCreateInput>
  }

  /**
   * SF1010 createMany
   */
  export type SF1010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SF1010s.
     */
    data: SF1010CreateManyInput | SF1010CreateManyInput[]
  }

  /**
   * SF1010 update
   */
  export type SF1010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * The data needed to update a SF1010.
     */
    data: XOR<SF1010UpdateInput, SF1010UncheckedUpdateInput>
    /**
     * Choose, which SF1010 to update.
     */
    where: SF1010WhereUniqueInput
  }

  /**
   * SF1010 updateMany
   */
  export type SF1010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SF1010s.
     */
    data: XOR<SF1010UpdateManyMutationInput, SF1010UncheckedUpdateManyInput>
    /**
     * Filter which SF1010s to update
     */
    where?: SF1010WhereInput
    /**
     * Limit how many SF1010s to update.
     */
    limit?: number
  }

  /**
   * SF1010 upsert
   */
  export type SF1010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * The filter to search for the SF1010 to update in case it exists.
     */
    where: SF1010WhereUniqueInput
    /**
     * In case the SF1010 found by the `where` argument doesn't exist, create a new SF1010 with this data.
     */
    create: XOR<SF1010CreateInput, SF1010UncheckedCreateInput>
    /**
     * In case the SF1010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SF1010UpdateInput, SF1010UncheckedUpdateInput>
  }

  /**
   * SF1010 delete
   */
  export type SF1010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    /**
     * Filter which SF1010 to delete.
     */
    where: SF1010WhereUniqueInput
  }

  /**
   * SF1010 deleteMany
   */
  export type SF1010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SF1010s to delete
     */
    where?: SF1010WhereInput
    /**
     * Limit how many SF1010s to delete.
     */
    limit?: number
  }

  /**
   * SF1010.SD1
   */
  export type SF1010$SD1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    where?: SD1010WhereInput
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    cursor?: SD1010WhereUniqueInput
    take?: number
    skip?: number
    distinct?: SD1010ScalarFieldEnum | SD1010ScalarFieldEnum[]
  }

  /**
   * SF1010.SA2
   */
  export type SF1010$SA2Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    where?: SA2010WhereInput
  }

  /**
   * SF1010 without action
   */
  export type SF1010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
  }


  /**
   * Model SD1010
   */

  export type AggregateSD1010 = {
    _count: SD1010CountAggregateOutputType | null
    _avg: SD1010AvgAggregateOutputType | null
    _sum: SD1010SumAggregateOutputType | null
    _min: SD1010MinAggregateOutputType | null
    _max: SD1010MaxAggregateOutputType | null
  }

  export type SD1010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
    D1_TOTAL: number | null
  }

  export type SD1010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
    D1_TOTAL: number | null
  }

  export type SD1010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    D1_FILIAL: string | null
    D1_DOC: string | null
    D1_SERIE: string | null
    D1_FORNECE: string | null
    D1_LOJA: string | null
    D1_TOTAL: number | null
    D1_TES: string | null
    D_E_L_E_T_: string | null
  }

  export type SD1010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    D1_FILIAL: string | null
    D1_DOC: string | null
    D1_SERIE: string | null
    D1_FORNECE: string | null
    D1_LOJA: string | null
    D1_TOTAL: number | null
    D1_TES: string | null
    D_E_L_E_T_: string | null
  }

  export type SD1010CountAggregateOutputType = {
    R_E_C_N_O_: number
    D1_FILIAL: number
    D1_DOC: number
    D1_SERIE: number
    D1_FORNECE: number
    D1_LOJA: number
    D1_TOTAL: number
    D1_TES: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SD1010AvgAggregateInputType = {
    R_E_C_N_O_?: true
    D1_TOTAL?: true
  }

  export type SD1010SumAggregateInputType = {
    R_E_C_N_O_?: true
    D1_TOTAL?: true
  }

  export type SD1010MinAggregateInputType = {
    R_E_C_N_O_?: true
    D1_FILIAL?: true
    D1_DOC?: true
    D1_SERIE?: true
    D1_FORNECE?: true
    D1_LOJA?: true
    D1_TOTAL?: true
    D1_TES?: true
    D_E_L_E_T_?: true
  }

  export type SD1010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    D1_FILIAL?: true
    D1_DOC?: true
    D1_SERIE?: true
    D1_FORNECE?: true
    D1_LOJA?: true
    D1_TOTAL?: true
    D1_TES?: true
    D_E_L_E_T_?: true
  }

  export type SD1010CountAggregateInputType = {
    R_E_C_N_O_?: true
    D1_FILIAL?: true
    D1_DOC?: true
    D1_SERIE?: true
    D1_FORNECE?: true
    D1_LOJA?: true
    D1_TOTAL?: true
    D1_TES?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SD1010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SD1010 to aggregate.
     */
    where?: SD1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SD1010s to fetch.
     */
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SD1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SD1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SD1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SD1010s
    **/
    _count?: true | SD1010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SD1010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SD1010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SD1010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SD1010MaxAggregateInputType
  }

  export type GetSD1010AggregateType<T extends SD1010AggregateArgs> = {
        [P in keyof T & keyof AggregateSD1010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSD1010[P]>
      : GetScalarType<T[P], AggregateSD1010[P]>
  }




  export type SD1010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SD1010WhereInput
    orderBy?: SD1010OrderByWithAggregationInput | SD1010OrderByWithAggregationInput[]
    by: SD1010ScalarFieldEnum[] | SD1010ScalarFieldEnum
    having?: SD1010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SD1010CountAggregateInputType | true
    _avg?: SD1010AvgAggregateInputType
    _sum?: SD1010SumAggregateInputType
    _min?: SD1010MinAggregateInputType
    _max?: SD1010MaxAggregateInputType
  }

  export type SD1010GroupByOutputType = {
    R_E_C_N_O_: number
    D1_FILIAL: string
    D1_DOC: string
    D1_SERIE: string
    D1_FORNECE: string
    D1_LOJA: string
    D1_TOTAL: number
    D1_TES: string | null
    D_E_L_E_T_: string | null
    _count: SD1010CountAggregateOutputType | null
    _avg: SD1010AvgAggregateOutputType | null
    _sum: SD1010SumAggregateOutputType | null
    _min: SD1010MinAggregateOutputType | null
    _max: SD1010MaxAggregateOutputType | null
  }

  type GetSD1010GroupByPayload<T extends SD1010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SD1010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SD1010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SD1010GroupByOutputType[P]>
            : GetScalarType<T[P], SD1010GroupByOutputType[P]>
        }
      >
    >


  export type SD1010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    D1_FILIAL?: boolean
    D1_DOC?: boolean
    D1_SERIE?: boolean
    D1_FORNECE?: boolean
    D1_LOJA?: boolean
    D1_TOTAL?: boolean
    D1_TES?: boolean
    D_E_L_E_T_?: boolean
    SF1?: boolean | SD1010$SF1Args<ExtArgs>
    SF4?: boolean | SD1010$SF4Args<ExtArgs>
  }, ExtArgs["result"]["sD1010"]>



  export type SD1010SelectScalar = {
    R_E_C_N_O_?: boolean
    D1_FILIAL?: boolean
    D1_DOC?: boolean
    D1_SERIE?: boolean
    D1_FORNECE?: boolean
    D1_LOJA?: boolean
    D1_TOTAL?: boolean
    D1_TES?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SD1010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "D1_FILIAL" | "D1_DOC" | "D1_SERIE" | "D1_FORNECE" | "D1_LOJA" | "D1_TOTAL" | "D1_TES" | "D_E_L_E_T_", ExtArgs["result"]["sD1010"]>
  export type SD1010Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SF1?: boolean | SD1010$SF1Args<ExtArgs>
    SF4?: boolean | SD1010$SF4Args<ExtArgs>
  }

  export type $SD1010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SD1010"
    objects: {
      SF1: Prisma.$SF1010Payload<ExtArgs> | null
      SF4: Prisma.$SF4010Payload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      D1_FILIAL: string
      D1_DOC: string
      D1_SERIE: string
      D1_FORNECE: string
      D1_LOJA: string
      D1_TOTAL: number
      D1_TES: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sD1010"]>
    composites: {}
  }

  type SD1010GetPayload<S extends boolean | null | undefined | SD1010DefaultArgs> = $Result.GetResult<Prisma.$SD1010Payload, S>

  type SD1010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SD1010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SD1010CountAggregateInputType | true
    }

  export interface SD1010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SD1010'], meta: { name: 'SD1010' } }
    /**
     * Find zero or one SD1010 that matches the filter.
     * @param {SD1010FindUniqueArgs} args - Arguments to find a SD1010
     * @example
     * // Get one SD1010
     * const sD1010 = await prisma.sD1010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SD1010FindUniqueArgs>(args: SelectSubset<T, SD1010FindUniqueArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SD1010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SD1010FindUniqueOrThrowArgs} args - Arguments to find a SD1010
     * @example
     * // Get one SD1010
     * const sD1010 = await prisma.sD1010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SD1010FindUniqueOrThrowArgs>(args: SelectSubset<T, SD1010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SD1010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010FindFirstArgs} args - Arguments to find a SD1010
     * @example
     * // Get one SD1010
     * const sD1010 = await prisma.sD1010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SD1010FindFirstArgs>(args?: SelectSubset<T, SD1010FindFirstArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SD1010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010FindFirstOrThrowArgs} args - Arguments to find a SD1010
     * @example
     * // Get one SD1010
     * const sD1010 = await prisma.sD1010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SD1010FindFirstOrThrowArgs>(args?: SelectSubset<T, SD1010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SD1010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SD1010s
     * const sD1010s = await prisma.sD1010.findMany()
     * 
     * // Get first 10 SD1010s
     * const sD1010s = await prisma.sD1010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sD1010WithR_E_C_N_O_Only = await prisma.sD1010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SD1010FindManyArgs>(args?: SelectSubset<T, SD1010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SD1010.
     * @param {SD1010CreateArgs} args - Arguments to create a SD1010.
     * @example
     * // Create one SD1010
     * const SD1010 = await prisma.sD1010.create({
     *   data: {
     *     // ... data to create a SD1010
     *   }
     * })
     * 
     */
    create<T extends SD1010CreateArgs>(args: SelectSubset<T, SD1010CreateArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SD1010s.
     * @param {SD1010CreateManyArgs} args - Arguments to create many SD1010s.
     * @example
     * // Create many SD1010s
     * const sD1010 = await prisma.sD1010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SD1010CreateManyArgs>(args?: SelectSubset<T, SD1010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SD1010.
     * @param {SD1010DeleteArgs} args - Arguments to delete one SD1010.
     * @example
     * // Delete one SD1010
     * const SD1010 = await prisma.sD1010.delete({
     *   where: {
     *     // ... filter to delete one SD1010
     *   }
     * })
     * 
     */
    delete<T extends SD1010DeleteArgs>(args: SelectSubset<T, SD1010DeleteArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SD1010.
     * @param {SD1010UpdateArgs} args - Arguments to update one SD1010.
     * @example
     * // Update one SD1010
     * const sD1010 = await prisma.sD1010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SD1010UpdateArgs>(args: SelectSubset<T, SD1010UpdateArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SD1010s.
     * @param {SD1010DeleteManyArgs} args - Arguments to filter SD1010s to delete.
     * @example
     * // Delete a few SD1010s
     * const { count } = await prisma.sD1010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SD1010DeleteManyArgs>(args?: SelectSubset<T, SD1010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SD1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SD1010s
     * const sD1010 = await prisma.sD1010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SD1010UpdateManyArgs>(args: SelectSubset<T, SD1010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SD1010.
     * @param {SD1010UpsertArgs} args - Arguments to update or create a SD1010.
     * @example
     * // Update or create a SD1010
     * const sD1010 = await prisma.sD1010.upsert({
     *   create: {
     *     // ... data to create a SD1010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SD1010 we want to update
     *   }
     * })
     */
    upsert<T extends SD1010UpsertArgs>(args: SelectSubset<T, SD1010UpsertArgs<ExtArgs>>): Prisma__SD1010Client<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SD1010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010CountArgs} args - Arguments to filter SD1010s to count.
     * @example
     * // Count the number of SD1010s
     * const count = await prisma.sD1010.count({
     *   where: {
     *     // ... the filter for the SD1010s we want to count
     *   }
     * })
    **/
    count<T extends SD1010CountArgs>(
      args?: Subset<T, SD1010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SD1010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SD1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SD1010AggregateArgs>(args: Subset<T, SD1010AggregateArgs>): Prisma.PrismaPromise<GetSD1010AggregateType<T>>

    /**
     * Group by SD1010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SD1010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SD1010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SD1010GroupByArgs['orderBy'] }
        : { orderBy?: SD1010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SD1010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSD1010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SD1010 model
   */
  readonly fields: SD1010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SD1010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SD1010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SF1<T extends SD1010$SF1Args<ExtArgs> = {}>(args?: Subset<T, SD1010$SF1Args<ExtArgs>>): Prisma__SF1010Client<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    SF4<T extends SD1010$SF4Args<ExtArgs> = {}>(args?: Subset<T, SD1010$SF4Args<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SD1010 model
   */
  interface SD1010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SD1010", 'Int'>
    readonly D1_FILIAL: FieldRef<"SD1010", 'String'>
    readonly D1_DOC: FieldRef<"SD1010", 'String'>
    readonly D1_SERIE: FieldRef<"SD1010", 'String'>
    readonly D1_FORNECE: FieldRef<"SD1010", 'String'>
    readonly D1_LOJA: FieldRef<"SD1010", 'String'>
    readonly D1_TOTAL: FieldRef<"SD1010", 'Float'>
    readonly D1_TES: FieldRef<"SD1010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SD1010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SD1010 findUnique
   */
  export type SD1010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter, which SD1010 to fetch.
     */
    where: SD1010WhereUniqueInput
  }

  /**
   * SD1010 findUniqueOrThrow
   */
  export type SD1010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter, which SD1010 to fetch.
     */
    where: SD1010WhereUniqueInput
  }

  /**
   * SD1010 findFirst
   */
  export type SD1010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter, which SD1010 to fetch.
     */
    where?: SD1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SD1010s to fetch.
     */
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SD1010s.
     */
    cursor?: SD1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SD1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SD1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SD1010s.
     */
    distinct?: SD1010ScalarFieldEnum | SD1010ScalarFieldEnum[]
  }

  /**
   * SD1010 findFirstOrThrow
   */
  export type SD1010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter, which SD1010 to fetch.
     */
    where?: SD1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SD1010s to fetch.
     */
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SD1010s.
     */
    cursor?: SD1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SD1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SD1010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SD1010s.
     */
    distinct?: SD1010ScalarFieldEnum | SD1010ScalarFieldEnum[]
  }

  /**
   * SD1010 findMany
   */
  export type SD1010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter, which SD1010s to fetch.
     */
    where?: SD1010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SD1010s to fetch.
     */
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SD1010s.
     */
    cursor?: SD1010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SD1010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SD1010s.
     */
    skip?: number
    distinct?: SD1010ScalarFieldEnum | SD1010ScalarFieldEnum[]
  }

  /**
   * SD1010 create
   */
  export type SD1010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * The data needed to create a SD1010.
     */
    data: XOR<SD1010CreateInput, SD1010UncheckedCreateInput>
  }

  /**
   * SD1010 createMany
   */
  export type SD1010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SD1010s.
     */
    data: SD1010CreateManyInput | SD1010CreateManyInput[]
  }

  /**
   * SD1010 update
   */
  export type SD1010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * The data needed to update a SD1010.
     */
    data: XOR<SD1010UpdateInput, SD1010UncheckedUpdateInput>
    /**
     * Choose, which SD1010 to update.
     */
    where: SD1010WhereUniqueInput
  }

  /**
   * SD1010 updateMany
   */
  export type SD1010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SD1010s.
     */
    data: XOR<SD1010UpdateManyMutationInput, SD1010UncheckedUpdateManyInput>
    /**
     * Filter which SD1010s to update
     */
    where?: SD1010WhereInput
    /**
     * Limit how many SD1010s to update.
     */
    limit?: number
  }

  /**
   * SD1010 upsert
   */
  export type SD1010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * The filter to search for the SD1010 to update in case it exists.
     */
    where: SD1010WhereUniqueInput
    /**
     * In case the SD1010 found by the `where` argument doesn't exist, create a new SD1010 with this data.
     */
    create: XOR<SD1010CreateInput, SD1010UncheckedCreateInput>
    /**
     * In case the SD1010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SD1010UpdateInput, SD1010UncheckedUpdateInput>
  }

  /**
   * SD1010 delete
   */
  export type SD1010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    /**
     * Filter which SD1010 to delete.
     */
    where: SD1010WhereUniqueInput
  }

  /**
   * SD1010 deleteMany
   */
  export type SD1010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SD1010s to delete
     */
    where?: SD1010WhereInput
    /**
     * Limit how many SD1010s to delete.
     */
    limit?: number
  }

  /**
   * SD1010.SF1
   */
  export type SD1010$SF1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    where?: SF1010WhereInput
  }

  /**
   * SD1010.SF4
   */
  export type SD1010$SF4Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    where?: SF4010WhereInput
  }

  /**
   * SD1010 without action
   */
  export type SD1010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
  }


  /**
   * Model SF4010
   */

  export type AggregateSF4010 = {
    _count: SF4010CountAggregateOutputType | null
    _min: SF4010MinAggregateOutputType | null
    _max: SF4010MaxAggregateOutputType | null
  }

  export type SF4010MinAggregateOutputType = {
    F4_CODIGO: string | null
    F4_TRANFIL: string | null
    D_E_L_E_T_: string | null
  }

  export type SF4010MaxAggregateOutputType = {
    F4_CODIGO: string | null
    F4_TRANFIL: string | null
    D_E_L_E_T_: string | null
  }

  export type SF4010CountAggregateOutputType = {
    F4_CODIGO: number
    F4_TRANFIL: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SF4010MinAggregateInputType = {
    F4_CODIGO?: true
    F4_TRANFIL?: true
    D_E_L_E_T_?: true
  }

  export type SF4010MaxAggregateInputType = {
    F4_CODIGO?: true
    F4_TRANFIL?: true
    D_E_L_E_T_?: true
  }

  export type SF4010CountAggregateInputType = {
    F4_CODIGO?: true
    F4_TRANFIL?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SF4010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SF4010 to aggregate.
     */
    where?: SF4010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF4010s to fetch.
     */
    orderBy?: SF4010OrderByWithRelationInput | SF4010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SF4010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF4010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF4010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SF4010s
    **/
    _count?: true | SF4010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SF4010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SF4010MaxAggregateInputType
  }

  export type GetSF4010AggregateType<T extends SF4010AggregateArgs> = {
        [P in keyof T & keyof AggregateSF4010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSF4010[P]>
      : GetScalarType<T[P], AggregateSF4010[P]>
  }




  export type SF4010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SF4010WhereInput
    orderBy?: SF4010OrderByWithAggregationInput | SF4010OrderByWithAggregationInput[]
    by: SF4010ScalarFieldEnum[] | SF4010ScalarFieldEnum
    having?: SF4010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SF4010CountAggregateInputType | true
    _min?: SF4010MinAggregateInputType
    _max?: SF4010MaxAggregateInputType
  }

  export type SF4010GroupByOutputType = {
    F4_CODIGO: string
    F4_TRANFIL: string | null
    D_E_L_E_T_: string | null
    _count: SF4010CountAggregateOutputType | null
    _min: SF4010MinAggregateOutputType | null
    _max: SF4010MaxAggregateOutputType | null
  }

  type GetSF4010GroupByPayload<T extends SF4010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SF4010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SF4010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SF4010GroupByOutputType[P]>
            : GetScalarType<T[P], SF4010GroupByOutputType[P]>
        }
      >
    >


  export type SF4010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    F4_CODIGO?: boolean
    F4_TRANFIL?: boolean
    D_E_L_E_T_?: boolean
    SD1?: boolean | SF4010$SD1Args<ExtArgs>
    _count?: boolean | SF4010CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sF4010"]>



  export type SF4010SelectScalar = {
    F4_CODIGO?: boolean
    F4_TRANFIL?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SF4010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"F4_CODIGO" | "F4_TRANFIL" | "D_E_L_E_T_", ExtArgs["result"]["sF4010"]>
  export type SF4010Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SD1?: boolean | SF4010$SD1Args<ExtArgs>
    _count?: boolean | SF4010CountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SF4010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SF4010"
    objects: {
      SD1: Prisma.$SD1010Payload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      F4_CODIGO: string
      F4_TRANFIL: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sF4010"]>
    composites: {}
  }

  type SF4010GetPayload<S extends boolean | null | undefined | SF4010DefaultArgs> = $Result.GetResult<Prisma.$SF4010Payload, S>

  type SF4010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SF4010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SF4010CountAggregateInputType | true
    }

  export interface SF4010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SF4010'], meta: { name: 'SF4010' } }
    /**
     * Find zero or one SF4010 that matches the filter.
     * @param {SF4010FindUniqueArgs} args - Arguments to find a SF4010
     * @example
     * // Get one SF4010
     * const sF4010 = await prisma.sF4010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SF4010FindUniqueArgs>(args: SelectSubset<T, SF4010FindUniqueArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SF4010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SF4010FindUniqueOrThrowArgs} args - Arguments to find a SF4010
     * @example
     * // Get one SF4010
     * const sF4010 = await prisma.sF4010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SF4010FindUniqueOrThrowArgs>(args: SelectSubset<T, SF4010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SF4010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010FindFirstArgs} args - Arguments to find a SF4010
     * @example
     * // Get one SF4010
     * const sF4010 = await prisma.sF4010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SF4010FindFirstArgs>(args?: SelectSubset<T, SF4010FindFirstArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SF4010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010FindFirstOrThrowArgs} args - Arguments to find a SF4010
     * @example
     * // Get one SF4010
     * const sF4010 = await prisma.sF4010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SF4010FindFirstOrThrowArgs>(args?: SelectSubset<T, SF4010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SF4010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SF4010s
     * const sF4010s = await prisma.sF4010.findMany()
     * 
     * // Get first 10 SF4010s
     * const sF4010s = await prisma.sF4010.findMany({ take: 10 })
     * 
     * // Only select the `F4_CODIGO`
     * const sF4010WithF4_CODIGOOnly = await prisma.sF4010.findMany({ select: { F4_CODIGO: true } })
     * 
     */
    findMany<T extends SF4010FindManyArgs>(args?: SelectSubset<T, SF4010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SF4010.
     * @param {SF4010CreateArgs} args - Arguments to create a SF4010.
     * @example
     * // Create one SF4010
     * const SF4010 = await prisma.sF4010.create({
     *   data: {
     *     // ... data to create a SF4010
     *   }
     * })
     * 
     */
    create<T extends SF4010CreateArgs>(args: SelectSubset<T, SF4010CreateArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SF4010s.
     * @param {SF4010CreateManyArgs} args - Arguments to create many SF4010s.
     * @example
     * // Create many SF4010s
     * const sF4010 = await prisma.sF4010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SF4010CreateManyArgs>(args?: SelectSubset<T, SF4010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SF4010.
     * @param {SF4010DeleteArgs} args - Arguments to delete one SF4010.
     * @example
     * // Delete one SF4010
     * const SF4010 = await prisma.sF4010.delete({
     *   where: {
     *     // ... filter to delete one SF4010
     *   }
     * })
     * 
     */
    delete<T extends SF4010DeleteArgs>(args: SelectSubset<T, SF4010DeleteArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SF4010.
     * @param {SF4010UpdateArgs} args - Arguments to update one SF4010.
     * @example
     * // Update one SF4010
     * const sF4010 = await prisma.sF4010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SF4010UpdateArgs>(args: SelectSubset<T, SF4010UpdateArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SF4010s.
     * @param {SF4010DeleteManyArgs} args - Arguments to filter SF4010s to delete.
     * @example
     * // Delete a few SF4010s
     * const { count } = await prisma.sF4010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SF4010DeleteManyArgs>(args?: SelectSubset<T, SF4010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SF4010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SF4010s
     * const sF4010 = await prisma.sF4010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SF4010UpdateManyArgs>(args: SelectSubset<T, SF4010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SF4010.
     * @param {SF4010UpsertArgs} args - Arguments to update or create a SF4010.
     * @example
     * // Update or create a SF4010
     * const sF4010 = await prisma.sF4010.upsert({
     *   create: {
     *     // ... data to create a SF4010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SF4010 we want to update
     *   }
     * })
     */
    upsert<T extends SF4010UpsertArgs>(args: SelectSubset<T, SF4010UpsertArgs<ExtArgs>>): Prisma__SF4010Client<$Result.GetResult<Prisma.$SF4010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SF4010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010CountArgs} args - Arguments to filter SF4010s to count.
     * @example
     * // Count the number of SF4010s
     * const count = await prisma.sF4010.count({
     *   where: {
     *     // ... the filter for the SF4010s we want to count
     *   }
     * })
    **/
    count<T extends SF4010CountArgs>(
      args?: Subset<T, SF4010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SF4010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SF4010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SF4010AggregateArgs>(args: Subset<T, SF4010AggregateArgs>): Prisma.PrismaPromise<GetSF4010AggregateType<T>>

    /**
     * Group by SF4010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SF4010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SF4010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SF4010GroupByArgs['orderBy'] }
        : { orderBy?: SF4010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SF4010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSF4010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SF4010 model
   */
  readonly fields: SF4010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SF4010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SF4010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SD1<T extends SF4010$SD1Args<ExtArgs> = {}>(args?: Subset<T, SF4010$SD1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SD1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SF4010 model
   */
  interface SF4010FieldRefs {
    readonly F4_CODIGO: FieldRef<"SF4010", 'String'>
    readonly F4_TRANFIL: FieldRef<"SF4010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SF4010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SF4010 findUnique
   */
  export type SF4010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter, which SF4010 to fetch.
     */
    where: SF4010WhereUniqueInput
  }

  /**
   * SF4010 findUniqueOrThrow
   */
  export type SF4010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter, which SF4010 to fetch.
     */
    where: SF4010WhereUniqueInput
  }

  /**
   * SF4010 findFirst
   */
  export type SF4010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter, which SF4010 to fetch.
     */
    where?: SF4010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF4010s to fetch.
     */
    orderBy?: SF4010OrderByWithRelationInput | SF4010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SF4010s.
     */
    cursor?: SF4010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF4010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF4010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SF4010s.
     */
    distinct?: SF4010ScalarFieldEnum | SF4010ScalarFieldEnum[]
  }

  /**
   * SF4010 findFirstOrThrow
   */
  export type SF4010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter, which SF4010 to fetch.
     */
    where?: SF4010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF4010s to fetch.
     */
    orderBy?: SF4010OrderByWithRelationInput | SF4010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SF4010s.
     */
    cursor?: SF4010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF4010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF4010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SF4010s.
     */
    distinct?: SF4010ScalarFieldEnum | SF4010ScalarFieldEnum[]
  }

  /**
   * SF4010 findMany
   */
  export type SF4010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter, which SF4010s to fetch.
     */
    where?: SF4010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SF4010s to fetch.
     */
    orderBy?: SF4010OrderByWithRelationInput | SF4010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SF4010s.
     */
    cursor?: SF4010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SF4010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SF4010s.
     */
    skip?: number
    distinct?: SF4010ScalarFieldEnum | SF4010ScalarFieldEnum[]
  }

  /**
   * SF4010 create
   */
  export type SF4010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * The data needed to create a SF4010.
     */
    data: XOR<SF4010CreateInput, SF4010UncheckedCreateInput>
  }

  /**
   * SF4010 createMany
   */
  export type SF4010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SF4010s.
     */
    data: SF4010CreateManyInput | SF4010CreateManyInput[]
  }

  /**
   * SF4010 update
   */
  export type SF4010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * The data needed to update a SF4010.
     */
    data: XOR<SF4010UpdateInput, SF4010UncheckedUpdateInput>
    /**
     * Choose, which SF4010 to update.
     */
    where: SF4010WhereUniqueInput
  }

  /**
   * SF4010 updateMany
   */
  export type SF4010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SF4010s.
     */
    data: XOR<SF4010UpdateManyMutationInput, SF4010UncheckedUpdateManyInput>
    /**
     * Filter which SF4010s to update
     */
    where?: SF4010WhereInput
    /**
     * Limit how many SF4010s to update.
     */
    limit?: number
  }

  /**
   * SF4010 upsert
   */
  export type SF4010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * The filter to search for the SF4010 to update in case it exists.
     */
    where: SF4010WhereUniqueInput
    /**
     * In case the SF4010 found by the `where` argument doesn't exist, create a new SF4010 with this data.
     */
    create: XOR<SF4010CreateInput, SF4010UncheckedCreateInput>
    /**
     * In case the SF4010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SF4010UpdateInput, SF4010UncheckedUpdateInput>
  }

  /**
   * SF4010 delete
   */
  export type SF4010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
    /**
     * Filter which SF4010 to delete.
     */
    where: SF4010WhereUniqueInput
  }

  /**
   * SF4010 deleteMany
   */
  export type SF4010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SF4010s to delete
     */
    where?: SF4010WhereInput
    /**
     * Limit how many SF4010s to delete.
     */
    limit?: number
  }

  /**
   * SF4010.SD1
   */
  export type SF4010$SD1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SD1010
     */
    select?: SD1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SD1010
     */
    omit?: SD1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SD1010Include<ExtArgs> | null
    where?: SD1010WhereInput
    orderBy?: SD1010OrderByWithRelationInput | SD1010OrderByWithRelationInput[]
    cursor?: SD1010WhereUniqueInput
    take?: number
    skip?: number
    distinct?: SD1010ScalarFieldEnum | SD1010ScalarFieldEnum[]
  }

  /**
   * SF4010 without action
   */
  export type SF4010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF4010
     */
    select?: SF4010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF4010
     */
    omit?: SF4010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF4010Include<ExtArgs> | null
  }


  /**
   * Model SA2010
   */

  export type AggregateSA2010 = {
    _count: SA2010CountAggregateOutputType | null
    _min: SA2010MinAggregateOutputType | null
    _max: SA2010MaxAggregateOutputType | null
  }

  export type SA2010MinAggregateOutputType = {
    A2_COD: string | null
    A2_LOJA: string | null
    A2_NOME: string | null
    A2_CGC: string | null
    D_E_L_E_T_: string | null
  }

  export type SA2010MaxAggregateOutputType = {
    A2_COD: string | null
    A2_LOJA: string | null
    A2_NOME: string | null
    A2_CGC: string | null
    D_E_L_E_T_: string | null
  }

  export type SA2010CountAggregateOutputType = {
    A2_COD: number
    A2_LOJA: number
    A2_NOME: number
    A2_CGC: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SA2010MinAggregateInputType = {
    A2_COD?: true
    A2_LOJA?: true
    A2_NOME?: true
    A2_CGC?: true
    D_E_L_E_T_?: true
  }

  export type SA2010MaxAggregateInputType = {
    A2_COD?: true
    A2_LOJA?: true
    A2_NOME?: true
    A2_CGC?: true
    D_E_L_E_T_?: true
  }

  export type SA2010CountAggregateInputType = {
    A2_COD?: true
    A2_LOJA?: true
    A2_NOME?: true
    A2_CGC?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SA2010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SA2010 to aggregate.
     */
    where?: SA2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SA2010s to fetch.
     */
    orderBy?: SA2010OrderByWithRelationInput | SA2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SA2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SA2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SA2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SA2010s
    **/
    _count?: true | SA2010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SA2010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SA2010MaxAggregateInputType
  }

  export type GetSA2010AggregateType<T extends SA2010AggregateArgs> = {
        [P in keyof T & keyof AggregateSA2010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSA2010[P]>
      : GetScalarType<T[P], AggregateSA2010[P]>
  }




  export type SA2010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SA2010WhereInput
    orderBy?: SA2010OrderByWithAggregationInput | SA2010OrderByWithAggregationInput[]
    by: SA2010ScalarFieldEnum[] | SA2010ScalarFieldEnum
    having?: SA2010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SA2010CountAggregateInputType | true
    _min?: SA2010MinAggregateInputType
    _max?: SA2010MaxAggregateInputType
  }

  export type SA2010GroupByOutputType = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC: string | null
    D_E_L_E_T_: string | null
    _count: SA2010CountAggregateOutputType | null
    _min: SA2010MinAggregateOutputType | null
    _max: SA2010MaxAggregateOutputType | null
  }

  type GetSA2010GroupByPayload<T extends SA2010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SA2010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SA2010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SA2010GroupByOutputType[P]>
            : GetScalarType<T[P], SA2010GroupByOutputType[P]>
        }
      >
    >


  export type SA2010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    A2_COD?: boolean
    A2_LOJA?: boolean
    A2_NOME?: boolean
    A2_CGC?: boolean
    D_E_L_E_T_?: boolean
    SF1?: boolean | SA2010$SF1Args<ExtArgs>
    _count?: boolean | SA2010CountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sA2010"]>



  export type SA2010SelectScalar = {
    A2_COD?: boolean
    A2_LOJA?: boolean
    A2_NOME?: boolean
    A2_CGC?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SA2010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"A2_COD" | "A2_LOJA" | "A2_NOME" | "A2_CGC" | "D_E_L_E_T_", ExtArgs["result"]["sA2010"]>
  export type SA2010Include<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    SF1?: boolean | SA2010$SF1Args<ExtArgs>
    _count?: boolean | SA2010CountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SA2010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SA2010"
    objects: {
      SF1: Prisma.$SF1010Payload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      A2_COD: string
      A2_LOJA: string
      A2_NOME: string
      A2_CGC: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sA2010"]>
    composites: {}
  }

  type SA2010GetPayload<S extends boolean | null | undefined | SA2010DefaultArgs> = $Result.GetResult<Prisma.$SA2010Payload, S>

  type SA2010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SA2010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SA2010CountAggregateInputType | true
    }

  export interface SA2010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SA2010'], meta: { name: 'SA2010' } }
    /**
     * Find zero or one SA2010 that matches the filter.
     * @param {SA2010FindUniqueArgs} args - Arguments to find a SA2010
     * @example
     * // Get one SA2010
     * const sA2010 = await prisma.sA2010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SA2010FindUniqueArgs>(args: SelectSubset<T, SA2010FindUniqueArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SA2010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SA2010FindUniqueOrThrowArgs} args - Arguments to find a SA2010
     * @example
     * // Get one SA2010
     * const sA2010 = await prisma.sA2010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SA2010FindUniqueOrThrowArgs>(args: SelectSubset<T, SA2010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SA2010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010FindFirstArgs} args - Arguments to find a SA2010
     * @example
     * // Get one SA2010
     * const sA2010 = await prisma.sA2010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SA2010FindFirstArgs>(args?: SelectSubset<T, SA2010FindFirstArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SA2010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010FindFirstOrThrowArgs} args - Arguments to find a SA2010
     * @example
     * // Get one SA2010
     * const sA2010 = await prisma.sA2010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SA2010FindFirstOrThrowArgs>(args?: SelectSubset<T, SA2010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SA2010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SA2010s
     * const sA2010s = await prisma.sA2010.findMany()
     * 
     * // Get first 10 SA2010s
     * const sA2010s = await prisma.sA2010.findMany({ take: 10 })
     * 
     * // Only select the `A2_COD`
     * const sA2010WithA2_CODOnly = await prisma.sA2010.findMany({ select: { A2_COD: true } })
     * 
     */
    findMany<T extends SA2010FindManyArgs>(args?: SelectSubset<T, SA2010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SA2010.
     * @param {SA2010CreateArgs} args - Arguments to create a SA2010.
     * @example
     * // Create one SA2010
     * const SA2010 = await prisma.sA2010.create({
     *   data: {
     *     // ... data to create a SA2010
     *   }
     * })
     * 
     */
    create<T extends SA2010CreateArgs>(args: SelectSubset<T, SA2010CreateArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SA2010s.
     * @param {SA2010CreateManyArgs} args - Arguments to create many SA2010s.
     * @example
     * // Create many SA2010s
     * const sA2010 = await prisma.sA2010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SA2010CreateManyArgs>(args?: SelectSubset<T, SA2010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SA2010.
     * @param {SA2010DeleteArgs} args - Arguments to delete one SA2010.
     * @example
     * // Delete one SA2010
     * const SA2010 = await prisma.sA2010.delete({
     *   where: {
     *     // ... filter to delete one SA2010
     *   }
     * })
     * 
     */
    delete<T extends SA2010DeleteArgs>(args: SelectSubset<T, SA2010DeleteArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SA2010.
     * @param {SA2010UpdateArgs} args - Arguments to update one SA2010.
     * @example
     * // Update one SA2010
     * const sA2010 = await prisma.sA2010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SA2010UpdateArgs>(args: SelectSubset<T, SA2010UpdateArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SA2010s.
     * @param {SA2010DeleteManyArgs} args - Arguments to filter SA2010s to delete.
     * @example
     * // Delete a few SA2010s
     * const { count } = await prisma.sA2010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SA2010DeleteManyArgs>(args?: SelectSubset<T, SA2010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SA2010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SA2010s
     * const sA2010 = await prisma.sA2010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SA2010UpdateManyArgs>(args: SelectSubset<T, SA2010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SA2010.
     * @param {SA2010UpsertArgs} args - Arguments to update or create a SA2010.
     * @example
     * // Update or create a SA2010
     * const sA2010 = await prisma.sA2010.upsert({
     *   create: {
     *     // ... data to create a SA2010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SA2010 we want to update
     *   }
     * })
     */
    upsert<T extends SA2010UpsertArgs>(args: SelectSubset<T, SA2010UpsertArgs<ExtArgs>>): Prisma__SA2010Client<$Result.GetResult<Prisma.$SA2010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SA2010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010CountArgs} args - Arguments to filter SA2010s to count.
     * @example
     * // Count the number of SA2010s
     * const count = await prisma.sA2010.count({
     *   where: {
     *     // ... the filter for the SA2010s we want to count
     *   }
     * })
    **/
    count<T extends SA2010CountArgs>(
      args?: Subset<T, SA2010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SA2010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SA2010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SA2010AggregateArgs>(args: Subset<T, SA2010AggregateArgs>): Prisma.PrismaPromise<GetSA2010AggregateType<T>>

    /**
     * Group by SA2010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SA2010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SA2010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SA2010GroupByArgs['orderBy'] }
        : { orderBy?: SA2010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SA2010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSA2010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SA2010 model
   */
  readonly fields: SA2010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SA2010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SA2010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    SF1<T extends SA2010$SF1Args<ExtArgs> = {}>(args?: Subset<T, SA2010$SF1Args<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SF1010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SA2010 model
   */
  interface SA2010FieldRefs {
    readonly A2_COD: FieldRef<"SA2010", 'String'>
    readonly A2_LOJA: FieldRef<"SA2010", 'String'>
    readonly A2_NOME: FieldRef<"SA2010", 'String'>
    readonly A2_CGC: FieldRef<"SA2010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SA2010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SA2010 findUnique
   */
  export type SA2010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter, which SA2010 to fetch.
     */
    where: SA2010WhereUniqueInput
  }

  /**
   * SA2010 findUniqueOrThrow
   */
  export type SA2010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter, which SA2010 to fetch.
     */
    where: SA2010WhereUniqueInput
  }

  /**
   * SA2010 findFirst
   */
  export type SA2010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter, which SA2010 to fetch.
     */
    where?: SA2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SA2010s to fetch.
     */
    orderBy?: SA2010OrderByWithRelationInput | SA2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SA2010s.
     */
    cursor?: SA2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SA2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SA2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SA2010s.
     */
    distinct?: SA2010ScalarFieldEnum | SA2010ScalarFieldEnum[]
  }

  /**
   * SA2010 findFirstOrThrow
   */
  export type SA2010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter, which SA2010 to fetch.
     */
    where?: SA2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SA2010s to fetch.
     */
    orderBy?: SA2010OrderByWithRelationInput | SA2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SA2010s.
     */
    cursor?: SA2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SA2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SA2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SA2010s.
     */
    distinct?: SA2010ScalarFieldEnum | SA2010ScalarFieldEnum[]
  }

  /**
   * SA2010 findMany
   */
  export type SA2010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter, which SA2010s to fetch.
     */
    where?: SA2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SA2010s to fetch.
     */
    orderBy?: SA2010OrderByWithRelationInput | SA2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SA2010s.
     */
    cursor?: SA2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SA2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SA2010s.
     */
    skip?: number
    distinct?: SA2010ScalarFieldEnum | SA2010ScalarFieldEnum[]
  }

  /**
   * SA2010 create
   */
  export type SA2010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * The data needed to create a SA2010.
     */
    data: XOR<SA2010CreateInput, SA2010UncheckedCreateInput>
  }

  /**
   * SA2010 createMany
   */
  export type SA2010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SA2010s.
     */
    data: SA2010CreateManyInput | SA2010CreateManyInput[]
  }

  /**
   * SA2010 update
   */
  export type SA2010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * The data needed to update a SA2010.
     */
    data: XOR<SA2010UpdateInput, SA2010UncheckedUpdateInput>
    /**
     * Choose, which SA2010 to update.
     */
    where: SA2010WhereUniqueInput
  }

  /**
   * SA2010 updateMany
   */
  export type SA2010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SA2010s.
     */
    data: XOR<SA2010UpdateManyMutationInput, SA2010UncheckedUpdateManyInput>
    /**
     * Filter which SA2010s to update
     */
    where?: SA2010WhereInput
    /**
     * Limit how many SA2010s to update.
     */
    limit?: number
  }

  /**
   * SA2010 upsert
   */
  export type SA2010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * The filter to search for the SA2010 to update in case it exists.
     */
    where: SA2010WhereUniqueInput
    /**
     * In case the SA2010 found by the `where` argument doesn't exist, create a new SA2010 with this data.
     */
    create: XOR<SA2010CreateInput, SA2010UncheckedCreateInput>
    /**
     * In case the SA2010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SA2010UpdateInput, SA2010UncheckedUpdateInput>
  }

  /**
   * SA2010 delete
   */
  export type SA2010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
    /**
     * Filter which SA2010 to delete.
     */
    where: SA2010WhereUniqueInput
  }

  /**
   * SA2010 deleteMany
   */
  export type SA2010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SA2010s to delete
     */
    where?: SA2010WhereInput
    /**
     * Limit how many SA2010s to delete.
     */
    limit?: number
  }

  /**
   * SA2010.SF1
   */
  export type SA2010$SF1Args<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SF1010
     */
    select?: SF1010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SF1010
     */
    omit?: SF1010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SF1010Include<ExtArgs> | null
    where?: SF1010WhereInput
    orderBy?: SF1010OrderByWithRelationInput | SF1010OrderByWithRelationInput[]
    cursor?: SF1010WhereUniqueInput
    take?: number
    skip?: number
    distinct?: SF1010ScalarFieldEnum | SF1010ScalarFieldEnum[]
  }

  /**
   * SA2010 without action
   */
  export type SA2010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SA2010
     */
    select?: SA2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SA2010
     */
    omit?: SA2010Omit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SA2010Include<ExtArgs> | null
  }


  /**
   * Model SC7010
   */

  export type AggregateSC7010 = {
    _count: SC7010CountAggregateOutputType | null
    _avg: SC7010AvgAggregateOutputType | null
    _sum: SC7010SumAggregateOutputType | null
    _min: SC7010MinAggregateOutputType | null
    _max: SC7010MaxAggregateOutputType | null
  }

  export type SC7010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SC7010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SC7010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    C7_FILIAL: string | null
    C7_NUM: string | null
    C7_ITEM: string | null
    C7_PRODUTO: string | null
    C7_EMISSAO: string | null
    C7_OBS: string | null
    C7_USER: string | null
    D_E_L_E_T_: string | null
  }

  export type SC7010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    C7_FILIAL: string | null
    C7_NUM: string | null
    C7_ITEM: string | null
    C7_PRODUTO: string | null
    C7_EMISSAO: string | null
    C7_OBS: string | null
    C7_USER: string | null
    D_E_L_E_T_: string | null
  }

  export type SC7010CountAggregateOutputType = {
    R_E_C_N_O_: number
    C7_FILIAL: number
    C7_NUM: number
    C7_ITEM: number
    C7_PRODUTO: number
    C7_EMISSAO: number
    C7_OBS: number
    C7_USER: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SC7010AvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SC7010SumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SC7010MinAggregateInputType = {
    R_E_C_N_O_?: true
    C7_FILIAL?: true
    C7_NUM?: true
    C7_ITEM?: true
    C7_PRODUTO?: true
    C7_EMISSAO?: true
    C7_OBS?: true
    C7_USER?: true
    D_E_L_E_T_?: true
  }

  export type SC7010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    C7_FILIAL?: true
    C7_NUM?: true
    C7_ITEM?: true
    C7_PRODUTO?: true
    C7_EMISSAO?: true
    C7_OBS?: true
    C7_USER?: true
    D_E_L_E_T_?: true
  }

  export type SC7010CountAggregateInputType = {
    R_E_C_N_O_?: true
    C7_FILIAL?: true
    C7_NUM?: true
    C7_ITEM?: true
    C7_PRODUTO?: true
    C7_EMISSAO?: true
    C7_OBS?: true
    C7_USER?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SC7010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SC7010 to aggregate.
     */
    where?: SC7010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SC7010s to fetch.
     */
    orderBy?: SC7010OrderByWithRelationInput | SC7010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SC7010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SC7010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SC7010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SC7010s
    **/
    _count?: true | SC7010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SC7010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SC7010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SC7010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SC7010MaxAggregateInputType
  }

  export type GetSC7010AggregateType<T extends SC7010AggregateArgs> = {
        [P in keyof T & keyof AggregateSC7010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSC7010[P]>
      : GetScalarType<T[P], AggregateSC7010[P]>
  }




  export type SC7010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SC7010WhereInput
    orderBy?: SC7010OrderByWithAggregationInput | SC7010OrderByWithAggregationInput[]
    by: SC7010ScalarFieldEnum[] | SC7010ScalarFieldEnum
    having?: SC7010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SC7010CountAggregateInputType | true
    _avg?: SC7010AvgAggregateInputType
    _sum?: SC7010SumAggregateInputType
    _min?: SC7010MinAggregateInputType
    _max?: SC7010MaxAggregateInputType
  }

  export type SC7010GroupByOutputType = {
    R_E_C_N_O_: number
    C7_FILIAL: string
    C7_NUM: string
    C7_ITEM: string
    C7_PRODUTO: string
    C7_EMISSAO: string | null
    C7_OBS: string | null
    C7_USER: string | null
    D_E_L_E_T_: string | null
    _count: SC7010CountAggregateOutputType | null
    _avg: SC7010AvgAggregateOutputType | null
    _sum: SC7010SumAggregateOutputType | null
    _min: SC7010MinAggregateOutputType | null
    _max: SC7010MaxAggregateOutputType | null
  }

  type GetSC7010GroupByPayload<T extends SC7010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SC7010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SC7010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SC7010GroupByOutputType[P]>
            : GetScalarType<T[P], SC7010GroupByOutputType[P]>
        }
      >
    >


  export type SC7010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    C7_FILIAL?: boolean
    C7_NUM?: boolean
    C7_ITEM?: boolean
    C7_PRODUTO?: boolean
    C7_EMISSAO?: boolean
    C7_OBS?: boolean
    C7_USER?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["sC7010"]>



  export type SC7010SelectScalar = {
    R_E_C_N_O_?: boolean
    C7_FILIAL?: boolean
    C7_NUM?: boolean
    C7_ITEM?: boolean
    C7_PRODUTO?: boolean
    C7_EMISSAO?: boolean
    C7_OBS?: boolean
    C7_USER?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SC7010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "C7_FILIAL" | "C7_NUM" | "C7_ITEM" | "C7_PRODUTO" | "C7_EMISSAO" | "C7_OBS" | "C7_USER" | "D_E_L_E_T_", ExtArgs["result"]["sC7010"]>

  export type $SC7010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SC7010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      C7_FILIAL: string
      C7_NUM: string
      C7_ITEM: string
      C7_PRODUTO: string
      C7_EMISSAO: string | null
      C7_OBS: string | null
      C7_USER: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sC7010"]>
    composites: {}
  }

  type SC7010GetPayload<S extends boolean | null | undefined | SC7010DefaultArgs> = $Result.GetResult<Prisma.$SC7010Payload, S>

  type SC7010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SC7010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SC7010CountAggregateInputType | true
    }

  export interface SC7010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SC7010'], meta: { name: 'SC7010' } }
    /**
     * Find zero or one SC7010 that matches the filter.
     * @param {SC7010FindUniqueArgs} args - Arguments to find a SC7010
     * @example
     * // Get one SC7010
     * const sC7010 = await prisma.sC7010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SC7010FindUniqueArgs>(args: SelectSubset<T, SC7010FindUniqueArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SC7010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SC7010FindUniqueOrThrowArgs} args - Arguments to find a SC7010
     * @example
     * // Get one SC7010
     * const sC7010 = await prisma.sC7010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SC7010FindUniqueOrThrowArgs>(args: SelectSubset<T, SC7010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SC7010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010FindFirstArgs} args - Arguments to find a SC7010
     * @example
     * // Get one SC7010
     * const sC7010 = await prisma.sC7010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SC7010FindFirstArgs>(args?: SelectSubset<T, SC7010FindFirstArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SC7010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010FindFirstOrThrowArgs} args - Arguments to find a SC7010
     * @example
     * // Get one SC7010
     * const sC7010 = await prisma.sC7010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SC7010FindFirstOrThrowArgs>(args?: SelectSubset<T, SC7010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SC7010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SC7010s
     * const sC7010s = await prisma.sC7010.findMany()
     * 
     * // Get first 10 SC7010s
     * const sC7010s = await prisma.sC7010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sC7010WithR_E_C_N_O_Only = await prisma.sC7010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SC7010FindManyArgs>(args?: SelectSubset<T, SC7010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SC7010.
     * @param {SC7010CreateArgs} args - Arguments to create a SC7010.
     * @example
     * // Create one SC7010
     * const SC7010 = await prisma.sC7010.create({
     *   data: {
     *     // ... data to create a SC7010
     *   }
     * })
     * 
     */
    create<T extends SC7010CreateArgs>(args: SelectSubset<T, SC7010CreateArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SC7010s.
     * @param {SC7010CreateManyArgs} args - Arguments to create many SC7010s.
     * @example
     * // Create many SC7010s
     * const sC7010 = await prisma.sC7010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SC7010CreateManyArgs>(args?: SelectSubset<T, SC7010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SC7010.
     * @param {SC7010DeleteArgs} args - Arguments to delete one SC7010.
     * @example
     * // Delete one SC7010
     * const SC7010 = await prisma.sC7010.delete({
     *   where: {
     *     // ... filter to delete one SC7010
     *   }
     * })
     * 
     */
    delete<T extends SC7010DeleteArgs>(args: SelectSubset<T, SC7010DeleteArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SC7010.
     * @param {SC7010UpdateArgs} args - Arguments to update one SC7010.
     * @example
     * // Update one SC7010
     * const sC7010 = await prisma.sC7010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SC7010UpdateArgs>(args: SelectSubset<T, SC7010UpdateArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SC7010s.
     * @param {SC7010DeleteManyArgs} args - Arguments to filter SC7010s to delete.
     * @example
     * // Delete a few SC7010s
     * const { count } = await prisma.sC7010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SC7010DeleteManyArgs>(args?: SelectSubset<T, SC7010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SC7010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SC7010s
     * const sC7010 = await prisma.sC7010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SC7010UpdateManyArgs>(args: SelectSubset<T, SC7010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SC7010.
     * @param {SC7010UpsertArgs} args - Arguments to update or create a SC7010.
     * @example
     * // Update or create a SC7010
     * const sC7010 = await prisma.sC7010.upsert({
     *   create: {
     *     // ... data to create a SC7010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SC7010 we want to update
     *   }
     * })
     */
    upsert<T extends SC7010UpsertArgs>(args: SelectSubset<T, SC7010UpsertArgs<ExtArgs>>): Prisma__SC7010Client<$Result.GetResult<Prisma.$SC7010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SC7010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010CountArgs} args - Arguments to filter SC7010s to count.
     * @example
     * // Count the number of SC7010s
     * const count = await prisma.sC7010.count({
     *   where: {
     *     // ... the filter for the SC7010s we want to count
     *   }
     * })
    **/
    count<T extends SC7010CountArgs>(
      args?: Subset<T, SC7010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SC7010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SC7010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SC7010AggregateArgs>(args: Subset<T, SC7010AggregateArgs>): Prisma.PrismaPromise<GetSC7010AggregateType<T>>

    /**
     * Group by SC7010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SC7010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SC7010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SC7010GroupByArgs['orderBy'] }
        : { orderBy?: SC7010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SC7010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSC7010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SC7010 model
   */
  readonly fields: SC7010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SC7010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SC7010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SC7010 model
   */
  interface SC7010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SC7010", 'Int'>
    readonly C7_FILIAL: FieldRef<"SC7010", 'String'>
    readonly C7_NUM: FieldRef<"SC7010", 'String'>
    readonly C7_ITEM: FieldRef<"SC7010", 'String'>
    readonly C7_PRODUTO: FieldRef<"SC7010", 'String'>
    readonly C7_EMISSAO: FieldRef<"SC7010", 'String'>
    readonly C7_OBS: FieldRef<"SC7010", 'String'>
    readonly C7_USER: FieldRef<"SC7010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SC7010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SC7010 findUnique
   */
  export type SC7010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter, which SC7010 to fetch.
     */
    where: SC7010WhereUniqueInput
  }

  /**
   * SC7010 findUniqueOrThrow
   */
  export type SC7010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter, which SC7010 to fetch.
     */
    where: SC7010WhereUniqueInput
  }

  /**
   * SC7010 findFirst
   */
  export type SC7010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter, which SC7010 to fetch.
     */
    where?: SC7010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SC7010s to fetch.
     */
    orderBy?: SC7010OrderByWithRelationInput | SC7010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SC7010s.
     */
    cursor?: SC7010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SC7010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SC7010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SC7010s.
     */
    distinct?: SC7010ScalarFieldEnum | SC7010ScalarFieldEnum[]
  }

  /**
   * SC7010 findFirstOrThrow
   */
  export type SC7010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter, which SC7010 to fetch.
     */
    where?: SC7010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SC7010s to fetch.
     */
    orderBy?: SC7010OrderByWithRelationInput | SC7010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SC7010s.
     */
    cursor?: SC7010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SC7010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SC7010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SC7010s.
     */
    distinct?: SC7010ScalarFieldEnum | SC7010ScalarFieldEnum[]
  }

  /**
   * SC7010 findMany
   */
  export type SC7010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter, which SC7010s to fetch.
     */
    where?: SC7010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SC7010s to fetch.
     */
    orderBy?: SC7010OrderByWithRelationInput | SC7010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SC7010s.
     */
    cursor?: SC7010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SC7010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SC7010s.
     */
    skip?: number
    distinct?: SC7010ScalarFieldEnum | SC7010ScalarFieldEnum[]
  }

  /**
   * SC7010 create
   */
  export type SC7010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * The data needed to create a SC7010.
     */
    data: XOR<SC7010CreateInput, SC7010UncheckedCreateInput>
  }

  /**
   * SC7010 createMany
   */
  export type SC7010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SC7010s.
     */
    data: SC7010CreateManyInput | SC7010CreateManyInput[]
  }

  /**
   * SC7010 update
   */
  export type SC7010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * The data needed to update a SC7010.
     */
    data: XOR<SC7010UpdateInput, SC7010UncheckedUpdateInput>
    /**
     * Choose, which SC7010 to update.
     */
    where: SC7010WhereUniqueInput
  }

  /**
   * SC7010 updateMany
   */
  export type SC7010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SC7010s.
     */
    data: XOR<SC7010UpdateManyMutationInput, SC7010UncheckedUpdateManyInput>
    /**
     * Filter which SC7010s to update
     */
    where?: SC7010WhereInput
    /**
     * Limit how many SC7010s to update.
     */
    limit?: number
  }

  /**
   * SC7010 upsert
   */
  export type SC7010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * The filter to search for the SC7010 to update in case it exists.
     */
    where: SC7010WhereUniqueInput
    /**
     * In case the SC7010 found by the `where` argument doesn't exist, create a new SC7010 with this data.
     */
    create: XOR<SC7010CreateInput, SC7010UncheckedCreateInput>
    /**
     * In case the SC7010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SC7010UpdateInput, SC7010UncheckedUpdateInput>
  }

  /**
   * SC7010 delete
   */
  export type SC7010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
    /**
     * Filter which SC7010 to delete.
     */
    where: SC7010WhereUniqueInput
  }

  /**
   * SC7010 deleteMany
   */
  export type SC7010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SC7010s to delete
     */
    where?: SC7010WhereInput
    /**
     * Limit how many SC7010s to delete.
     */
    limit?: number
  }

  /**
   * SC7010 without action
   */
  export type SC7010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SC7010
     */
    select?: SC7010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SC7010
     */
    omit?: SC7010Omit<ExtArgs> | null
  }


  /**
   * Model SE2010
   */

  export type AggregateSE2010 = {
    _count: SE2010CountAggregateOutputType | null
    _avg: SE2010AvgAggregateOutputType | null
    _sum: SE2010SumAggregateOutputType | null
    _min: SE2010MinAggregateOutputType | null
    _max: SE2010MaxAggregateOutputType | null
  }

  export type SE2010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
    E2_VALOR: number | null
  }

  export type SE2010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
    E2_VALOR: number | null
  }

  export type SE2010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    E2_FILIAL: string | null
    E2_NUM: string | null
    E2_PREFIXO: string | null
    E2_FORNECE: string | null
    E2_LOJA: string | null
    E2_PARCELA: string | null
    E2_VENCTO: string | null
    E2_BAIXA: string | null
    E2_VALOR: number | null
    E2_HIST: string | null
    D_E_L_E_T_: string | null
  }

  export type SE2010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    E2_FILIAL: string | null
    E2_NUM: string | null
    E2_PREFIXO: string | null
    E2_FORNECE: string | null
    E2_LOJA: string | null
    E2_PARCELA: string | null
    E2_VENCTO: string | null
    E2_BAIXA: string | null
    E2_VALOR: number | null
    E2_HIST: string | null
    D_E_L_E_T_: string | null
  }

  export type SE2010CountAggregateOutputType = {
    R_E_C_N_O_: number
    E2_FILIAL: number
    E2_NUM: number
    E2_PREFIXO: number
    E2_FORNECE: number
    E2_LOJA: number
    E2_PARCELA: number
    E2_VENCTO: number
    E2_BAIXA: number
    E2_VALOR: number
    E2_HIST: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SE2010AvgAggregateInputType = {
    R_E_C_N_O_?: true
    E2_VALOR?: true
  }

  export type SE2010SumAggregateInputType = {
    R_E_C_N_O_?: true
    E2_VALOR?: true
  }

  export type SE2010MinAggregateInputType = {
    R_E_C_N_O_?: true
    E2_FILIAL?: true
    E2_NUM?: true
    E2_PREFIXO?: true
    E2_FORNECE?: true
    E2_LOJA?: true
    E2_PARCELA?: true
    E2_VENCTO?: true
    E2_BAIXA?: true
    E2_VALOR?: true
    E2_HIST?: true
    D_E_L_E_T_?: true
  }

  export type SE2010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    E2_FILIAL?: true
    E2_NUM?: true
    E2_PREFIXO?: true
    E2_FORNECE?: true
    E2_LOJA?: true
    E2_PARCELA?: true
    E2_VENCTO?: true
    E2_BAIXA?: true
    E2_VALOR?: true
    E2_HIST?: true
    D_E_L_E_T_?: true
  }

  export type SE2010CountAggregateInputType = {
    R_E_C_N_O_?: true
    E2_FILIAL?: true
    E2_NUM?: true
    E2_PREFIXO?: true
    E2_FORNECE?: true
    E2_LOJA?: true
    E2_PARCELA?: true
    E2_VENCTO?: true
    E2_BAIXA?: true
    E2_VALOR?: true
    E2_HIST?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SE2010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SE2010 to aggregate.
     */
    where?: SE2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SE2010s to fetch.
     */
    orderBy?: SE2010OrderByWithRelationInput | SE2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SE2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SE2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SE2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SE2010s
    **/
    _count?: true | SE2010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SE2010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SE2010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SE2010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SE2010MaxAggregateInputType
  }

  export type GetSE2010AggregateType<T extends SE2010AggregateArgs> = {
        [P in keyof T & keyof AggregateSE2010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSE2010[P]>
      : GetScalarType<T[P], AggregateSE2010[P]>
  }




  export type SE2010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SE2010WhereInput
    orderBy?: SE2010OrderByWithAggregationInput | SE2010OrderByWithAggregationInput[]
    by: SE2010ScalarFieldEnum[] | SE2010ScalarFieldEnum
    having?: SE2010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SE2010CountAggregateInputType | true
    _avg?: SE2010AvgAggregateInputType
    _sum?: SE2010SumAggregateInputType
    _min?: SE2010MinAggregateInputType
    _max?: SE2010MaxAggregateInputType
  }

  export type SE2010GroupByOutputType = {
    R_E_C_N_O_: number
    E2_FILIAL: string
    E2_NUM: string
    E2_PREFIXO: string
    E2_FORNECE: string
    E2_LOJA: string
    E2_PARCELA: string | null
    E2_VENCTO: string | null
    E2_BAIXA: string | null
    E2_VALOR: number | null
    E2_HIST: string | null
    D_E_L_E_T_: string | null
    _count: SE2010CountAggregateOutputType | null
    _avg: SE2010AvgAggregateOutputType | null
    _sum: SE2010SumAggregateOutputType | null
    _min: SE2010MinAggregateOutputType | null
    _max: SE2010MaxAggregateOutputType | null
  }

  type GetSE2010GroupByPayload<T extends SE2010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SE2010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SE2010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SE2010GroupByOutputType[P]>
            : GetScalarType<T[P], SE2010GroupByOutputType[P]>
        }
      >
    >


  export type SE2010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    E2_FILIAL?: boolean
    E2_NUM?: boolean
    E2_PREFIXO?: boolean
    E2_FORNECE?: boolean
    E2_LOJA?: boolean
    E2_PARCELA?: boolean
    E2_VENCTO?: boolean
    E2_BAIXA?: boolean
    E2_VALOR?: boolean
    E2_HIST?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["sE2010"]>



  export type SE2010SelectScalar = {
    R_E_C_N_O_?: boolean
    E2_FILIAL?: boolean
    E2_NUM?: boolean
    E2_PREFIXO?: boolean
    E2_FORNECE?: boolean
    E2_LOJA?: boolean
    E2_PARCELA?: boolean
    E2_VENCTO?: boolean
    E2_BAIXA?: boolean
    E2_VALOR?: boolean
    E2_HIST?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SE2010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "E2_FILIAL" | "E2_NUM" | "E2_PREFIXO" | "E2_FORNECE" | "E2_LOJA" | "E2_PARCELA" | "E2_VENCTO" | "E2_BAIXA" | "E2_VALOR" | "E2_HIST" | "D_E_L_E_T_", ExtArgs["result"]["sE2010"]>

  export type $SE2010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SE2010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      E2_FILIAL: string
      E2_NUM: string
      E2_PREFIXO: string
      E2_FORNECE: string
      E2_LOJA: string
      E2_PARCELA: string | null
      E2_VENCTO: string | null
      E2_BAIXA: string | null
      E2_VALOR: number | null
      E2_HIST: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sE2010"]>
    composites: {}
  }

  type SE2010GetPayload<S extends boolean | null | undefined | SE2010DefaultArgs> = $Result.GetResult<Prisma.$SE2010Payload, S>

  type SE2010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SE2010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SE2010CountAggregateInputType | true
    }

  export interface SE2010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SE2010'], meta: { name: 'SE2010' } }
    /**
     * Find zero or one SE2010 that matches the filter.
     * @param {SE2010FindUniqueArgs} args - Arguments to find a SE2010
     * @example
     * // Get one SE2010
     * const sE2010 = await prisma.sE2010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SE2010FindUniqueArgs>(args: SelectSubset<T, SE2010FindUniqueArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SE2010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SE2010FindUniqueOrThrowArgs} args - Arguments to find a SE2010
     * @example
     * // Get one SE2010
     * const sE2010 = await prisma.sE2010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SE2010FindUniqueOrThrowArgs>(args: SelectSubset<T, SE2010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SE2010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010FindFirstArgs} args - Arguments to find a SE2010
     * @example
     * // Get one SE2010
     * const sE2010 = await prisma.sE2010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SE2010FindFirstArgs>(args?: SelectSubset<T, SE2010FindFirstArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SE2010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010FindFirstOrThrowArgs} args - Arguments to find a SE2010
     * @example
     * // Get one SE2010
     * const sE2010 = await prisma.sE2010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SE2010FindFirstOrThrowArgs>(args?: SelectSubset<T, SE2010FindFirstOrThrowArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SE2010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SE2010s
     * const sE2010s = await prisma.sE2010.findMany()
     * 
     * // Get first 10 SE2010s
     * const sE2010s = await prisma.sE2010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sE2010WithR_E_C_N_O_Only = await prisma.sE2010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SE2010FindManyArgs>(args?: SelectSubset<T, SE2010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SE2010.
     * @param {SE2010CreateArgs} args - Arguments to create a SE2010.
     * @example
     * // Create one SE2010
     * const SE2010 = await prisma.sE2010.create({
     *   data: {
     *     // ... data to create a SE2010
     *   }
     * })
     * 
     */
    create<T extends SE2010CreateArgs>(args: SelectSubset<T, SE2010CreateArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SE2010s.
     * @param {SE2010CreateManyArgs} args - Arguments to create many SE2010s.
     * @example
     * // Create many SE2010s
     * const sE2010 = await prisma.sE2010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SE2010CreateManyArgs>(args?: SelectSubset<T, SE2010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SE2010.
     * @param {SE2010DeleteArgs} args - Arguments to delete one SE2010.
     * @example
     * // Delete one SE2010
     * const SE2010 = await prisma.sE2010.delete({
     *   where: {
     *     // ... filter to delete one SE2010
     *   }
     * })
     * 
     */
    delete<T extends SE2010DeleteArgs>(args: SelectSubset<T, SE2010DeleteArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SE2010.
     * @param {SE2010UpdateArgs} args - Arguments to update one SE2010.
     * @example
     * // Update one SE2010
     * const sE2010 = await prisma.sE2010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SE2010UpdateArgs>(args: SelectSubset<T, SE2010UpdateArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SE2010s.
     * @param {SE2010DeleteManyArgs} args - Arguments to filter SE2010s to delete.
     * @example
     * // Delete a few SE2010s
     * const { count } = await prisma.sE2010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SE2010DeleteManyArgs>(args?: SelectSubset<T, SE2010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SE2010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SE2010s
     * const sE2010 = await prisma.sE2010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SE2010UpdateManyArgs>(args: SelectSubset<T, SE2010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SE2010.
     * @param {SE2010UpsertArgs} args - Arguments to update or create a SE2010.
     * @example
     * // Update or create a SE2010
     * const sE2010 = await prisma.sE2010.upsert({
     *   create: {
     *     // ... data to create a SE2010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SE2010 we want to update
     *   }
     * })
     */
    upsert<T extends SE2010UpsertArgs>(args: SelectSubset<T, SE2010UpsertArgs<ExtArgs>>): Prisma__SE2010Client<$Result.GetResult<Prisma.$SE2010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SE2010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010CountArgs} args - Arguments to filter SE2010s to count.
     * @example
     * // Count the number of SE2010s
     * const count = await prisma.sE2010.count({
     *   where: {
     *     // ... the filter for the SE2010s we want to count
     *   }
     * })
    **/
    count<T extends SE2010CountArgs>(
      args?: Subset<T, SE2010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SE2010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SE2010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SE2010AggregateArgs>(args: Subset<T, SE2010AggregateArgs>): Prisma.PrismaPromise<GetSE2010AggregateType<T>>

    /**
     * Group by SE2010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SE2010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SE2010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SE2010GroupByArgs['orderBy'] }
        : { orderBy?: SE2010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SE2010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSE2010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SE2010 model
   */
  readonly fields: SE2010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SE2010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SE2010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SE2010 model
   */
  interface SE2010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SE2010", 'Int'>
    readonly E2_FILIAL: FieldRef<"SE2010", 'String'>
    readonly E2_NUM: FieldRef<"SE2010", 'String'>
    readonly E2_PREFIXO: FieldRef<"SE2010", 'String'>
    readonly E2_FORNECE: FieldRef<"SE2010", 'String'>
    readonly E2_LOJA: FieldRef<"SE2010", 'String'>
    readonly E2_PARCELA: FieldRef<"SE2010", 'String'>
    readonly E2_VENCTO: FieldRef<"SE2010", 'String'>
    readonly E2_BAIXA: FieldRef<"SE2010", 'String'>
    readonly E2_VALOR: FieldRef<"SE2010", 'Float'>
    readonly E2_HIST: FieldRef<"SE2010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SE2010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SE2010 findUnique
   */
  export type SE2010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter, which SE2010 to fetch.
     */
    where: SE2010WhereUniqueInput
  }

  /**
   * SE2010 findUniqueOrThrow
   */
  export type SE2010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter, which SE2010 to fetch.
     */
    where: SE2010WhereUniqueInput
  }

  /**
   * SE2010 findFirst
   */
  export type SE2010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter, which SE2010 to fetch.
     */
    where?: SE2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SE2010s to fetch.
     */
    orderBy?: SE2010OrderByWithRelationInput | SE2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SE2010s.
     */
    cursor?: SE2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SE2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SE2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SE2010s.
     */
    distinct?: SE2010ScalarFieldEnum | SE2010ScalarFieldEnum[]
  }

  /**
   * SE2010 findFirstOrThrow
   */
  export type SE2010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter, which SE2010 to fetch.
     */
    where?: SE2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SE2010s to fetch.
     */
    orderBy?: SE2010OrderByWithRelationInput | SE2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SE2010s.
     */
    cursor?: SE2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SE2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SE2010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SE2010s.
     */
    distinct?: SE2010ScalarFieldEnum | SE2010ScalarFieldEnum[]
  }

  /**
   * SE2010 findMany
   */
  export type SE2010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter, which SE2010s to fetch.
     */
    where?: SE2010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SE2010s to fetch.
     */
    orderBy?: SE2010OrderByWithRelationInput | SE2010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SE2010s.
     */
    cursor?: SE2010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SE2010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SE2010s.
     */
    skip?: number
    distinct?: SE2010ScalarFieldEnum | SE2010ScalarFieldEnum[]
  }

  /**
   * SE2010 create
   */
  export type SE2010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * The data needed to create a SE2010.
     */
    data: XOR<SE2010CreateInput, SE2010UncheckedCreateInput>
  }

  /**
   * SE2010 createMany
   */
  export type SE2010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SE2010s.
     */
    data: SE2010CreateManyInput | SE2010CreateManyInput[]
  }

  /**
   * SE2010 update
   */
  export type SE2010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * The data needed to update a SE2010.
     */
    data: XOR<SE2010UpdateInput, SE2010UncheckedUpdateInput>
    /**
     * Choose, which SE2010 to update.
     */
    where: SE2010WhereUniqueInput
  }

  /**
   * SE2010 updateMany
   */
  export type SE2010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SE2010s.
     */
    data: XOR<SE2010UpdateManyMutationInput, SE2010UncheckedUpdateManyInput>
    /**
     * Filter which SE2010s to update
     */
    where?: SE2010WhereInput
    /**
     * Limit how many SE2010s to update.
     */
    limit?: number
  }

  /**
   * SE2010 upsert
   */
  export type SE2010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * The filter to search for the SE2010 to update in case it exists.
     */
    where: SE2010WhereUniqueInput
    /**
     * In case the SE2010 found by the `where` argument doesn't exist, create a new SE2010 with this data.
     */
    create: XOR<SE2010CreateInput, SE2010UncheckedCreateInput>
    /**
     * In case the SE2010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SE2010UpdateInput, SE2010UncheckedUpdateInput>
  }

  /**
   * SE2010 delete
   */
  export type SE2010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
    /**
     * Filter which SE2010 to delete.
     */
    where: SE2010WhereUniqueInput
  }

  /**
   * SE2010 deleteMany
   */
  export type SE2010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SE2010s to delete
     */
    where?: SE2010WhereInput
    /**
     * Limit how many SE2010s to delete.
     */
    limit?: number
  }

  /**
   * SE2010 without action
   */
  export type SE2010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SE2010
     */
    select?: SE2010Select<ExtArgs> | null
    /**
     * Omit specific fields from the SE2010
     */
    omit?: SE2010Omit<ExtArgs> | null
  }


  /**
   * Model Z05010
   */

  export type AggregateZ05010 = {
    _count: Z05010CountAggregateOutputType | null
    _avg: Z05010AvgAggregateOutputType | null
    _sum: Z05010SumAggregateOutputType | null
    _min: Z05010MinAggregateOutputType | null
    _max: Z05010MaxAggregateOutputType | null
  }

  export type Z05010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z05010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z05010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z05_FILIAL: string | null
    Z05_CHAVE: string | null
    Z05_ROTINA: string | null
    Z05_CAMPO: string | null
    Z05_VALATU: string | null
    Z05_DATA: string | null
    Z05_HORA: string | null
    Z05_USER: string | null
    D_E_L_E_T_: string | null
  }

  export type Z05010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z05_FILIAL: string | null
    Z05_CHAVE: string | null
    Z05_ROTINA: string | null
    Z05_CAMPO: string | null
    Z05_VALATU: string | null
    Z05_DATA: string | null
    Z05_HORA: string | null
    Z05_USER: string | null
    D_E_L_E_T_: string | null
  }

  export type Z05010CountAggregateOutputType = {
    R_E_C_N_O_: number
    Z05_FILIAL: number
    Z05_CHAVE: number
    Z05_ROTINA: number
    Z05_CAMPO: number
    Z05_VALATU: number
    Z05_DATA: number
    Z05_HORA: number
    Z05_USER: number
    D_E_L_E_T_: number
    _all: number
  }


  export type Z05010AvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z05010SumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z05010MinAggregateInputType = {
    R_E_C_N_O_?: true
    Z05_FILIAL?: true
    Z05_CHAVE?: true
    Z05_ROTINA?: true
    Z05_CAMPO?: true
    Z05_VALATU?: true
    Z05_DATA?: true
    Z05_HORA?: true
    Z05_USER?: true
    D_E_L_E_T_?: true
  }

  export type Z05010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    Z05_FILIAL?: true
    Z05_CHAVE?: true
    Z05_ROTINA?: true
    Z05_CAMPO?: true
    Z05_VALATU?: true
    Z05_DATA?: true
    Z05_HORA?: true
    Z05_USER?: true
    D_E_L_E_T_?: true
  }

  export type Z05010CountAggregateInputType = {
    R_E_C_N_O_?: true
    Z05_FILIAL?: true
    Z05_CHAVE?: true
    Z05_ROTINA?: true
    Z05_CAMPO?: true
    Z05_VALATU?: true
    Z05_DATA?: true
    Z05_HORA?: true
    Z05_USER?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type Z05010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z05010 to aggregate.
     */
    where?: Z05010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z05010s to fetch.
     */
    orderBy?: Z05010OrderByWithRelationInput | Z05010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Z05010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z05010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z05010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Z05010s
    **/
    _count?: true | Z05010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Z05010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Z05010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Z05010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Z05010MaxAggregateInputType
  }

  export type GetZ05010AggregateType<T extends Z05010AggregateArgs> = {
        [P in keyof T & keyof AggregateZ05010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZ05010[P]>
      : GetScalarType<T[P], AggregateZ05010[P]>
  }




  export type Z05010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Z05010WhereInput
    orderBy?: Z05010OrderByWithAggregationInput | Z05010OrderByWithAggregationInput[]
    by: Z05010ScalarFieldEnum[] | Z05010ScalarFieldEnum
    having?: Z05010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Z05010CountAggregateInputType | true
    _avg?: Z05010AvgAggregateInputType
    _sum?: Z05010SumAggregateInputType
    _min?: Z05010MinAggregateInputType
    _max?: Z05010MaxAggregateInputType
  }

  export type Z05010GroupByOutputType = {
    R_E_C_N_O_: number
    Z05_FILIAL: string
    Z05_CHAVE: string
    Z05_ROTINA: string | null
    Z05_CAMPO: string | null
    Z05_VALATU: string | null
    Z05_DATA: string | null
    Z05_HORA: string | null
    Z05_USER: string | null
    D_E_L_E_T_: string | null
    _count: Z05010CountAggregateOutputType | null
    _avg: Z05010AvgAggregateOutputType | null
    _sum: Z05010SumAggregateOutputType | null
    _min: Z05010MinAggregateOutputType | null
    _max: Z05010MaxAggregateOutputType | null
  }

  type GetZ05010GroupByPayload<T extends Z05010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Z05010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Z05010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Z05010GroupByOutputType[P]>
            : GetScalarType<T[P], Z05010GroupByOutputType[P]>
        }
      >
    >


  export type Z05010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    Z05_FILIAL?: boolean
    Z05_CHAVE?: boolean
    Z05_ROTINA?: boolean
    Z05_CAMPO?: boolean
    Z05_VALATU?: boolean
    Z05_DATA?: boolean
    Z05_HORA?: boolean
    Z05_USER?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["z05010"]>



  export type Z05010SelectScalar = {
    R_E_C_N_O_?: boolean
    Z05_FILIAL?: boolean
    Z05_CHAVE?: boolean
    Z05_ROTINA?: boolean
    Z05_CAMPO?: boolean
    Z05_VALATU?: boolean
    Z05_DATA?: boolean
    Z05_HORA?: boolean
    Z05_USER?: boolean
    D_E_L_E_T_?: boolean
  }

  export type Z05010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "Z05_FILIAL" | "Z05_CHAVE" | "Z05_ROTINA" | "Z05_CAMPO" | "Z05_VALATU" | "Z05_DATA" | "Z05_HORA" | "Z05_USER" | "D_E_L_E_T_", ExtArgs["result"]["z05010"]>

  export type $Z05010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Z05010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      Z05_FILIAL: string
      Z05_CHAVE: string
      Z05_ROTINA: string | null
      Z05_CAMPO: string | null
      Z05_VALATU: string | null
      Z05_DATA: string | null
      Z05_HORA: string | null
      Z05_USER: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["z05010"]>
    composites: {}
  }

  type Z05010GetPayload<S extends boolean | null | undefined | Z05010DefaultArgs> = $Result.GetResult<Prisma.$Z05010Payload, S>

  type Z05010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Z05010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Z05010CountAggregateInputType | true
    }

  export interface Z05010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Z05010'], meta: { name: 'Z05010' } }
    /**
     * Find zero or one Z05010 that matches the filter.
     * @param {Z05010FindUniqueArgs} args - Arguments to find a Z05010
     * @example
     * // Get one Z05010
     * const z05010 = await prisma.z05010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Z05010FindUniqueArgs>(args: SelectSubset<T, Z05010FindUniqueArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Z05010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Z05010FindUniqueOrThrowArgs} args - Arguments to find a Z05010
     * @example
     * // Get one Z05010
     * const z05010 = await prisma.z05010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Z05010FindUniqueOrThrowArgs>(args: SelectSubset<T, Z05010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z05010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010FindFirstArgs} args - Arguments to find a Z05010
     * @example
     * // Get one Z05010
     * const z05010 = await prisma.z05010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Z05010FindFirstArgs>(args?: SelectSubset<T, Z05010FindFirstArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z05010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010FindFirstOrThrowArgs} args - Arguments to find a Z05010
     * @example
     * // Get one Z05010
     * const z05010 = await prisma.z05010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Z05010FindFirstOrThrowArgs>(args?: SelectSubset<T, Z05010FindFirstOrThrowArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Z05010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Z05010s
     * const z05010s = await prisma.z05010.findMany()
     * 
     * // Get first 10 Z05010s
     * const z05010s = await prisma.z05010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const z05010WithR_E_C_N_O_Only = await prisma.z05010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends Z05010FindManyArgs>(args?: SelectSubset<T, Z05010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Z05010.
     * @param {Z05010CreateArgs} args - Arguments to create a Z05010.
     * @example
     * // Create one Z05010
     * const Z05010 = await prisma.z05010.create({
     *   data: {
     *     // ... data to create a Z05010
     *   }
     * })
     * 
     */
    create<T extends Z05010CreateArgs>(args: SelectSubset<T, Z05010CreateArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Z05010s.
     * @param {Z05010CreateManyArgs} args - Arguments to create many Z05010s.
     * @example
     * // Create many Z05010s
     * const z05010 = await prisma.z05010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Z05010CreateManyArgs>(args?: SelectSubset<T, Z05010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Z05010.
     * @param {Z05010DeleteArgs} args - Arguments to delete one Z05010.
     * @example
     * // Delete one Z05010
     * const Z05010 = await prisma.z05010.delete({
     *   where: {
     *     // ... filter to delete one Z05010
     *   }
     * })
     * 
     */
    delete<T extends Z05010DeleteArgs>(args: SelectSubset<T, Z05010DeleteArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Z05010.
     * @param {Z05010UpdateArgs} args - Arguments to update one Z05010.
     * @example
     * // Update one Z05010
     * const z05010 = await prisma.z05010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Z05010UpdateArgs>(args: SelectSubset<T, Z05010UpdateArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Z05010s.
     * @param {Z05010DeleteManyArgs} args - Arguments to filter Z05010s to delete.
     * @example
     * // Delete a few Z05010s
     * const { count } = await prisma.z05010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Z05010DeleteManyArgs>(args?: SelectSubset<T, Z05010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Z05010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Z05010s
     * const z05010 = await prisma.z05010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Z05010UpdateManyArgs>(args: SelectSubset<T, Z05010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Z05010.
     * @param {Z05010UpsertArgs} args - Arguments to update or create a Z05010.
     * @example
     * // Update or create a Z05010
     * const z05010 = await prisma.z05010.upsert({
     *   create: {
     *     // ... data to create a Z05010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Z05010 we want to update
     *   }
     * })
     */
    upsert<T extends Z05010UpsertArgs>(args: SelectSubset<T, Z05010UpsertArgs<ExtArgs>>): Prisma__Z05010Client<$Result.GetResult<Prisma.$Z05010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Z05010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010CountArgs} args - Arguments to filter Z05010s to count.
     * @example
     * // Count the number of Z05010s
     * const count = await prisma.z05010.count({
     *   where: {
     *     // ... the filter for the Z05010s we want to count
     *   }
     * })
    **/
    count<T extends Z05010CountArgs>(
      args?: Subset<T, Z05010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Z05010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Z05010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Z05010AggregateArgs>(args: Subset<T, Z05010AggregateArgs>): Prisma.PrismaPromise<GetZ05010AggregateType<T>>

    /**
     * Group by Z05010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z05010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Z05010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Z05010GroupByArgs['orderBy'] }
        : { orderBy?: Z05010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Z05010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZ05010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Z05010 model
   */
  readonly fields: Z05010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Z05010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Z05010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Z05010 model
   */
  interface Z05010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"Z05010", 'Int'>
    readonly Z05_FILIAL: FieldRef<"Z05010", 'String'>
    readonly Z05_CHAVE: FieldRef<"Z05010", 'String'>
    readonly Z05_ROTINA: FieldRef<"Z05010", 'String'>
    readonly Z05_CAMPO: FieldRef<"Z05010", 'String'>
    readonly Z05_VALATU: FieldRef<"Z05010", 'String'>
    readonly Z05_DATA: FieldRef<"Z05010", 'String'>
    readonly Z05_HORA: FieldRef<"Z05010", 'String'>
    readonly Z05_USER: FieldRef<"Z05010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"Z05010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Z05010 findUnique
   */
  export type Z05010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter, which Z05010 to fetch.
     */
    where: Z05010WhereUniqueInput
  }

  /**
   * Z05010 findUniqueOrThrow
   */
  export type Z05010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter, which Z05010 to fetch.
     */
    where: Z05010WhereUniqueInput
  }

  /**
   * Z05010 findFirst
   */
  export type Z05010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter, which Z05010 to fetch.
     */
    where?: Z05010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z05010s to fetch.
     */
    orderBy?: Z05010OrderByWithRelationInput | Z05010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z05010s.
     */
    cursor?: Z05010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z05010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z05010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z05010s.
     */
    distinct?: Z05010ScalarFieldEnum | Z05010ScalarFieldEnum[]
  }

  /**
   * Z05010 findFirstOrThrow
   */
  export type Z05010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter, which Z05010 to fetch.
     */
    where?: Z05010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z05010s to fetch.
     */
    orderBy?: Z05010OrderByWithRelationInput | Z05010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z05010s.
     */
    cursor?: Z05010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z05010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z05010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z05010s.
     */
    distinct?: Z05010ScalarFieldEnum | Z05010ScalarFieldEnum[]
  }

  /**
   * Z05010 findMany
   */
  export type Z05010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter, which Z05010s to fetch.
     */
    where?: Z05010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z05010s to fetch.
     */
    orderBy?: Z05010OrderByWithRelationInput | Z05010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Z05010s.
     */
    cursor?: Z05010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z05010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z05010s.
     */
    skip?: number
    distinct?: Z05010ScalarFieldEnum | Z05010ScalarFieldEnum[]
  }

  /**
   * Z05010 create
   */
  export type Z05010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * The data needed to create a Z05010.
     */
    data: XOR<Z05010CreateInput, Z05010UncheckedCreateInput>
  }

  /**
   * Z05010 createMany
   */
  export type Z05010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Z05010s.
     */
    data: Z05010CreateManyInput | Z05010CreateManyInput[]
  }

  /**
   * Z05010 update
   */
  export type Z05010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * The data needed to update a Z05010.
     */
    data: XOR<Z05010UpdateInput, Z05010UncheckedUpdateInput>
    /**
     * Choose, which Z05010 to update.
     */
    where: Z05010WhereUniqueInput
  }

  /**
   * Z05010 updateMany
   */
  export type Z05010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Z05010s.
     */
    data: XOR<Z05010UpdateManyMutationInput, Z05010UncheckedUpdateManyInput>
    /**
     * Filter which Z05010s to update
     */
    where?: Z05010WhereInput
    /**
     * Limit how many Z05010s to update.
     */
    limit?: number
  }

  /**
   * Z05010 upsert
   */
  export type Z05010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * The filter to search for the Z05010 to update in case it exists.
     */
    where: Z05010WhereUniqueInput
    /**
     * In case the Z05010 found by the `where` argument doesn't exist, create a new Z05010 with this data.
     */
    create: XOR<Z05010CreateInput, Z05010UncheckedCreateInput>
    /**
     * In case the Z05010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Z05010UpdateInput, Z05010UncheckedUpdateInput>
  }

  /**
   * Z05010 delete
   */
  export type Z05010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
    /**
     * Filter which Z05010 to delete.
     */
    where: Z05010WhereUniqueInput
  }

  /**
   * Z05010 deleteMany
   */
  export type Z05010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z05010s to delete
     */
    where?: Z05010WhereInput
    /**
     * Limit how many Z05010s to delete.
     */
    limit?: number
  }

  /**
   * Z05010 without action
   */
  export type Z05010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z05010
     */
    select?: Z05010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z05010
     */
    omit?: Z05010Omit<ExtArgs> | null
  }


  /**
   * Model SYS_USR
   */

  export type AggregateSYS_USR = {
    _count: SYS_USRCountAggregateOutputType | null
    _avg: SYS_USRAvgAggregateOutputType | null
    _sum: SYS_USRSumAggregateOutputType | null
    _min: SYS_USRMinAggregateOutputType | null
    _max: SYS_USRMaxAggregateOutputType | null
  }

  export type SYS_USRAvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SYS_USRSumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type SYS_USRMinAggregateOutputType = {
    R_E_C_N_O_: number | null
    USR_ID: string | null
    USR_NOME: string | null
    USR_CODIGO: string | null
    D_E_L_E_T_: string | null
  }

  export type SYS_USRMaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    USR_ID: string | null
    USR_NOME: string | null
    USR_CODIGO: string | null
    D_E_L_E_T_: string | null
  }

  export type SYS_USRCountAggregateOutputType = {
    R_E_C_N_O_: number
    USR_ID: number
    USR_NOME: number
    USR_CODIGO: number
    D_E_L_E_T_: number
    _all: number
  }


  export type SYS_USRAvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SYS_USRSumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type SYS_USRMinAggregateInputType = {
    R_E_C_N_O_?: true
    USR_ID?: true
    USR_NOME?: true
    USR_CODIGO?: true
    D_E_L_E_T_?: true
  }

  export type SYS_USRMaxAggregateInputType = {
    R_E_C_N_O_?: true
    USR_ID?: true
    USR_NOME?: true
    USR_CODIGO?: true
    D_E_L_E_T_?: true
  }

  export type SYS_USRCountAggregateInputType = {
    R_E_C_N_O_?: true
    USR_ID?: true
    USR_NOME?: true
    USR_CODIGO?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type SYS_USRAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SYS_USR to aggregate.
     */
    where?: SYS_USRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SYS_USRS to fetch.
     */
    orderBy?: SYS_USROrderByWithRelationInput | SYS_USROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SYS_USRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SYS_USRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SYS_USRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SYS_USRS
    **/
    _count?: true | SYS_USRCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SYS_USRAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SYS_USRSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SYS_USRMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SYS_USRMaxAggregateInputType
  }

  export type GetSYS_USRAggregateType<T extends SYS_USRAggregateArgs> = {
        [P in keyof T & keyof AggregateSYS_USR]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSYS_USR[P]>
      : GetScalarType<T[P], AggregateSYS_USR[P]>
  }




  export type SYS_USRGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SYS_USRWhereInput
    orderBy?: SYS_USROrderByWithAggregationInput | SYS_USROrderByWithAggregationInput[]
    by: SYS_USRScalarFieldEnum[] | SYS_USRScalarFieldEnum
    having?: SYS_USRScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SYS_USRCountAggregateInputType | true
    _avg?: SYS_USRAvgAggregateInputType
    _sum?: SYS_USRSumAggregateInputType
    _min?: SYS_USRMinAggregateInputType
    _max?: SYS_USRMaxAggregateInputType
  }

  export type SYS_USRGroupByOutputType = {
    R_E_C_N_O_: number
    USR_ID: string
    USR_NOME: string
    USR_CODIGO: string
    D_E_L_E_T_: string | null
    _count: SYS_USRCountAggregateOutputType | null
    _avg: SYS_USRAvgAggregateOutputType | null
    _sum: SYS_USRSumAggregateOutputType | null
    _min: SYS_USRMinAggregateOutputType | null
    _max: SYS_USRMaxAggregateOutputType | null
  }

  type GetSYS_USRGroupByPayload<T extends SYS_USRGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SYS_USRGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SYS_USRGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SYS_USRGroupByOutputType[P]>
            : GetScalarType<T[P], SYS_USRGroupByOutputType[P]>
        }
      >
    >


  export type SYS_USRSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    USR_ID?: boolean
    USR_NOME?: boolean
    USR_CODIGO?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["sYS_USR"]>



  export type SYS_USRSelectScalar = {
    R_E_C_N_O_?: boolean
    USR_ID?: boolean
    USR_NOME?: boolean
    USR_CODIGO?: boolean
    D_E_L_E_T_?: boolean
  }

  export type SYS_USROmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "USR_ID" | "USR_NOME" | "USR_CODIGO" | "D_E_L_E_T_", ExtArgs["result"]["sYS_USR"]>

  export type $SYS_USRPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SYS_USR"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      USR_ID: string
      USR_NOME: string
      USR_CODIGO: string
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["sYS_USR"]>
    composites: {}
  }

  type SYS_USRGetPayload<S extends boolean | null | undefined | SYS_USRDefaultArgs> = $Result.GetResult<Prisma.$SYS_USRPayload, S>

  type SYS_USRCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SYS_USRFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SYS_USRCountAggregateInputType | true
    }

  export interface SYS_USRDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SYS_USR'], meta: { name: 'SYS_USR' } }
    /**
     * Find zero or one SYS_USR that matches the filter.
     * @param {SYS_USRFindUniqueArgs} args - Arguments to find a SYS_USR
     * @example
     * // Get one SYS_USR
     * const sYS_USR = await prisma.sYS_USR.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SYS_USRFindUniqueArgs>(args: SelectSubset<T, SYS_USRFindUniqueArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SYS_USR that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SYS_USRFindUniqueOrThrowArgs} args - Arguments to find a SYS_USR
     * @example
     * // Get one SYS_USR
     * const sYS_USR = await prisma.sYS_USR.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SYS_USRFindUniqueOrThrowArgs>(args: SelectSubset<T, SYS_USRFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SYS_USR that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRFindFirstArgs} args - Arguments to find a SYS_USR
     * @example
     * // Get one SYS_USR
     * const sYS_USR = await prisma.sYS_USR.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SYS_USRFindFirstArgs>(args?: SelectSubset<T, SYS_USRFindFirstArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SYS_USR that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRFindFirstOrThrowArgs} args - Arguments to find a SYS_USR
     * @example
     * // Get one SYS_USR
     * const sYS_USR = await prisma.sYS_USR.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SYS_USRFindFirstOrThrowArgs>(args?: SelectSubset<T, SYS_USRFindFirstOrThrowArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SYS_USRS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SYS_USRS
     * const sYS_USRS = await prisma.sYS_USR.findMany()
     * 
     * // Get first 10 SYS_USRS
     * const sYS_USRS = await prisma.sYS_USR.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const sYS_USRWithR_E_C_N_O_Only = await prisma.sYS_USR.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends SYS_USRFindManyArgs>(args?: SelectSubset<T, SYS_USRFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SYS_USR.
     * @param {SYS_USRCreateArgs} args - Arguments to create a SYS_USR.
     * @example
     * // Create one SYS_USR
     * const SYS_USR = await prisma.sYS_USR.create({
     *   data: {
     *     // ... data to create a SYS_USR
     *   }
     * })
     * 
     */
    create<T extends SYS_USRCreateArgs>(args: SelectSubset<T, SYS_USRCreateArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SYS_USRS.
     * @param {SYS_USRCreateManyArgs} args - Arguments to create many SYS_USRS.
     * @example
     * // Create many SYS_USRS
     * const sYS_USR = await prisma.sYS_USR.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SYS_USRCreateManyArgs>(args?: SelectSubset<T, SYS_USRCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SYS_USR.
     * @param {SYS_USRDeleteArgs} args - Arguments to delete one SYS_USR.
     * @example
     * // Delete one SYS_USR
     * const SYS_USR = await prisma.sYS_USR.delete({
     *   where: {
     *     // ... filter to delete one SYS_USR
     *   }
     * })
     * 
     */
    delete<T extends SYS_USRDeleteArgs>(args: SelectSubset<T, SYS_USRDeleteArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SYS_USR.
     * @param {SYS_USRUpdateArgs} args - Arguments to update one SYS_USR.
     * @example
     * // Update one SYS_USR
     * const sYS_USR = await prisma.sYS_USR.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SYS_USRUpdateArgs>(args: SelectSubset<T, SYS_USRUpdateArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SYS_USRS.
     * @param {SYS_USRDeleteManyArgs} args - Arguments to filter SYS_USRS to delete.
     * @example
     * // Delete a few SYS_USRS
     * const { count } = await prisma.sYS_USR.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SYS_USRDeleteManyArgs>(args?: SelectSubset<T, SYS_USRDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SYS_USRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SYS_USRS
     * const sYS_USR = await prisma.sYS_USR.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SYS_USRUpdateManyArgs>(args: SelectSubset<T, SYS_USRUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SYS_USR.
     * @param {SYS_USRUpsertArgs} args - Arguments to update or create a SYS_USR.
     * @example
     * // Update or create a SYS_USR
     * const sYS_USR = await prisma.sYS_USR.upsert({
     *   create: {
     *     // ... data to create a SYS_USR
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SYS_USR we want to update
     *   }
     * })
     */
    upsert<T extends SYS_USRUpsertArgs>(args: SelectSubset<T, SYS_USRUpsertArgs<ExtArgs>>): Prisma__SYS_USRClient<$Result.GetResult<Prisma.$SYS_USRPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SYS_USRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRCountArgs} args - Arguments to filter SYS_USRS to count.
     * @example
     * // Count the number of SYS_USRS
     * const count = await prisma.sYS_USR.count({
     *   where: {
     *     // ... the filter for the SYS_USRS we want to count
     *   }
     * })
    **/
    count<T extends SYS_USRCountArgs>(
      args?: Subset<T, SYS_USRCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SYS_USRCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SYS_USR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SYS_USRAggregateArgs>(args: Subset<T, SYS_USRAggregateArgs>): Prisma.PrismaPromise<GetSYS_USRAggregateType<T>>

    /**
     * Group by SYS_USR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SYS_USRGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SYS_USRGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SYS_USRGroupByArgs['orderBy'] }
        : { orderBy?: SYS_USRGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SYS_USRGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSYS_USRGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SYS_USR model
   */
  readonly fields: SYS_USRFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SYS_USR.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SYS_USRClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SYS_USR model
   */
  interface SYS_USRFieldRefs {
    readonly R_E_C_N_O_: FieldRef<"SYS_USR", 'Int'>
    readonly USR_ID: FieldRef<"SYS_USR", 'String'>
    readonly USR_NOME: FieldRef<"SYS_USR", 'String'>
    readonly USR_CODIGO: FieldRef<"SYS_USR", 'String'>
    readonly D_E_L_E_T_: FieldRef<"SYS_USR", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SYS_USR findUnique
   */
  export type SYS_USRFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter, which SYS_USR to fetch.
     */
    where: SYS_USRWhereUniqueInput
  }

  /**
   * SYS_USR findUniqueOrThrow
   */
  export type SYS_USRFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter, which SYS_USR to fetch.
     */
    where: SYS_USRWhereUniqueInput
  }

  /**
   * SYS_USR findFirst
   */
  export type SYS_USRFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter, which SYS_USR to fetch.
     */
    where?: SYS_USRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SYS_USRS to fetch.
     */
    orderBy?: SYS_USROrderByWithRelationInput | SYS_USROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SYS_USRS.
     */
    cursor?: SYS_USRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SYS_USRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SYS_USRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SYS_USRS.
     */
    distinct?: SYS_USRScalarFieldEnum | SYS_USRScalarFieldEnum[]
  }

  /**
   * SYS_USR findFirstOrThrow
   */
  export type SYS_USRFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter, which SYS_USR to fetch.
     */
    where?: SYS_USRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SYS_USRS to fetch.
     */
    orderBy?: SYS_USROrderByWithRelationInput | SYS_USROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SYS_USRS.
     */
    cursor?: SYS_USRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SYS_USRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SYS_USRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SYS_USRS.
     */
    distinct?: SYS_USRScalarFieldEnum | SYS_USRScalarFieldEnum[]
  }

  /**
   * SYS_USR findMany
   */
  export type SYS_USRFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter, which SYS_USRS to fetch.
     */
    where?: SYS_USRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SYS_USRS to fetch.
     */
    orderBy?: SYS_USROrderByWithRelationInput | SYS_USROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SYS_USRS.
     */
    cursor?: SYS_USRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SYS_USRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SYS_USRS.
     */
    skip?: number
    distinct?: SYS_USRScalarFieldEnum | SYS_USRScalarFieldEnum[]
  }

  /**
   * SYS_USR create
   */
  export type SYS_USRCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * The data needed to create a SYS_USR.
     */
    data: XOR<SYS_USRCreateInput, SYS_USRUncheckedCreateInput>
  }

  /**
   * SYS_USR createMany
   */
  export type SYS_USRCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SYS_USRS.
     */
    data: SYS_USRCreateManyInput | SYS_USRCreateManyInput[]
  }

  /**
   * SYS_USR update
   */
  export type SYS_USRUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * The data needed to update a SYS_USR.
     */
    data: XOR<SYS_USRUpdateInput, SYS_USRUncheckedUpdateInput>
    /**
     * Choose, which SYS_USR to update.
     */
    where: SYS_USRWhereUniqueInput
  }

  /**
   * SYS_USR updateMany
   */
  export type SYS_USRUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SYS_USRS.
     */
    data: XOR<SYS_USRUpdateManyMutationInput, SYS_USRUncheckedUpdateManyInput>
    /**
     * Filter which SYS_USRS to update
     */
    where?: SYS_USRWhereInput
    /**
     * Limit how many SYS_USRS to update.
     */
    limit?: number
  }

  /**
   * SYS_USR upsert
   */
  export type SYS_USRUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * The filter to search for the SYS_USR to update in case it exists.
     */
    where: SYS_USRWhereUniqueInput
    /**
     * In case the SYS_USR found by the `where` argument doesn't exist, create a new SYS_USR with this data.
     */
    create: XOR<SYS_USRCreateInput, SYS_USRUncheckedCreateInput>
    /**
     * In case the SYS_USR was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SYS_USRUpdateInput, SYS_USRUncheckedUpdateInput>
  }

  /**
   * SYS_USR delete
   */
  export type SYS_USRDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
    /**
     * Filter which SYS_USR to delete.
     */
    where: SYS_USRWhereUniqueInput
  }

  /**
   * SYS_USR deleteMany
   */
  export type SYS_USRDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SYS_USRS to delete
     */
    where?: SYS_USRWhereInput
    /**
     * Limit how many SYS_USRS to delete.
     */
    limit?: number
  }

  /**
   * SYS_USR without action
   */
  export type SYS_USRDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SYS_USR
     */
    select?: SYS_USRSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SYS_USR
     */
    omit?: SYS_USROmit<ExtArgs> | null
  }


  /**
   * Model Z10010
   */

  export type AggregateZ10010 = {
    _count: Z10010CountAggregateOutputType | null
    _avg: Z10010AvgAggregateOutputType | null
    _sum: Z10010SumAggregateOutputType | null
    _min: Z10010MinAggregateOutputType | null
    _max: Z10010MaxAggregateOutputType | null
  }

  export type Z10010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z10010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z10010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z10_TIPO: string | null
    Z10_CHAVE: string | null
    Z10_VENCTO: string | null
    D_E_L_E_T_: string | null
  }

  export type Z10010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z10_TIPO: string | null
    Z10_CHAVE: string | null
    Z10_VENCTO: string | null
    D_E_L_E_T_: string | null
  }

  export type Z10010CountAggregateOutputType = {
    R_E_C_N_O_: number
    Z10_TIPO: number
    Z10_CHAVE: number
    Z10_VENCTO: number
    D_E_L_E_T_: number
    _all: number
  }


  export type Z10010AvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z10010SumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z10010MinAggregateInputType = {
    R_E_C_N_O_?: true
    Z10_TIPO?: true
    Z10_CHAVE?: true
    Z10_VENCTO?: true
    D_E_L_E_T_?: true
  }

  export type Z10010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    Z10_TIPO?: true
    Z10_CHAVE?: true
    Z10_VENCTO?: true
    D_E_L_E_T_?: true
  }

  export type Z10010CountAggregateInputType = {
    R_E_C_N_O_?: true
    Z10_TIPO?: true
    Z10_CHAVE?: true
    Z10_VENCTO?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type Z10010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z10010 to aggregate.
     */
    where?: Z10010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z10010s to fetch.
     */
    orderBy?: Z10010OrderByWithRelationInput | Z10010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Z10010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z10010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z10010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Z10010s
    **/
    _count?: true | Z10010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Z10010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Z10010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Z10010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Z10010MaxAggregateInputType
  }

  export type GetZ10010AggregateType<T extends Z10010AggregateArgs> = {
        [P in keyof T & keyof AggregateZ10010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZ10010[P]>
      : GetScalarType<T[P], AggregateZ10010[P]>
  }




  export type Z10010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Z10010WhereInput
    orderBy?: Z10010OrderByWithAggregationInput | Z10010OrderByWithAggregationInput[]
    by: Z10010ScalarFieldEnum[] | Z10010ScalarFieldEnum
    having?: Z10010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Z10010CountAggregateInputType | true
    _avg?: Z10010AvgAggregateInputType
    _sum?: Z10010SumAggregateInputType
    _min?: Z10010MinAggregateInputType
    _max?: Z10010MaxAggregateInputType
  }

  export type Z10010GroupByOutputType = {
    R_E_C_N_O_: number
    Z10_TIPO: string
    Z10_CHAVE: string
    Z10_VENCTO: string | null
    D_E_L_E_T_: string | null
    _count: Z10010CountAggregateOutputType | null
    _avg: Z10010AvgAggregateOutputType | null
    _sum: Z10010SumAggregateOutputType | null
    _min: Z10010MinAggregateOutputType | null
    _max: Z10010MaxAggregateOutputType | null
  }

  type GetZ10010GroupByPayload<T extends Z10010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Z10010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Z10010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Z10010GroupByOutputType[P]>
            : GetScalarType<T[P], Z10010GroupByOutputType[P]>
        }
      >
    >


  export type Z10010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    Z10_TIPO?: boolean
    Z10_CHAVE?: boolean
    Z10_VENCTO?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["z10010"]>



  export type Z10010SelectScalar = {
    R_E_C_N_O_?: boolean
    Z10_TIPO?: boolean
    Z10_CHAVE?: boolean
    Z10_VENCTO?: boolean
    D_E_L_E_T_?: boolean
  }

  export type Z10010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "Z10_TIPO" | "Z10_CHAVE" | "Z10_VENCTO" | "D_E_L_E_T_", ExtArgs["result"]["z10010"]>

  export type $Z10010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Z10010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      Z10_TIPO: string
      Z10_CHAVE: string
      Z10_VENCTO: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["z10010"]>
    composites: {}
  }

  type Z10010GetPayload<S extends boolean | null | undefined | Z10010DefaultArgs> = $Result.GetResult<Prisma.$Z10010Payload, S>

  type Z10010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Z10010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Z10010CountAggregateInputType | true
    }

  export interface Z10010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Z10010'], meta: { name: 'Z10010' } }
    /**
     * Find zero or one Z10010 that matches the filter.
     * @param {Z10010FindUniqueArgs} args - Arguments to find a Z10010
     * @example
     * // Get one Z10010
     * const z10010 = await prisma.z10010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Z10010FindUniqueArgs>(args: SelectSubset<T, Z10010FindUniqueArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Z10010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Z10010FindUniqueOrThrowArgs} args - Arguments to find a Z10010
     * @example
     * // Get one Z10010
     * const z10010 = await prisma.z10010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Z10010FindUniqueOrThrowArgs>(args: SelectSubset<T, Z10010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z10010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010FindFirstArgs} args - Arguments to find a Z10010
     * @example
     * // Get one Z10010
     * const z10010 = await prisma.z10010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Z10010FindFirstArgs>(args?: SelectSubset<T, Z10010FindFirstArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z10010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010FindFirstOrThrowArgs} args - Arguments to find a Z10010
     * @example
     * // Get one Z10010
     * const z10010 = await prisma.z10010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Z10010FindFirstOrThrowArgs>(args?: SelectSubset<T, Z10010FindFirstOrThrowArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Z10010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Z10010s
     * const z10010s = await prisma.z10010.findMany()
     * 
     * // Get first 10 Z10010s
     * const z10010s = await prisma.z10010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const z10010WithR_E_C_N_O_Only = await prisma.z10010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends Z10010FindManyArgs>(args?: SelectSubset<T, Z10010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Z10010.
     * @param {Z10010CreateArgs} args - Arguments to create a Z10010.
     * @example
     * // Create one Z10010
     * const Z10010 = await prisma.z10010.create({
     *   data: {
     *     // ... data to create a Z10010
     *   }
     * })
     * 
     */
    create<T extends Z10010CreateArgs>(args: SelectSubset<T, Z10010CreateArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Z10010s.
     * @param {Z10010CreateManyArgs} args - Arguments to create many Z10010s.
     * @example
     * // Create many Z10010s
     * const z10010 = await prisma.z10010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Z10010CreateManyArgs>(args?: SelectSubset<T, Z10010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Z10010.
     * @param {Z10010DeleteArgs} args - Arguments to delete one Z10010.
     * @example
     * // Delete one Z10010
     * const Z10010 = await prisma.z10010.delete({
     *   where: {
     *     // ... filter to delete one Z10010
     *   }
     * })
     * 
     */
    delete<T extends Z10010DeleteArgs>(args: SelectSubset<T, Z10010DeleteArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Z10010.
     * @param {Z10010UpdateArgs} args - Arguments to update one Z10010.
     * @example
     * // Update one Z10010
     * const z10010 = await prisma.z10010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Z10010UpdateArgs>(args: SelectSubset<T, Z10010UpdateArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Z10010s.
     * @param {Z10010DeleteManyArgs} args - Arguments to filter Z10010s to delete.
     * @example
     * // Delete a few Z10010s
     * const { count } = await prisma.z10010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Z10010DeleteManyArgs>(args?: SelectSubset<T, Z10010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Z10010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Z10010s
     * const z10010 = await prisma.z10010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Z10010UpdateManyArgs>(args: SelectSubset<T, Z10010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Z10010.
     * @param {Z10010UpsertArgs} args - Arguments to update or create a Z10010.
     * @example
     * // Update or create a Z10010
     * const z10010 = await prisma.z10010.upsert({
     *   create: {
     *     // ... data to create a Z10010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Z10010 we want to update
     *   }
     * })
     */
    upsert<T extends Z10010UpsertArgs>(args: SelectSubset<T, Z10010UpsertArgs<ExtArgs>>): Prisma__Z10010Client<$Result.GetResult<Prisma.$Z10010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Z10010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010CountArgs} args - Arguments to filter Z10010s to count.
     * @example
     * // Count the number of Z10010s
     * const count = await prisma.z10010.count({
     *   where: {
     *     // ... the filter for the Z10010s we want to count
     *   }
     * })
    **/
    count<T extends Z10010CountArgs>(
      args?: Subset<T, Z10010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Z10010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Z10010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Z10010AggregateArgs>(args: Subset<T, Z10010AggregateArgs>): Prisma.PrismaPromise<GetZ10010AggregateType<T>>

    /**
     * Group by Z10010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z10010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Z10010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Z10010GroupByArgs['orderBy'] }
        : { orderBy?: Z10010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Z10010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZ10010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Z10010 model
   */
  readonly fields: Z10010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Z10010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Z10010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Z10010 model
   */
  interface Z10010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"Z10010", 'Int'>
    readonly Z10_TIPO: FieldRef<"Z10010", 'String'>
    readonly Z10_CHAVE: FieldRef<"Z10010", 'String'>
    readonly Z10_VENCTO: FieldRef<"Z10010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"Z10010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Z10010 findUnique
   */
  export type Z10010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter, which Z10010 to fetch.
     */
    where: Z10010WhereUniqueInput
  }

  /**
   * Z10010 findUniqueOrThrow
   */
  export type Z10010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter, which Z10010 to fetch.
     */
    where: Z10010WhereUniqueInput
  }

  /**
   * Z10010 findFirst
   */
  export type Z10010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter, which Z10010 to fetch.
     */
    where?: Z10010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z10010s to fetch.
     */
    orderBy?: Z10010OrderByWithRelationInput | Z10010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z10010s.
     */
    cursor?: Z10010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z10010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z10010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z10010s.
     */
    distinct?: Z10010ScalarFieldEnum | Z10010ScalarFieldEnum[]
  }

  /**
   * Z10010 findFirstOrThrow
   */
  export type Z10010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter, which Z10010 to fetch.
     */
    where?: Z10010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z10010s to fetch.
     */
    orderBy?: Z10010OrderByWithRelationInput | Z10010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z10010s.
     */
    cursor?: Z10010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z10010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z10010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z10010s.
     */
    distinct?: Z10010ScalarFieldEnum | Z10010ScalarFieldEnum[]
  }

  /**
   * Z10010 findMany
   */
  export type Z10010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter, which Z10010s to fetch.
     */
    where?: Z10010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z10010s to fetch.
     */
    orderBy?: Z10010OrderByWithRelationInput | Z10010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Z10010s.
     */
    cursor?: Z10010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z10010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z10010s.
     */
    skip?: number
    distinct?: Z10010ScalarFieldEnum | Z10010ScalarFieldEnum[]
  }

  /**
   * Z10010 create
   */
  export type Z10010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * The data needed to create a Z10010.
     */
    data: XOR<Z10010CreateInput, Z10010UncheckedCreateInput>
  }

  /**
   * Z10010 createMany
   */
  export type Z10010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Z10010s.
     */
    data: Z10010CreateManyInput | Z10010CreateManyInput[]
  }

  /**
   * Z10010 update
   */
  export type Z10010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * The data needed to update a Z10010.
     */
    data: XOR<Z10010UpdateInput, Z10010UncheckedUpdateInput>
    /**
     * Choose, which Z10010 to update.
     */
    where: Z10010WhereUniqueInput
  }

  /**
   * Z10010 updateMany
   */
  export type Z10010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Z10010s.
     */
    data: XOR<Z10010UpdateManyMutationInput, Z10010UncheckedUpdateManyInput>
    /**
     * Filter which Z10010s to update
     */
    where?: Z10010WhereInput
    /**
     * Limit how many Z10010s to update.
     */
    limit?: number
  }

  /**
   * Z10010 upsert
   */
  export type Z10010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * The filter to search for the Z10010 to update in case it exists.
     */
    where: Z10010WhereUniqueInput
    /**
     * In case the Z10010 found by the `where` argument doesn't exist, create a new Z10010 with this data.
     */
    create: XOR<Z10010CreateInput, Z10010UncheckedCreateInput>
    /**
     * In case the Z10010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Z10010UpdateInput, Z10010UncheckedUpdateInput>
  }

  /**
   * Z10010 delete
   */
  export type Z10010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
    /**
     * Filter which Z10010 to delete.
     */
    where: Z10010WhereUniqueInput
  }

  /**
   * Z10010 deleteMany
   */
  export type Z10010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z10010s to delete
     */
    where?: Z10010WhereInput
    /**
     * Limit how many Z10010s to delete.
     */
    limit?: number
  }

  /**
   * Z10010 without action
   */
  export type Z10010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z10010
     */
    select?: Z10010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z10010
     */
    omit?: Z10010Omit<ExtArgs> | null
  }


  /**
   * Model Z07010
   */

  export type AggregateZ07010 = {
    _count: Z07010CountAggregateOutputType | null
    _avg: Z07010AvgAggregateOutputType | null
    _sum: Z07010SumAggregateOutputType | null
    _min: Z07010MinAggregateOutputType | null
    _max: Z07010MaxAggregateOutputType | null
  }

  export type Z07010AvgAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z07010SumAggregateOutputType = {
    R_E_C_N_O_: number | null
  }

  export type Z07010MinAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z07_CHAVE: string | null
    Z07_DESC: string | null
    D_E_L_E_T_: string | null
  }

  export type Z07010MaxAggregateOutputType = {
    R_E_C_N_O_: number | null
    Z07_CHAVE: string | null
    Z07_DESC: string | null
    D_E_L_E_T_: string | null
  }

  export type Z07010CountAggregateOutputType = {
    R_E_C_N_O_: number
    Z07_CHAVE: number
    Z07_DESC: number
    D_E_L_E_T_: number
    _all: number
  }


  export type Z07010AvgAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z07010SumAggregateInputType = {
    R_E_C_N_O_?: true
  }

  export type Z07010MinAggregateInputType = {
    R_E_C_N_O_?: true
    Z07_CHAVE?: true
    Z07_DESC?: true
    D_E_L_E_T_?: true
  }

  export type Z07010MaxAggregateInputType = {
    R_E_C_N_O_?: true
    Z07_CHAVE?: true
    Z07_DESC?: true
    D_E_L_E_T_?: true
  }

  export type Z07010CountAggregateInputType = {
    R_E_C_N_O_?: true
    Z07_CHAVE?: true
    Z07_DESC?: true
    D_E_L_E_T_?: true
    _all?: true
  }

  export type Z07010AggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z07010 to aggregate.
     */
    where?: Z07010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z07010s to fetch.
     */
    orderBy?: Z07010OrderByWithRelationInput | Z07010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Z07010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z07010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z07010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Z07010s
    **/
    _count?: true | Z07010CountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Z07010AvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Z07010SumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Z07010MinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Z07010MaxAggregateInputType
  }

  export type GetZ07010AggregateType<T extends Z07010AggregateArgs> = {
        [P in keyof T & keyof AggregateZ07010]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateZ07010[P]>
      : GetScalarType<T[P], AggregateZ07010[P]>
  }




  export type Z07010GroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Z07010WhereInput
    orderBy?: Z07010OrderByWithAggregationInput | Z07010OrderByWithAggregationInput[]
    by: Z07010ScalarFieldEnum[] | Z07010ScalarFieldEnum
    having?: Z07010ScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Z07010CountAggregateInputType | true
    _avg?: Z07010AvgAggregateInputType
    _sum?: Z07010SumAggregateInputType
    _min?: Z07010MinAggregateInputType
    _max?: Z07010MaxAggregateInputType
  }

  export type Z07010GroupByOutputType = {
    R_E_C_N_O_: number
    Z07_CHAVE: string
    Z07_DESC: string | null
    D_E_L_E_T_: string | null
    _count: Z07010CountAggregateOutputType | null
    _avg: Z07010AvgAggregateOutputType | null
    _sum: Z07010SumAggregateOutputType | null
    _min: Z07010MinAggregateOutputType | null
    _max: Z07010MaxAggregateOutputType | null
  }

  type GetZ07010GroupByPayload<T extends Z07010GroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Z07010GroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Z07010GroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Z07010GroupByOutputType[P]>
            : GetScalarType<T[P], Z07010GroupByOutputType[P]>
        }
      >
    >


  export type Z07010Select<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    R_E_C_N_O_?: boolean
    Z07_CHAVE?: boolean
    Z07_DESC?: boolean
    D_E_L_E_T_?: boolean
  }, ExtArgs["result"]["z07010"]>



  export type Z07010SelectScalar = {
    R_E_C_N_O_?: boolean
    Z07_CHAVE?: boolean
    Z07_DESC?: boolean
    D_E_L_E_T_?: boolean
  }

  export type Z07010Omit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"R_E_C_N_O_" | "Z07_CHAVE" | "Z07_DESC" | "D_E_L_E_T_", ExtArgs["result"]["z07010"]>

  export type $Z07010Payload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Z07010"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      R_E_C_N_O_: number
      Z07_CHAVE: string
      Z07_DESC: string | null
      D_E_L_E_T_: string | null
    }, ExtArgs["result"]["z07010"]>
    composites: {}
  }

  type Z07010GetPayload<S extends boolean | null | undefined | Z07010DefaultArgs> = $Result.GetResult<Prisma.$Z07010Payload, S>

  type Z07010CountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Z07010FindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Z07010CountAggregateInputType | true
    }

  export interface Z07010Delegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Z07010'], meta: { name: 'Z07010' } }
    /**
     * Find zero or one Z07010 that matches the filter.
     * @param {Z07010FindUniqueArgs} args - Arguments to find a Z07010
     * @example
     * // Get one Z07010
     * const z07010 = await prisma.z07010.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Z07010FindUniqueArgs>(args: SelectSubset<T, Z07010FindUniqueArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Z07010 that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Z07010FindUniqueOrThrowArgs} args - Arguments to find a Z07010
     * @example
     * // Get one Z07010
     * const z07010 = await prisma.z07010.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Z07010FindUniqueOrThrowArgs>(args: SelectSubset<T, Z07010FindUniqueOrThrowArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z07010 that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010FindFirstArgs} args - Arguments to find a Z07010
     * @example
     * // Get one Z07010
     * const z07010 = await prisma.z07010.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Z07010FindFirstArgs>(args?: SelectSubset<T, Z07010FindFirstArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Z07010 that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010FindFirstOrThrowArgs} args - Arguments to find a Z07010
     * @example
     * // Get one Z07010
     * const z07010 = await prisma.z07010.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Z07010FindFirstOrThrowArgs>(args?: SelectSubset<T, Z07010FindFirstOrThrowArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Z07010s that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010FindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Z07010s
     * const z07010s = await prisma.z07010.findMany()
     * 
     * // Get first 10 Z07010s
     * const z07010s = await prisma.z07010.findMany({ take: 10 })
     * 
     * // Only select the `R_E_C_N_O_`
     * const z07010WithR_E_C_N_O_Only = await prisma.z07010.findMany({ select: { R_E_C_N_O_: true } })
     * 
     */
    findMany<T extends Z07010FindManyArgs>(args?: SelectSubset<T, Z07010FindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Z07010.
     * @param {Z07010CreateArgs} args - Arguments to create a Z07010.
     * @example
     * // Create one Z07010
     * const Z07010 = await prisma.z07010.create({
     *   data: {
     *     // ... data to create a Z07010
     *   }
     * })
     * 
     */
    create<T extends Z07010CreateArgs>(args: SelectSubset<T, Z07010CreateArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Z07010s.
     * @param {Z07010CreateManyArgs} args - Arguments to create many Z07010s.
     * @example
     * // Create many Z07010s
     * const z07010 = await prisma.z07010.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Z07010CreateManyArgs>(args?: SelectSubset<T, Z07010CreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Z07010.
     * @param {Z07010DeleteArgs} args - Arguments to delete one Z07010.
     * @example
     * // Delete one Z07010
     * const Z07010 = await prisma.z07010.delete({
     *   where: {
     *     // ... filter to delete one Z07010
     *   }
     * })
     * 
     */
    delete<T extends Z07010DeleteArgs>(args: SelectSubset<T, Z07010DeleteArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Z07010.
     * @param {Z07010UpdateArgs} args - Arguments to update one Z07010.
     * @example
     * // Update one Z07010
     * const z07010 = await prisma.z07010.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Z07010UpdateArgs>(args: SelectSubset<T, Z07010UpdateArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Z07010s.
     * @param {Z07010DeleteManyArgs} args - Arguments to filter Z07010s to delete.
     * @example
     * // Delete a few Z07010s
     * const { count } = await prisma.z07010.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Z07010DeleteManyArgs>(args?: SelectSubset<T, Z07010DeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Z07010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Z07010s
     * const z07010 = await prisma.z07010.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Z07010UpdateManyArgs>(args: SelectSubset<T, Z07010UpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Z07010.
     * @param {Z07010UpsertArgs} args - Arguments to update or create a Z07010.
     * @example
     * // Update or create a Z07010
     * const z07010 = await prisma.z07010.upsert({
     *   create: {
     *     // ... data to create a Z07010
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Z07010 we want to update
     *   }
     * })
     */
    upsert<T extends Z07010UpsertArgs>(args: SelectSubset<T, Z07010UpsertArgs<ExtArgs>>): Prisma__Z07010Client<$Result.GetResult<Prisma.$Z07010Payload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Z07010s.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010CountArgs} args - Arguments to filter Z07010s to count.
     * @example
     * // Count the number of Z07010s
     * const count = await prisma.z07010.count({
     *   where: {
     *     // ... the filter for the Z07010s we want to count
     *   }
     * })
    **/
    count<T extends Z07010CountArgs>(
      args?: Subset<T, Z07010CountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Z07010CountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Z07010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010AggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Z07010AggregateArgs>(args: Subset<T, Z07010AggregateArgs>): Prisma.PrismaPromise<GetZ07010AggregateType<T>>

    /**
     * Group by Z07010.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Z07010GroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Z07010GroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Z07010GroupByArgs['orderBy'] }
        : { orderBy?: Z07010GroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Z07010GroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetZ07010GroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Z07010 model
   */
  readonly fields: Z07010FieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Z07010.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Z07010Client<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Z07010 model
   */
  interface Z07010FieldRefs {
    readonly R_E_C_N_O_: FieldRef<"Z07010", 'Int'>
    readonly Z07_CHAVE: FieldRef<"Z07010", 'String'>
    readonly Z07_DESC: FieldRef<"Z07010", 'String'>
    readonly D_E_L_E_T_: FieldRef<"Z07010", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Z07010 findUnique
   */
  export type Z07010FindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter, which Z07010 to fetch.
     */
    where: Z07010WhereUniqueInput
  }

  /**
   * Z07010 findUniqueOrThrow
   */
  export type Z07010FindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter, which Z07010 to fetch.
     */
    where: Z07010WhereUniqueInput
  }

  /**
   * Z07010 findFirst
   */
  export type Z07010FindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter, which Z07010 to fetch.
     */
    where?: Z07010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z07010s to fetch.
     */
    orderBy?: Z07010OrderByWithRelationInput | Z07010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z07010s.
     */
    cursor?: Z07010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z07010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z07010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z07010s.
     */
    distinct?: Z07010ScalarFieldEnum | Z07010ScalarFieldEnum[]
  }

  /**
   * Z07010 findFirstOrThrow
   */
  export type Z07010FindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter, which Z07010 to fetch.
     */
    where?: Z07010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z07010s to fetch.
     */
    orderBy?: Z07010OrderByWithRelationInput | Z07010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Z07010s.
     */
    cursor?: Z07010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z07010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z07010s.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Z07010s.
     */
    distinct?: Z07010ScalarFieldEnum | Z07010ScalarFieldEnum[]
  }

  /**
   * Z07010 findMany
   */
  export type Z07010FindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter, which Z07010s to fetch.
     */
    where?: Z07010WhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Z07010s to fetch.
     */
    orderBy?: Z07010OrderByWithRelationInput | Z07010OrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Z07010s.
     */
    cursor?: Z07010WhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Z07010s from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Z07010s.
     */
    skip?: number
    distinct?: Z07010ScalarFieldEnum | Z07010ScalarFieldEnum[]
  }

  /**
   * Z07010 create
   */
  export type Z07010CreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * The data needed to create a Z07010.
     */
    data: XOR<Z07010CreateInput, Z07010UncheckedCreateInput>
  }

  /**
   * Z07010 createMany
   */
  export type Z07010CreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Z07010s.
     */
    data: Z07010CreateManyInput | Z07010CreateManyInput[]
  }

  /**
   * Z07010 update
   */
  export type Z07010UpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * The data needed to update a Z07010.
     */
    data: XOR<Z07010UpdateInput, Z07010UncheckedUpdateInput>
    /**
     * Choose, which Z07010 to update.
     */
    where: Z07010WhereUniqueInput
  }

  /**
   * Z07010 updateMany
   */
  export type Z07010UpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Z07010s.
     */
    data: XOR<Z07010UpdateManyMutationInput, Z07010UncheckedUpdateManyInput>
    /**
     * Filter which Z07010s to update
     */
    where?: Z07010WhereInput
    /**
     * Limit how many Z07010s to update.
     */
    limit?: number
  }

  /**
   * Z07010 upsert
   */
  export type Z07010UpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * The filter to search for the Z07010 to update in case it exists.
     */
    where: Z07010WhereUniqueInput
    /**
     * In case the Z07010 found by the `where` argument doesn't exist, create a new Z07010 with this data.
     */
    create: XOR<Z07010CreateInput, Z07010UncheckedCreateInput>
    /**
     * In case the Z07010 was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Z07010UpdateInput, Z07010UncheckedUpdateInput>
  }

  /**
   * Z07010 delete
   */
  export type Z07010DeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
    /**
     * Filter which Z07010 to delete.
     */
    where: Z07010WhereUniqueInput
  }

  /**
   * Z07010 deleteMany
   */
  export type Z07010DeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Z07010s to delete
     */
    where?: Z07010WhereInput
    /**
     * Limit how many Z07010s to delete.
     */
    limit?: number
  }

  /**
   * Z07010 without action
   */
  export type Z07010DefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Z07010
     */
    select?: Z07010Select<ExtArgs> | null
    /**
     * Omit specific fields from the Z07010
     */
    omit?: Z07010Omit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SB1010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    B1_FILIAL: 'B1_FILIAL',
    B1_COD: 'B1_COD',
    B1_DESC: 'B1_DESC',
    B1_TIPO: 'B1_TIPO',
    B1_UM: 'B1_UM',
    B1_GRUPO: 'B1_GRUPO',
    B1_PRV1: 'B1_PRV1',
    B1_LOCPAD: 'B1_LOCPAD',
    B1_MARCA: 'B1_MARCA',
    B1_MSBLQL: 'B1_MSBLQL',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SB1010ScalarFieldEnum = (typeof SB1010ScalarFieldEnum)[keyof typeof SB1010ScalarFieldEnum]


  export const SF1010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    F1_FILIAL: 'F1_FILIAL',
    F1_DOC: 'F1_DOC',
    F1_SERIE: 'F1_SERIE',
    F1_FORNECE: 'F1_FORNECE',
    F1_LOJA: 'F1_LOJA',
    F1_STATUS: 'F1_STATUS',
    F1_EMISSAO: 'F1_EMISSAO',
    F1_DTDIGIT: 'F1_DTDIGIT',
    F1_RECBMTO: 'F1_RECBMTO',
    F1_USERLGI: 'F1_USERLGI',
    D_E_L_E_T_: 'D_E_L_E_T_',
    F1_XTIPO: 'F1_XTIPO',
    F1_XPRIOR: 'F1_XPRIOR',
    F1_XORI: 'F1_XORI',
    F1_XUSRRA: 'F1_XUSRRA',
    F1_XOBS: 'F1_XOBS',
    F1_XREV: 'F1_XREV',
    F1_ZOBSREV: 'F1_ZOBSREV'
  };

  export type SF1010ScalarFieldEnum = (typeof SF1010ScalarFieldEnum)[keyof typeof SF1010ScalarFieldEnum]


  export const SD1010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    D1_FILIAL: 'D1_FILIAL',
    D1_DOC: 'D1_DOC',
    D1_SERIE: 'D1_SERIE',
    D1_FORNECE: 'D1_FORNECE',
    D1_LOJA: 'D1_LOJA',
    D1_TOTAL: 'D1_TOTAL',
    D1_TES: 'D1_TES',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SD1010ScalarFieldEnum = (typeof SD1010ScalarFieldEnum)[keyof typeof SD1010ScalarFieldEnum]


  export const SF4010ScalarFieldEnum: {
    F4_CODIGO: 'F4_CODIGO',
    F4_TRANFIL: 'F4_TRANFIL',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SF4010ScalarFieldEnum = (typeof SF4010ScalarFieldEnum)[keyof typeof SF4010ScalarFieldEnum]


  export const SA2010ScalarFieldEnum: {
    A2_COD: 'A2_COD',
    A2_LOJA: 'A2_LOJA',
    A2_NOME: 'A2_NOME',
    A2_CGC: 'A2_CGC',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SA2010ScalarFieldEnum = (typeof SA2010ScalarFieldEnum)[keyof typeof SA2010ScalarFieldEnum]


  export const SC7010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    C7_FILIAL: 'C7_FILIAL',
    C7_NUM: 'C7_NUM',
    C7_ITEM: 'C7_ITEM',
    C7_PRODUTO: 'C7_PRODUTO',
    C7_EMISSAO: 'C7_EMISSAO',
    C7_OBS: 'C7_OBS',
    C7_USER: 'C7_USER',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SC7010ScalarFieldEnum = (typeof SC7010ScalarFieldEnum)[keyof typeof SC7010ScalarFieldEnum]


  export const SE2010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    E2_FILIAL: 'E2_FILIAL',
    E2_NUM: 'E2_NUM',
    E2_PREFIXO: 'E2_PREFIXO',
    E2_FORNECE: 'E2_FORNECE',
    E2_LOJA: 'E2_LOJA',
    E2_PARCELA: 'E2_PARCELA',
    E2_VENCTO: 'E2_VENCTO',
    E2_BAIXA: 'E2_BAIXA',
    E2_VALOR: 'E2_VALOR',
    E2_HIST: 'E2_HIST',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SE2010ScalarFieldEnum = (typeof SE2010ScalarFieldEnum)[keyof typeof SE2010ScalarFieldEnum]


  export const Z05010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    Z05_FILIAL: 'Z05_FILIAL',
    Z05_CHAVE: 'Z05_CHAVE',
    Z05_ROTINA: 'Z05_ROTINA',
    Z05_CAMPO: 'Z05_CAMPO',
    Z05_VALATU: 'Z05_VALATU',
    Z05_DATA: 'Z05_DATA',
    Z05_HORA: 'Z05_HORA',
    Z05_USER: 'Z05_USER',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type Z05010ScalarFieldEnum = (typeof Z05010ScalarFieldEnum)[keyof typeof Z05010ScalarFieldEnum]


  export const SYS_USRScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    USR_ID: 'USR_ID',
    USR_NOME: 'USR_NOME',
    USR_CODIGO: 'USR_CODIGO',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type SYS_USRScalarFieldEnum = (typeof SYS_USRScalarFieldEnum)[keyof typeof SYS_USRScalarFieldEnum]


  export const Z10010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    Z10_TIPO: 'Z10_TIPO',
    Z10_CHAVE: 'Z10_CHAVE',
    Z10_VENCTO: 'Z10_VENCTO',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type Z10010ScalarFieldEnum = (typeof Z10010ScalarFieldEnum)[keyof typeof Z10010ScalarFieldEnum]


  export const Z07010ScalarFieldEnum: {
    R_E_C_N_O_: 'R_E_C_N_O_',
    Z07_CHAVE: 'Z07_CHAVE',
    Z07_DESC: 'Z07_DESC',
    D_E_L_E_T_: 'D_E_L_E_T_'
  };

  export type Z07010ScalarFieldEnum = (typeof Z07010ScalarFieldEnum)[keyof typeof Z07010ScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SB1010WhereInput = {
    AND?: SB1010WhereInput | SB1010WhereInput[]
    OR?: SB1010WhereInput[]
    NOT?: SB1010WhereInput | SB1010WhereInput[]
    R_E_C_N_O_?: IntFilter<"SB1010"> | number
    B1_FILIAL?: StringFilter<"SB1010"> | string
    B1_COD?: StringFilter<"SB1010"> | string
    B1_DESC?: StringFilter<"SB1010"> | string
    B1_TIPO?: StringNullableFilter<"SB1010"> | string | null
    B1_UM?: StringNullableFilter<"SB1010"> | string | null
    B1_GRUPO?: StringNullableFilter<"SB1010"> | string | null
    B1_PRV1?: FloatNullableFilter<"SB1010"> | number | null
    B1_LOCPAD?: StringNullableFilter<"SB1010"> | string | null
    B1_MARCA?: StringNullableFilter<"SB1010"> | string | null
    B1_MSBLQL?: StringNullableFilter<"SB1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SB1010"> | string | null
  }

  export type SB1010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    B1_FILIAL?: SortOrder
    B1_COD?: SortOrder
    B1_DESC?: SortOrder
    B1_TIPO?: SortOrderInput | SortOrder
    B1_UM?: SortOrderInput | SortOrder
    B1_GRUPO?: SortOrderInput | SortOrder
    B1_PRV1?: SortOrderInput | SortOrder
    B1_LOCPAD?: SortOrderInput | SortOrder
    B1_MARCA?: SortOrderInput | SortOrder
    B1_MSBLQL?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type SB1010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: SB1010WhereInput | SB1010WhereInput[]
    OR?: SB1010WhereInput[]
    NOT?: SB1010WhereInput | SB1010WhereInput[]
    B1_FILIAL?: StringFilter<"SB1010"> | string
    B1_COD?: StringFilter<"SB1010"> | string
    B1_DESC?: StringFilter<"SB1010"> | string
    B1_TIPO?: StringNullableFilter<"SB1010"> | string | null
    B1_UM?: StringNullableFilter<"SB1010"> | string | null
    B1_GRUPO?: StringNullableFilter<"SB1010"> | string | null
    B1_PRV1?: FloatNullableFilter<"SB1010"> | number | null
    B1_LOCPAD?: StringNullableFilter<"SB1010"> | string | null
    B1_MARCA?: StringNullableFilter<"SB1010"> | string | null
    B1_MSBLQL?: StringNullableFilter<"SB1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SB1010"> | string | null
  }, "R_E_C_N_O_">

  export type SB1010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    B1_FILIAL?: SortOrder
    B1_COD?: SortOrder
    B1_DESC?: SortOrder
    B1_TIPO?: SortOrderInput | SortOrder
    B1_UM?: SortOrderInput | SortOrder
    B1_GRUPO?: SortOrderInput | SortOrder
    B1_PRV1?: SortOrderInput | SortOrder
    B1_LOCPAD?: SortOrderInput | SortOrder
    B1_MARCA?: SortOrderInput | SortOrder
    B1_MSBLQL?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SB1010CountOrderByAggregateInput
    _avg?: SB1010AvgOrderByAggregateInput
    _max?: SB1010MaxOrderByAggregateInput
    _min?: SB1010MinOrderByAggregateInput
    _sum?: SB1010SumOrderByAggregateInput
  }

  export type SB1010ScalarWhereWithAggregatesInput = {
    AND?: SB1010ScalarWhereWithAggregatesInput | SB1010ScalarWhereWithAggregatesInput[]
    OR?: SB1010ScalarWhereWithAggregatesInput[]
    NOT?: SB1010ScalarWhereWithAggregatesInput | SB1010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SB1010"> | number
    B1_FILIAL?: StringWithAggregatesFilter<"SB1010"> | string
    B1_COD?: StringWithAggregatesFilter<"SB1010"> | string
    B1_DESC?: StringWithAggregatesFilter<"SB1010"> | string
    B1_TIPO?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    B1_UM?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    B1_GRUPO?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    B1_PRV1?: FloatNullableWithAggregatesFilter<"SB1010"> | number | null
    B1_LOCPAD?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    B1_MARCA?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    B1_MSBLQL?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SB1010"> | string | null
  }

  export type SF1010WhereInput = {
    AND?: SF1010WhereInput | SF1010WhereInput[]
    OR?: SF1010WhereInput[]
    NOT?: SF1010WhereInput | SF1010WhereInput[]
    R_E_C_N_O_?: IntFilter<"SF1010"> | number
    F1_FILIAL?: StringFilter<"SF1010"> | string
    F1_DOC?: StringFilter<"SF1010"> | string
    F1_SERIE?: StringFilter<"SF1010"> | string
    F1_FORNECE?: StringFilter<"SF1010"> | string
    F1_LOJA?: StringFilter<"SF1010"> | string
    F1_STATUS?: StringNullableFilter<"SF1010"> | string | null
    F1_EMISSAO?: StringNullableFilter<"SF1010"> | string | null
    F1_DTDIGIT?: StringNullableFilter<"SF1010"> | string | null
    F1_RECBMTO?: StringNullableFilter<"SF1010"> | string | null
    F1_USERLGI?: StringNullableFilter<"SF1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SF1010"> | string | null
    F1_XTIPO?: StringNullableFilter<"SF1010"> | string | null
    F1_XPRIOR?: StringNullableFilter<"SF1010"> | string | null
    F1_XORI?: StringNullableFilter<"SF1010"> | string | null
    F1_XUSRRA?: StringNullableFilter<"SF1010"> | string | null
    F1_XOBS?: StringNullableFilter<"SF1010"> | string | null
    F1_XREV?: StringNullableFilter<"SF1010"> | string | null
    F1_ZOBSREV?: StringNullableFilter<"SF1010"> | string | null
    SD1?: SD1010ListRelationFilter
    SA2?: XOR<SA2010NullableScalarRelationFilter, SA2010WhereInput> | null
  }

  export type SF1010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    F1_FILIAL?: SortOrder
    F1_DOC?: SortOrder
    F1_SERIE?: SortOrder
    F1_FORNECE?: SortOrder
    F1_LOJA?: SortOrder
    F1_STATUS?: SortOrderInput | SortOrder
    F1_EMISSAO?: SortOrderInput | SortOrder
    F1_DTDIGIT?: SortOrderInput | SortOrder
    F1_RECBMTO?: SortOrderInput | SortOrder
    F1_USERLGI?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    F1_XTIPO?: SortOrderInput | SortOrder
    F1_XPRIOR?: SortOrderInput | SortOrder
    F1_XORI?: SortOrderInput | SortOrder
    F1_XUSRRA?: SortOrderInput | SortOrder
    F1_XOBS?: SortOrderInput | SortOrder
    F1_XREV?: SortOrderInput | SortOrder
    F1_ZOBSREV?: SortOrderInput | SortOrder
    SD1?: SD1010OrderByRelationAggregateInput
    SA2?: SA2010OrderByWithRelationInput
  }

  export type SF1010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    F1_FILIAL_F1_DOC_F1_SERIE_F1_FORNECE_F1_LOJA?: SF1010F1_FILIALF1_DOCF1_SERIEF1_FORNECEF1_LOJACompoundUniqueInput
    AND?: SF1010WhereInput | SF1010WhereInput[]
    OR?: SF1010WhereInput[]
    NOT?: SF1010WhereInput | SF1010WhereInput[]
    F1_FILIAL?: StringFilter<"SF1010"> | string
    F1_DOC?: StringFilter<"SF1010"> | string
    F1_SERIE?: StringFilter<"SF1010"> | string
    F1_FORNECE?: StringFilter<"SF1010"> | string
    F1_LOJA?: StringFilter<"SF1010"> | string
    F1_STATUS?: StringNullableFilter<"SF1010"> | string | null
    F1_EMISSAO?: StringNullableFilter<"SF1010"> | string | null
    F1_DTDIGIT?: StringNullableFilter<"SF1010"> | string | null
    F1_RECBMTO?: StringNullableFilter<"SF1010"> | string | null
    F1_USERLGI?: StringNullableFilter<"SF1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SF1010"> | string | null
    F1_XTIPO?: StringNullableFilter<"SF1010"> | string | null
    F1_XPRIOR?: StringNullableFilter<"SF1010"> | string | null
    F1_XORI?: StringNullableFilter<"SF1010"> | string | null
    F1_XUSRRA?: StringNullableFilter<"SF1010"> | string | null
    F1_XOBS?: StringNullableFilter<"SF1010"> | string | null
    F1_XREV?: StringNullableFilter<"SF1010"> | string | null
    F1_ZOBSREV?: StringNullableFilter<"SF1010"> | string | null
    SD1?: SD1010ListRelationFilter
    SA2?: XOR<SA2010NullableScalarRelationFilter, SA2010WhereInput> | null
  }, "R_E_C_N_O_" | "F1_FILIAL_F1_DOC_F1_SERIE_F1_FORNECE_F1_LOJA">

  export type SF1010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    F1_FILIAL?: SortOrder
    F1_DOC?: SortOrder
    F1_SERIE?: SortOrder
    F1_FORNECE?: SortOrder
    F1_LOJA?: SortOrder
    F1_STATUS?: SortOrderInput | SortOrder
    F1_EMISSAO?: SortOrderInput | SortOrder
    F1_DTDIGIT?: SortOrderInput | SortOrder
    F1_RECBMTO?: SortOrderInput | SortOrder
    F1_USERLGI?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    F1_XTIPO?: SortOrderInput | SortOrder
    F1_XPRIOR?: SortOrderInput | SortOrder
    F1_XORI?: SortOrderInput | SortOrder
    F1_XUSRRA?: SortOrderInput | SortOrder
    F1_XOBS?: SortOrderInput | SortOrder
    F1_XREV?: SortOrderInput | SortOrder
    F1_ZOBSREV?: SortOrderInput | SortOrder
    _count?: SF1010CountOrderByAggregateInput
    _avg?: SF1010AvgOrderByAggregateInput
    _max?: SF1010MaxOrderByAggregateInput
    _min?: SF1010MinOrderByAggregateInput
    _sum?: SF1010SumOrderByAggregateInput
  }

  export type SF1010ScalarWhereWithAggregatesInput = {
    AND?: SF1010ScalarWhereWithAggregatesInput | SF1010ScalarWhereWithAggregatesInput[]
    OR?: SF1010ScalarWhereWithAggregatesInput[]
    NOT?: SF1010ScalarWhereWithAggregatesInput | SF1010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SF1010"> | number
    F1_FILIAL?: StringWithAggregatesFilter<"SF1010"> | string
    F1_DOC?: StringWithAggregatesFilter<"SF1010"> | string
    F1_SERIE?: StringWithAggregatesFilter<"SF1010"> | string
    F1_FORNECE?: StringWithAggregatesFilter<"SF1010"> | string
    F1_LOJA?: StringWithAggregatesFilter<"SF1010"> | string
    F1_STATUS?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_EMISSAO?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_DTDIGIT?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_RECBMTO?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_USERLGI?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XTIPO?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XPRIOR?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XORI?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XUSRRA?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XOBS?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_XREV?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
    F1_ZOBSREV?: StringNullableWithAggregatesFilter<"SF1010"> | string | null
  }

  export type SD1010WhereInput = {
    AND?: SD1010WhereInput | SD1010WhereInput[]
    OR?: SD1010WhereInput[]
    NOT?: SD1010WhereInput | SD1010WhereInput[]
    R_E_C_N_O_?: IntFilter<"SD1010"> | number
    D1_FILIAL?: StringFilter<"SD1010"> | string
    D1_DOC?: StringFilter<"SD1010"> | string
    D1_SERIE?: StringFilter<"SD1010"> | string
    D1_FORNECE?: StringFilter<"SD1010"> | string
    D1_LOJA?: StringFilter<"SD1010"> | string
    D1_TOTAL?: FloatFilter<"SD1010"> | number
    D1_TES?: StringNullableFilter<"SD1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SD1010"> | string | null
    SF1?: XOR<SF1010NullableScalarRelationFilter, SF1010WhereInput> | null
    SF4?: XOR<SF4010NullableScalarRelationFilter, SF4010WhereInput> | null
  }

  export type SD1010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    D1_FILIAL?: SortOrder
    D1_DOC?: SortOrder
    D1_SERIE?: SortOrder
    D1_FORNECE?: SortOrder
    D1_LOJA?: SortOrder
    D1_TOTAL?: SortOrder
    D1_TES?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    SF1?: SF1010OrderByWithRelationInput
    SF4?: SF4010OrderByWithRelationInput
  }

  export type SD1010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: SD1010WhereInput | SD1010WhereInput[]
    OR?: SD1010WhereInput[]
    NOT?: SD1010WhereInput | SD1010WhereInput[]
    D1_FILIAL?: StringFilter<"SD1010"> | string
    D1_DOC?: StringFilter<"SD1010"> | string
    D1_SERIE?: StringFilter<"SD1010"> | string
    D1_FORNECE?: StringFilter<"SD1010"> | string
    D1_LOJA?: StringFilter<"SD1010"> | string
    D1_TOTAL?: FloatFilter<"SD1010"> | number
    D1_TES?: StringNullableFilter<"SD1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SD1010"> | string | null
    SF1?: XOR<SF1010NullableScalarRelationFilter, SF1010WhereInput> | null
    SF4?: XOR<SF4010NullableScalarRelationFilter, SF4010WhereInput> | null
  }, "R_E_C_N_O_">

  export type SD1010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    D1_FILIAL?: SortOrder
    D1_DOC?: SortOrder
    D1_SERIE?: SortOrder
    D1_FORNECE?: SortOrder
    D1_LOJA?: SortOrder
    D1_TOTAL?: SortOrder
    D1_TES?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SD1010CountOrderByAggregateInput
    _avg?: SD1010AvgOrderByAggregateInput
    _max?: SD1010MaxOrderByAggregateInput
    _min?: SD1010MinOrderByAggregateInput
    _sum?: SD1010SumOrderByAggregateInput
  }

  export type SD1010ScalarWhereWithAggregatesInput = {
    AND?: SD1010ScalarWhereWithAggregatesInput | SD1010ScalarWhereWithAggregatesInput[]
    OR?: SD1010ScalarWhereWithAggregatesInput[]
    NOT?: SD1010ScalarWhereWithAggregatesInput | SD1010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SD1010"> | number
    D1_FILIAL?: StringWithAggregatesFilter<"SD1010"> | string
    D1_DOC?: StringWithAggregatesFilter<"SD1010"> | string
    D1_SERIE?: StringWithAggregatesFilter<"SD1010"> | string
    D1_FORNECE?: StringWithAggregatesFilter<"SD1010"> | string
    D1_LOJA?: StringWithAggregatesFilter<"SD1010"> | string
    D1_TOTAL?: FloatWithAggregatesFilter<"SD1010"> | number
    D1_TES?: StringNullableWithAggregatesFilter<"SD1010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SD1010"> | string | null
  }

  export type SF4010WhereInput = {
    AND?: SF4010WhereInput | SF4010WhereInput[]
    OR?: SF4010WhereInput[]
    NOT?: SF4010WhereInput | SF4010WhereInput[]
    F4_CODIGO?: StringFilter<"SF4010"> | string
    F4_TRANFIL?: StringNullableFilter<"SF4010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SF4010"> | string | null
    SD1?: SD1010ListRelationFilter
  }

  export type SF4010OrderByWithRelationInput = {
    F4_CODIGO?: SortOrder
    F4_TRANFIL?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    SD1?: SD1010OrderByRelationAggregateInput
  }

  export type SF4010WhereUniqueInput = Prisma.AtLeast<{
    F4_CODIGO?: string
    AND?: SF4010WhereInput | SF4010WhereInput[]
    OR?: SF4010WhereInput[]
    NOT?: SF4010WhereInput | SF4010WhereInput[]
    F4_TRANFIL?: StringNullableFilter<"SF4010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SF4010"> | string | null
    SD1?: SD1010ListRelationFilter
  }, "F4_CODIGO">

  export type SF4010OrderByWithAggregationInput = {
    F4_CODIGO?: SortOrder
    F4_TRANFIL?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SF4010CountOrderByAggregateInput
    _max?: SF4010MaxOrderByAggregateInput
    _min?: SF4010MinOrderByAggregateInput
  }

  export type SF4010ScalarWhereWithAggregatesInput = {
    AND?: SF4010ScalarWhereWithAggregatesInput | SF4010ScalarWhereWithAggregatesInput[]
    OR?: SF4010ScalarWhereWithAggregatesInput[]
    NOT?: SF4010ScalarWhereWithAggregatesInput | SF4010ScalarWhereWithAggregatesInput[]
    F4_CODIGO?: StringWithAggregatesFilter<"SF4010"> | string
    F4_TRANFIL?: StringNullableWithAggregatesFilter<"SF4010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SF4010"> | string | null
  }

  export type SA2010WhereInput = {
    AND?: SA2010WhereInput | SA2010WhereInput[]
    OR?: SA2010WhereInput[]
    NOT?: SA2010WhereInput | SA2010WhereInput[]
    A2_COD?: StringFilter<"SA2010"> | string
    A2_LOJA?: StringFilter<"SA2010"> | string
    A2_NOME?: StringFilter<"SA2010"> | string
    A2_CGC?: StringNullableFilter<"SA2010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SA2010"> | string | null
    SF1?: SF1010ListRelationFilter
  }

  export type SA2010OrderByWithRelationInput = {
    A2_COD?: SortOrder
    A2_LOJA?: SortOrder
    A2_NOME?: SortOrder
    A2_CGC?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    SF1?: SF1010OrderByRelationAggregateInput
  }

  export type SA2010WhereUniqueInput = Prisma.AtLeast<{
    A2_COD_A2_LOJA?: SA2010A2_CODA2_LOJACompoundUniqueInput
    AND?: SA2010WhereInput | SA2010WhereInput[]
    OR?: SA2010WhereInput[]
    NOT?: SA2010WhereInput | SA2010WhereInput[]
    A2_COD?: StringFilter<"SA2010"> | string
    A2_LOJA?: StringFilter<"SA2010"> | string
    A2_NOME?: StringFilter<"SA2010"> | string
    A2_CGC?: StringNullableFilter<"SA2010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SA2010"> | string | null
    SF1?: SF1010ListRelationFilter
  }, "A2_COD_A2_LOJA">

  export type SA2010OrderByWithAggregationInput = {
    A2_COD?: SortOrder
    A2_LOJA?: SortOrder
    A2_NOME?: SortOrder
    A2_CGC?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SA2010CountOrderByAggregateInput
    _max?: SA2010MaxOrderByAggregateInput
    _min?: SA2010MinOrderByAggregateInput
  }

  export type SA2010ScalarWhereWithAggregatesInput = {
    AND?: SA2010ScalarWhereWithAggregatesInput | SA2010ScalarWhereWithAggregatesInput[]
    OR?: SA2010ScalarWhereWithAggregatesInput[]
    NOT?: SA2010ScalarWhereWithAggregatesInput | SA2010ScalarWhereWithAggregatesInput[]
    A2_COD?: StringWithAggregatesFilter<"SA2010"> | string
    A2_LOJA?: StringWithAggregatesFilter<"SA2010"> | string
    A2_NOME?: StringWithAggregatesFilter<"SA2010"> | string
    A2_CGC?: StringNullableWithAggregatesFilter<"SA2010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SA2010"> | string | null
  }

  export type SC7010WhereInput = {
    AND?: SC7010WhereInput | SC7010WhereInput[]
    OR?: SC7010WhereInput[]
    NOT?: SC7010WhereInput | SC7010WhereInput[]
    R_E_C_N_O_?: IntFilter<"SC7010"> | number
    C7_FILIAL?: StringFilter<"SC7010"> | string
    C7_NUM?: StringFilter<"SC7010"> | string
    C7_ITEM?: StringFilter<"SC7010"> | string
    C7_PRODUTO?: StringFilter<"SC7010"> | string
    C7_EMISSAO?: StringNullableFilter<"SC7010"> | string | null
    C7_OBS?: StringNullableFilter<"SC7010"> | string | null
    C7_USER?: StringNullableFilter<"SC7010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SC7010"> | string | null
  }

  export type SC7010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    C7_FILIAL?: SortOrder
    C7_NUM?: SortOrder
    C7_ITEM?: SortOrder
    C7_PRODUTO?: SortOrder
    C7_EMISSAO?: SortOrderInput | SortOrder
    C7_OBS?: SortOrderInput | SortOrder
    C7_USER?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type SC7010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    C7_FILIAL_C7_NUM_C7_ITEM_C7_PRODUTO?: SC7010C7_FILIALC7_NUMC7_ITEMC7_PRODUTOCompoundUniqueInput
    AND?: SC7010WhereInput | SC7010WhereInput[]
    OR?: SC7010WhereInput[]
    NOT?: SC7010WhereInput | SC7010WhereInput[]
    C7_FILIAL?: StringFilter<"SC7010"> | string
    C7_NUM?: StringFilter<"SC7010"> | string
    C7_ITEM?: StringFilter<"SC7010"> | string
    C7_PRODUTO?: StringFilter<"SC7010"> | string
    C7_EMISSAO?: StringNullableFilter<"SC7010"> | string | null
    C7_OBS?: StringNullableFilter<"SC7010"> | string | null
    C7_USER?: StringNullableFilter<"SC7010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SC7010"> | string | null
  }, "R_E_C_N_O_" | "C7_FILIAL_C7_NUM_C7_ITEM_C7_PRODUTO">

  export type SC7010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    C7_FILIAL?: SortOrder
    C7_NUM?: SortOrder
    C7_ITEM?: SortOrder
    C7_PRODUTO?: SortOrder
    C7_EMISSAO?: SortOrderInput | SortOrder
    C7_OBS?: SortOrderInput | SortOrder
    C7_USER?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SC7010CountOrderByAggregateInput
    _avg?: SC7010AvgOrderByAggregateInput
    _max?: SC7010MaxOrderByAggregateInput
    _min?: SC7010MinOrderByAggregateInput
    _sum?: SC7010SumOrderByAggregateInput
  }

  export type SC7010ScalarWhereWithAggregatesInput = {
    AND?: SC7010ScalarWhereWithAggregatesInput | SC7010ScalarWhereWithAggregatesInput[]
    OR?: SC7010ScalarWhereWithAggregatesInput[]
    NOT?: SC7010ScalarWhereWithAggregatesInput | SC7010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SC7010"> | number
    C7_FILIAL?: StringWithAggregatesFilter<"SC7010"> | string
    C7_NUM?: StringWithAggregatesFilter<"SC7010"> | string
    C7_ITEM?: StringWithAggregatesFilter<"SC7010"> | string
    C7_PRODUTO?: StringWithAggregatesFilter<"SC7010"> | string
    C7_EMISSAO?: StringNullableWithAggregatesFilter<"SC7010"> | string | null
    C7_OBS?: StringNullableWithAggregatesFilter<"SC7010"> | string | null
    C7_USER?: StringNullableWithAggregatesFilter<"SC7010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SC7010"> | string | null
  }

  export type SE2010WhereInput = {
    AND?: SE2010WhereInput | SE2010WhereInput[]
    OR?: SE2010WhereInput[]
    NOT?: SE2010WhereInput | SE2010WhereInput[]
    R_E_C_N_O_?: IntFilter<"SE2010"> | number
    E2_FILIAL?: StringFilter<"SE2010"> | string
    E2_NUM?: StringFilter<"SE2010"> | string
    E2_PREFIXO?: StringFilter<"SE2010"> | string
    E2_FORNECE?: StringFilter<"SE2010"> | string
    E2_LOJA?: StringFilter<"SE2010"> | string
    E2_PARCELA?: StringNullableFilter<"SE2010"> | string | null
    E2_VENCTO?: StringNullableFilter<"SE2010"> | string | null
    E2_BAIXA?: StringNullableFilter<"SE2010"> | string | null
    E2_VALOR?: FloatNullableFilter<"SE2010"> | number | null
    E2_HIST?: StringNullableFilter<"SE2010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SE2010"> | string | null
  }

  export type SE2010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    E2_FILIAL?: SortOrder
    E2_NUM?: SortOrder
    E2_PREFIXO?: SortOrder
    E2_FORNECE?: SortOrder
    E2_LOJA?: SortOrder
    E2_PARCELA?: SortOrderInput | SortOrder
    E2_VENCTO?: SortOrderInput | SortOrder
    E2_BAIXA?: SortOrderInput | SortOrder
    E2_VALOR?: SortOrderInput | SortOrder
    E2_HIST?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type SE2010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    E2_FILIAL_E2_NUM_E2_PREFIXO_E2_FORNECE_E2_LOJA_E2_PARCELA?: SE2010E2_FILIALE2_NUME2_PREFIXOE2_FORNECEE2_LOJAE2_PARCELACompoundUniqueInput
    AND?: SE2010WhereInput | SE2010WhereInput[]
    OR?: SE2010WhereInput[]
    NOT?: SE2010WhereInput | SE2010WhereInput[]
    E2_FILIAL?: StringFilter<"SE2010"> | string
    E2_NUM?: StringFilter<"SE2010"> | string
    E2_PREFIXO?: StringFilter<"SE2010"> | string
    E2_FORNECE?: StringFilter<"SE2010"> | string
    E2_LOJA?: StringFilter<"SE2010"> | string
    E2_PARCELA?: StringNullableFilter<"SE2010"> | string | null
    E2_VENCTO?: StringNullableFilter<"SE2010"> | string | null
    E2_BAIXA?: StringNullableFilter<"SE2010"> | string | null
    E2_VALOR?: FloatNullableFilter<"SE2010"> | number | null
    E2_HIST?: StringNullableFilter<"SE2010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SE2010"> | string | null
  }, "R_E_C_N_O_" | "E2_FILIAL_E2_NUM_E2_PREFIXO_E2_FORNECE_E2_LOJA_E2_PARCELA">

  export type SE2010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    E2_FILIAL?: SortOrder
    E2_NUM?: SortOrder
    E2_PREFIXO?: SortOrder
    E2_FORNECE?: SortOrder
    E2_LOJA?: SortOrder
    E2_PARCELA?: SortOrderInput | SortOrder
    E2_VENCTO?: SortOrderInput | SortOrder
    E2_BAIXA?: SortOrderInput | SortOrder
    E2_VALOR?: SortOrderInput | SortOrder
    E2_HIST?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SE2010CountOrderByAggregateInput
    _avg?: SE2010AvgOrderByAggregateInput
    _max?: SE2010MaxOrderByAggregateInput
    _min?: SE2010MinOrderByAggregateInput
    _sum?: SE2010SumOrderByAggregateInput
  }

  export type SE2010ScalarWhereWithAggregatesInput = {
    AND?: SE2010ScalarWhereWithAggregatesInput | SE2010ScalarWhereWithAggregatesInput[]
    OR?: SE2010ScalarWhereWithAggregatesInput[]
    NOT?: SE2010ScalarWhereWithAggregatesInput | SE2010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SE2010"> | number
    E2_FILIAL?: StringWithAggregatesFilter<"SE2010"> | string
    E2_NUM?: StringWithAggregatesFilter<"SE2010"> | string
    E2_PREFIXO?: StringWithAggregatesFilter<"SE2010"> | string
    E2_FORNECE?: StringWithAggregatesFilter<"SE2010"> | string
    E2_LOJA?: StringWithAggregatesFilter<"SE2010"> | string
    E2_PARCELA?: StringNullableWithAggregatesFilter<"SE2010"> | string | null
    E2_VENCTO?: StringNullableWithAggregatesFilter<"SE2010"> | string | null
    E2_BAIXA?: StringNullableWithAggregatesFilter<"SE2010"> | string | null
    E2_VALOR?: FloatNullableWithAggregatesFilter<"SE2010"> | number | null
    E2_HIST?: StringNullableWithAggregatesFilter<"SE2010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SE2010"> | string | null
  }

  export type Z05010WhereInput = {
    AND?: Z05010WhereInput | Z05010WhereInput[]
    OR?: Z05010WhereInput[]
    NOT?: Z05010WhereInput | Z05010WhereInput[]
    R_E_C_N_O_?: IntFilter<"Z05010"> | number
    Z05_FILIAL?: StringFilter<"Z05010"> | string
    Z05_CHAVE?: StringFilter<"Z05010"> | string
    Z05_ROTINA?: StringNullableFilter<"Z05010"> | string | null
    Z05_CAMPO?: StringNullableFilter<"Z05010"> | string | null
    Z05_VALATU?: StringNullableFilter<"Z05010"> | string | null
    Z05_DATA?: StringNullableFilter<"Z05010"> | string | null
    Z05_HORA?: StringNullableFilter<"Z05010"> | string | null
    Z05_USER?: StringNullableFilter<"Z05010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z05010"> | string | null
  }

  export type Z05010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    Z05_FILIAL?: SortOrder
    Z05_CHAVE?: SortOrder
    Z05_ROTINA?: SortOrderInput | SortOrder
    Z05_CAMPO?: SortOrderInput | SortOrder
    Z05_VALATU?: SortOrderInput | SortOrder
    Z05_DATA?: SortOrderInput | SortOrder
    Z05_HORA?: SortOrderInput | SortOrder
    Z05_USER?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type Z05010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: Z05010WhereInput | Z05010WhereInput[]
    OR?: Z05010WhereInput[]
    NOT?: Z05010WhereInput | Z05010WhereInput[]
    Z05_FILIAL?: StringFilter<"Z05010"> | string
    Z05_CHAVE?: StringFilter<"Z05010"> | string
    Z05_ROTINA?: StringNullableFilter<"Z05010"> | string | null
    Z05_CAMPO?: StringNullableFilter<"Z05010"> | string | null
    Z05_VALATU?: StringNullableFilter<"Z05010"> | string | null
    Z05_DATA?: StringNullableFilter<"Z05010"> | string | null
    Z05_HORA?: StringNullableFilter<"Z05010"> | string | null
    Z05_USER?: StringNullableFilter<"Z05010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z05010"> | string | null
  }, "R_E_C_N_O_">

  export type Z05010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    Z05_FILIAL?: SortOrder
    Z05_CHAVE?: SortOrder
    Z05_ROTINA?: SortOrderInput | SortOrder
    Z05_CAMPO?: SortOrderInput | SortOrder
    Z05_VALATU?: SortOrderInput | SortOrder
    Z05_DATA?: SortOrderInput | SortOrder
    Z05_HORA?: SortOrderInput | SortOrder
    Z05_USER?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: Z05010CountOrderByAggregateInput
    _avg?: Z05010AvgOrderByAggregateInput
    _max?: Z05010MaxOrderByAggregateInput
    _min?: Z05010MinOrderByAggregateInput
    _sum?: Z05010SumOrderByAggregateInput
  }

  export type Z05010ScalarWhereWithAggregatesInput = {
    AND?: Z05010ScalarWhereWithAggregatesInput | Z05010ScalarWhereWithAggregatesInput[]
    OR?: Z05010ScalarWhereWithAggregatesInput[]
    NOT?: Z05010ScalarWhereWithAggregatesInput | Z05010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"Z05010"> | number
    Z05_FILIAL?: StringWithAggregatesFilter<"Z05010"> | string
    Z05_CHAVE?: StringWithAggregatesFilter<"Z05010"> | string
    Z05_ROTINA?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    Z05_CAMPO?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    Z05_VALATU?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    Z05_DATA?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    Z05_HORA?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    Z05_USER?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"Z05010"> | string | null
  }

  export type SYS_USRWhereInput = {
    AND?: SYS_USRWhereInput | SYS_USRWhereInput[]
    OR?: SYS_USRWhereInput[]
    NOT?: SYS_USRWhereInput | SYS_USRWhereInput[]
    R_E_C_N_O_?: IntFilter<"SYS_USR"> | number
    USR_ID?: StringFilter<"SYS_USR"> | string
    USR_NOME?: StringFilter<"SYS_USR"> | string
    USR_CODIGO?: StringFilter<"SYS_USR"> | string
    D_E_L_E_T_?: StringNullableFilter<"SYS_USR"> | string | null
  }

  export type SYS_USROrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    USR_ID?: SortOrder
    USR_NOME?: SortOrder
    USR_CODIGO?: SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type SYS_USRWhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: SYS_USRWhereInput | SYS_USRWhereInput[]
    OR?: SYS_USRWhereInput[]
    NOT?: SYS_USRWhereInput | SYS_USRWhereInput[]
    USR_ID?: StringFilter<"SYS_USR"> | string
    USR_NOME?: StringFilter<"SYS_USR"> | string
    USR_CODIGO?: StringFilter<"SYS_USR"> | string
    D_E_L_E_T_?: StringNullableFilter<"SYS_USR"> | string | null
  }, "R_E_C_N_O_">

  export type SYS_USROrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    USR_ID?: SortOrder
    USR_NOME?: SortOrder
    USR_CODIGO?: SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: SYS_USRCountOrderByAggregateInput
    _avg?: SYS_USRAvgOrderByAggregateInput
    _max?: SYS_USRMaxOrderByAggregateInput
    _min?: SYS_USRMinOrderByAggregateInput
    _sum?: SYS_USRSumOrderByAggregateInput
  }

  export type SYS_USRScalarWhereWithAggregatesInput = {
    AND?: SYS_USRScalarWhereWithAggregatesInput | SYS_USRScalarWhereWithAggregatesInput[]
    OR?: SYS_USRScalarWhereWithAggregatesInput[]
    NOT?: SYS_USRScalarWhereWithAggregatesInput | SYS_USRScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"SYS_USR"> | number
    USR_ID?: StringWithAggregatesFilter<"SYS_USR"> | string
    USR_NOME?: StringWithAggregatesFilter<"SYS_USR"> | string
    USR_CODIGO?: StringWithAggregatesFilter<"SYS_USR"> | string
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"SYS_USR"> | string | null
  }

  export type Z10010WhereInput = {
    AND?: Z10010WhereInput | Z10010WhereInput[]
    OR?: Z10010WhereInput[]
    NOT?: Z10010WhereInput | Z10010WhereInput[]
    R_E_C_N_O_?: IntFilter<"Z10010"> | number
    Z10_TIPO?: StringFilter<"Z10010"> | string
    Z10_CHAVE?: StringFilter<"Z10010"> | string
    Z10_VENCTO?: StringNullableFilter<"Z10010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z10010"> | string | null
  }

  export type Z10010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    Z10_TIPO?: SortOrder
    Z10_CHAVE?: SortOrder
    Z10_VENCTO?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type Z10010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: Z10010WhereInput | Z10010WhereInput[]
    OR?: Z10010WhereInput[]
    NOT?: Z10010WhereInput | Z10010WhereInput[]
    Z10_TIPO?: StringFilter<"Z10010"> | string
    Z10_CHAVE?: StringFilter<"Z10010"> | string
    Z10_VENCTO?: StringNullableFilter<"Z10010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z10010"> | string | null
  }, "R_E_C_N_O_">

  export type Z10010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    Z10_TIPO?: SortOrder
    Z10_CHAVE?: SortOrder
    Z10_VENCTO?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: Z10010CountOrderByAggregateInput
    _avg?: Z10010AvgOrderByAggregateInput
    _max?: Z10010MaxOrderByAggregateInput
    _min?: Z10010MinOrderByAggregateInput
    _sum?: Z10010SumOrderByAggregateInput
  }

  export type Z10010ScalarWhereWithAggregatesInput = {
    AND?: Z10010ScalarWhereWithAggregatesInput | Z10010ScalarWhereWithAggregatesInput[]
    OR?: Z10010ScalarWhereWithAggregatesInput[]
    NOT?: Z10010ScalarWhereWithAggregatesInput | Z10010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"Z10010"> | number
    Z10_TIPO?: StringWithAggregatesFilter<"Z10010"> | string
    Z10_CHAVE?: StringWithAggregatesFilter<"Z10010"> | string
    Z10_VENCTO?: StringNullableWithAggregatesFilter<"Z10010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"Z10010"> | string | null
  }

  export type Z07010WhereInput = {
    AND?: Z07010WhereInput | Z07010WhereInput[]
    OR?: Z07010WhereInput[]
    NOT?: Z07010WhereInput | Z07010WhereInput[]
    R_E_C_N_O_?: IntFilter<"Z07010"> | number
    Z07_CHAVE?: StringFilter<"Z07010"> | string
    Z07_DESC?: StringNullableFilter<"Z07010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z07010"> | string | null
  }

  export type Z07010OrderByWithRelationInput = {
    R_E_C_N_O_?: SortOrder
    Z07_CHAVE?: SortOrder
    Z07_DESC?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
  }

  export type Z07010WhereUniqueInput = Prisma.AtLeast<{
    R_E_C_N_O_?: number
    AND?: Z07010WhereInput | Z07010WhereInput[]
    OR?: Z07010WhereInput[]
    NOT?: Z07010WhereInput | Z07010WhereInput[]
    Z07_CHAVE?: StringFilter<"Z07010"> | string
    Z07_DESC?: StringNullableFilter<"Z07010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"Z07010"> | string | null
  }, "R_E_C_N_O_">

  export type Z07010OrderByWithAggregationInput = {
    R_E_C_N_O_?: SortOrder
    Z07_CHAVE?: SortOrder
    Z07_DESC?: SortOrderInput | SortOrder
    D_E_L_E_T_?: SortOrderInput | SortOrder
    _count?: Z07010CountOrderByAggregateInput
    _avg?: Z07010AvgOrderByAggregateInput
    _max?: Z07010MaxOrderByAggregateInput
    _min?: Z07010MinOrderByAggregateInput
    _sum?: Z07010SumOrderByAggregateInput
  }

  export type Z07010ScalarWhereWithAggregatesInput = {
    AND?: Z07010ScalarWhereWithAggregatesInput | Z07010ScalarWhereWithAggregatesInput[]
    OR?: Z07010ScalarWhereWithAggregatesInput[]
    NOT?: Z07010ScalarWhereWithAggregatesInput | Z07010ScalarWhereWithAggregatesInput[]
    R_E_C_N_O_?: IntWithAggregatesFilter<"Z07010"> | number
    Z07_CHAVE?: StringWithAggregatesFilter<"Z07010"> | string
    Z07_DESC?: StringNullableWithAggregatesFilter<"Z07010"> | string | null
    D_E_L_E_T_?: StringNullableWithAggregatesFilter<"Z07010"> | string | null
  }

  export type SB1010CreateInput = {
    B1_FILIAL: string
    B1_COD: string
    B1_DESC: string
    B1_TIPO?: string | null
    B1_UM?: string | null
    B1_GRUPO?: string | null
    B1_PRV1?: number | null
    B1_LOCPAD?: string | null
    B1_MARCA?: string | null
    B1_MSBLQL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SB1010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    B1_FILIAL: string
    B1_COD: string
    B1_DESC: string
    B1_TIPO?: string | null
    B1_UM?: string | null
    B1_GRUPO?: string | null
    B1_PRV1?: number | null
    B1_LOCPAD?: string | null
    B1_MARCA?: string | null
    B1_MSBLQL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SB1010UpdateInput = {
    B1_FILIAL?: StringFieldUpdateOperationsInput | string
    B1_COD?: StringFieldUpdateOperationsInput | string
    B1_DESC?: StringFieldUpdateOperationsInput | string
    B1_TIPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_UM?: NullableStringFieldUpdateOperationsInput | string | null
    B1_GRUPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_PRV1?: NullableFloatFieldUpdateOperationsInput | number | null
    B1_LOCPAD?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MARCA?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MSBLQL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SB1010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    B1_FILIAL?: StringFieldUpdateOperationsInput | string
    B1_COD?: StringFieldUpdateOperationsInput | string
    B1_DESC?: StringFieldUpdateOperationsInput | string
    B1_TIPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_UM?: NullableStringFieldUpdateOperationsInput | string | null
    B1_GRUPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_PRV1?: NullableFloatFieldUpdateOperationsInput | number | null
    B1_LOCPAD?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MARCA?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MSBLQL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SB1010CreateManyInput = {
    B1_FILIAL: string
    B1_COD: string
    B1_DESC: string
    B1_TIPO?: string | null
    B1_UM?: string | null
    B1_GRUPO?: string | null
    B1_PRV1?: number | null
    B1_LOCPAD?: string | null
    B1_MARCA?: string | null
    B1_MSBLQL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SB1010UpdateManyMutationInput = {
    B1_FILIAL?: StringFieldUpdateOperationsInput | string
    B1_COD?: StringFieldUpdateOperationsInput | string
    B1_DESC?: StringFieldUpdateOperationsInput | string
    B1_TIPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_UM?: NullableStringFieldUpdateOperationsInput | string | null
    B1_GRUPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_PRV1?: NullableFloatFieldUpdateOperationsInput | number | null
    B1_LOCPAD?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MARCA?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MSBLQL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SB1010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    B1_FILIAL?: StringFieldUpdateOperationsInput | string
    B1_COD?: StringFieldUpdateOperationsInput | string
    B1_DESC?: StringFieldUpdateOperationsInput | string
    B1_TIPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_UM?: NullableStringFieldUpdateOperationsInput | string | null
    B1_GRUPO?: NullableStringFieldUpdateOperationsInput | string | null
    B1_PRV1?: NullableFloatFieldUpdateOperationsInput | number | null
    B1_LOCPAD?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MARCA?: NullableStringFieldUpdateOperationsInput | string | null
    B1_MSBLQL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF1010CreateInput = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
    SD1?: SD1010CreateNestedManyWithoutSF1Input
    SA2?: SA2010CreateNestedOneWithoutSF1Input
  }

  export type SF1010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_FORNECE: string
    F1_LOJA: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
    SD1?: SD1010UncheckedCreateNestedManyWithoutSF1Input
  }

  export type SF1010UpdateInput = {
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UpdateManyWithoutSF1NestedInput
    SA2?: SA2010UpdateOneWithoutSF1NestedInput
  }

  export type SF1010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_FORNECE?: StringFieldUpdateOperationsInput | string
    F1_LOJA?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UncheckedUpdateManyWithoutSF1NestedInput
  }

  export type SF1010CreateManyInput = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_FORNECE: string
    F1_LOJA: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
  }

  export type SF1010UpdateManyMutationInput = {
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF1010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_FORNECE?: StringFieldUpdateOperationsInput | string
    F1_LOJA?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010CreateInput = {
    D1_TOTAL: number
    D_E_L_E_T_?: string | null
    SF1?: SF1010CreateNestedOneWithoutSD1Input
    SF4?: SF4010CreateNestedOneWithoutSD1Input
  }

  export type SD1010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    D1_FILIAL: string
    D1_DOC: string
    D1_SERIE: string
    D1_FORNECE: string
    D1_LOJA: string
    D1_TOTAL: number
    D1_TES?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SD1010UpdateInput = {
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SF1?: SF1010UpdateOneWithoutSD1NestedInput
    SF4?: SF4010UpdateOneWithoutSD1NestedInput
  }

  export type SD1010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_FILIAL?: StringFieldUpdateOperationsInput | string
    D1_DOC?: StringFieldUpdateOperationsInput | string
    D1_SERIE?: StringFieldUpdateOperationsInput | string
    D1_FORNECE?: StringFieldUpdateOperationsInput | string
    D1_LOJA?: StringFieldUpdateOperationsInput | string
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D1_TES?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010CreateManyInput = {
    D1_FILIAL: string
    D1_DOC: string
    D1_SERIE: string
    D1_FORNECE: string
    D1_LOJA: string
    D1_TOTAL: number
    D1_TES?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SD1010UpdateManyMutationInput = {
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_FILIAL?: StringFieldUpdateOperationsInput | string
    D1_DOC?: StringFieldUpdateOperationsInput | string
    D1_SERIE?: StringFieldUpdateOperationsInput | string
    D1_FORNECE?: StringFieldUpdateOperationsInput | string
    D1_LOJA?: StringFieldUpdateOperationsInput | string
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D1_TES?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF4010CreateInput = {
    F4_CODIGO: string
    F4_TRANFIL?: string | null
    D_E_L_E_T_?: string | null
    SD1?: SD1010CreateNestedManyWithoutSF4Input
  }

  export type SF4010UncheckedCreateInput = {
    F4_CODIGO: string
    F4_TRANFIL?: string | null
    D_E_L_E_T_?: string | null
    SD1?: SD1010UncheckedCreateNestedManyWithoutSF4Input
  }

  export type SF4010UpdateInput = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UpdateManyWithoutSF4NestedInput
  }

  export type SF4010UncheckedUpdateInput = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UncheckedUpdateManyWithoutSF4NestedInput
  }

  export type SF4010CreateManyInput = {
    F4_CODIGO: string
    F4_TRANFIL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SF4010UpdateManyMutationInput = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF4010UncheckedUpdateManyInput = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SA2010CreateInput = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC?: string | null
    D_E_L_E_T_?: string | null
    SF1?: SF1010CreateNestedManyWithoutSA2Input
  }

  export type SA2010UncheckedCreateInput = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC?: string | null
    D_E_L_E_T_?: string | null
    SF1?: SF1010UncheckedCreateNestedManyWithoutSA2Input
  }

  export type SA2010UpdateInput = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SF1?: SF1010UpdateManyWithoutSA2NestedInput
  }

  export type SA2010UncheckedUpdateInput = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SF1?: SF1010UncheckedUpdateManyWithoutSA2NestedInput
  }

  export type SA2010CreateManyInput = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SA2010UpdateManyMutationInput = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SA2010UncheckedUpdateManyInput = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SC7010CreateInput = {
    C7_FILIAL: string
    C7_NUM: string
    C7_ITEM: string
    C7_PRODUTO: string
    C7_EMISSAO?: string | null
    C7_OBS?: string | null
    C7_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SC7010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    C7_FILIAL: string
    C7_NUM: string
    C7_ITEM: string
    C7_PRODUTO: string
    C7_EMISSAO?: string | null
    C7_OBS?: string | null
    C7_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SC7010UpdateInput = {
    C7_FILIAL?: StringFieldUpdateOperationsInput | string
    C7_NUM?: StringFieldUpdateOperationsInput | string
    C7_ITEM?: StringFieldUpdateOperationsInput | string
    C7_PRODUTO?: StringFieldUpdateOperationsInput | string
    C7_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    C7_OBS?: NullableStringFieldUpdateOperationsInput | string | null
    C7_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SC7010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    C7_FILIAL?: StringFieldUpdateOperationsInput | string
    C7_NUM?: StringFieldUpdateOperationsInput | string
    C7_ITEM?: StringFieldUpdateOperationsInput | string
    C7_PRODUTO?: StringFieldUpdateOperationsInput | string
    C7_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    C7_OBS?: NullableStringFieldUpdateOperationsInput | string | null
    C7_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SC7010CreateManyInput = {
    C7_FILIAL: string
    C7_NUM: string
    C7_ITEM: string
    C7_PRODUTO: string
    C7_EMISSAO?: string | null
    C7_OBS?: string | null
    C7_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SC7010UpdateManyMutationInput = {
    C7_FILIAL?: StringFieldUpdateOperationsInput | string
    C7_NUM?: StringFieldUpdateOperationsInput | string
    C7_ITEM?: StringFieldUpdateOperationsInput | string
    C7_PRODUTO?: StringFieldUpdateOperationsInput | string
    C7_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    C7_OBS?: NullableStringFieldUpdateOperationsInput | string | null
    C7_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SC7010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    C7_FILIAL?: StringFieldUpdateOperationsInput | string
    C7_NUM?: StringFieldUpdateOperationsInput | string
    C7_ITEM?: StringFieldUpdateOperationsInput | string
    C7_PRODUTO?: StringFieldUpdateOperationsInput | string
    C7_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    C7_OBS?: NullableStringFieldUpdateOperationsInput | string | null
    C7_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SE2010CreateInput = {
    E2_FILIAL: string
    E2_NUM: string
    E2_PREFIXO: string
    E2_FORNECE: string
    E2_LOJA: string
    E2_PARCELA?: string | null
    E2_VENCTO?: string | null
    E2_BAIXA?: string | null
    E2_VALOR?: number | null
    E2_HIST?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SE2010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    E2_FILIAL: string
    E2_NUM: string
    E2_PREFIXO: string
    E2_FORNECE: string
    E2_LOJA: string
    E2_PARCELA?: string | null
    E2_VENCTO?: string | null
    E2_BAIXA?: string | null
    E2_VALOR?: number | null
    E2_HIST?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SE2010UpdateInput = {
    E2_FILIAL?: StringFieldUpdateOperationsInput | string
    E2_NUM?: StringFieldUpdateOperationsInput | string
    E2_PREFIXO?: StringFieldUpdateOperationsInput | string
    E2_FORNECE?: StringFieldUpdateOperationsInput | string
    E2_LOJA?: StringFieldUpdateOperationsInput | string
    E2_PARCELA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    E2_BAIXA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VALOR?: NullableFloatFieldUpdateOperationsInput | number | null
    E2_HIST?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SE2010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    E2_FILIAL?: StringFieldUpdateOperationsInput | string
    E2_NUM?: StringFieldUpdateOperationsInput | string
    E2_PREFIXO?: StringFieldUpdateOperationsInput | string
    E2_FORNECE?: StringFieldUpdateOperationsInput | string
    E2_LOJA?: StringFieldUpdateOperationsInput | string
    E2_PARCELA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    E2_BAIXA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VALOR?: NullableFloatFieldUpdateOperationsInput | number | null
    E2_HIST?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SE2010CreateManyInput = {
    E2_FILIAL: string
    E2_NUM: string
    E2_PREFIXO: string
    E2_FORNECE: string
    E2_LOJA: string
    E2_PARCELA?: string | null
    E2_VENCTO?: string | null
    E2_BAIXA?: string | null
    E2_VALOR?: number | null
    E2_HIST?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SE2010UpdateManyMutationInput = {
    E2_FILIAL?: StringFieldUpdateOperationsInput | string
    E2_NUM?: StringFieldUpdateOperationsInput | string
    E2_PREFIXO?: StringFieldUpdateOperationsInput | string
    E2_FORNECE?: StringFieldUpdateOperationsInput | string
    E2_LOJA?: StringFieldUpdateOperationsInput | string
    E2_PARCELA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    E2_BAIXA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VALOR?: NullableFloatFieldUpdateOperationsInput | number | null
    E2_HIST?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SE2010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    E2_FILIAL?: StringFieldUpdateOperationsInput | string
    E2_NUM?: StringFieldUpdateOperationsInput | string
    E2_PREFIXO?: StringFieldUpdateOperationsInput | string
    E2_FORNECE?: StringFieldUpdateOperationsInput | string
    E2_LOJA?: StringFieldUpdateOperationsInput | string
    E2_PARCELA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    E2_BAIXA?: NullableStringFieldUpdateOperationsInput | string | null
    E2_VALOR?: NullableFloatFieldUpdateOperationsInput | number | null
    E2_HIST?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z05010CreateInput = {
    Z05_FILIAL: string
    Z05_CHAVE: string
    Z05_ROTINA?: string | null
    Z05_CAMPO?: string | null
    Z05_VALATU?: string | null
    Z05_DATA?: string | null
    Z05_HORA?: string | null
    Z05_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z05010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    Z05_FILIAL: string
    Z05_CHAVE: string
    Z05_ROTINA?: string | null
    Z05_CAMPO?: string | null
    Z05_VALATU?: string | null
    Z05_DATA?: string | null
    Z05_HORA?: string | null
    Z05_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z05010UpdateInput = {
    Z05_FILIAL?: StringFieldUpdateOperationsInput | string
    Z05_CHAVE?: StringFieldUpdateOperationsInput | string
    Z05_ROTINA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_CAMPO?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_VALATU?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_DATA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_HORA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z05010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z05_FILIAL?: StringFieldUpdateOperationsInput | string
    Z05_CHAVE?: StringFieldUpdateOperationsInput | string
    Z05_ROTINA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_CAMPO?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_VALATU?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_DATA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_HORA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z05010CreateManyInput = {
    Z05_FILIAL: string
    Z05_CHAVE: string
    Z05_ROTINA?: string | null
    Z05_CAMPO?: string | null
    Z05_VALATU?: string | null
    Z05_DATA?: string | null
    Z05_HORA?: string | null
    Z05_USER?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z05010UpdateManyMutationInput = {
    Z05_FILIAL?: StringFieldUpdateOperationsInput | string
    Z05_CHAVE?: StringFieldUpdateOperationsInput | string
    Z05_ROTINA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_CAMPO?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_VALATU?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_DATA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_HORA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z05010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z05_FILIAL?: StringFieldUpdateOperationsInput | string
    Z05_CHAVE?: StringFieldUpdateOperationsInput | string
    Z05_ROTINA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_CAMPO?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_VALATU?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_DATA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_HORA?: NullableStringFieldUpdateOperationsInput | string | null
    Z05_USER?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SYS_USRCreateInput = {
    USR_ID: string
    USR_NOME: string
    USR_CODIGO: string
    D_E_L_E_T_?: string | null
  }

  export type SYS_USRUncheckedCreateInput = {
    R_E_C_N_O_?: number
    USR_ID: string
    USR_NOME: string
    USR_CODIGO: string
    D_E_L_E_T_?: string | null
  }

  export type SYS_USRUpdateInput = {
    USR_ID?: StringFieldUpdateOperationsInput | string
    USR_NOME?: StringFieldUpdateOperationsInput | string
    USR_CODIGO?: StringFieldUpdateOperationsInput | string
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SYS_USRUncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    USR_ID?: StringFieldUpdateOperationsInput | string
    USR_NOME?: StringFieldUpdateOperationsInput | string
    USR_CODIGO?: StringFieldUpdateOperationsInput | string
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SYS_USRCreateManyInput = {
    USR_ID: string
    USR_NOME: string
    USR_CODIGO: string
    D_E_L_E_T_?: string | null
  }

  export type SYS_USRUpdateManyMutationInput = {
    USR_ID?: StringFieldUpdateOperationsInput | string
    USR_NOME?: StringFieldUpdateOperationsInput | string
    USR_CODIGO?: StringFieldUpdateOperationsInput | string
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SYS_USRUncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    USR_ID?: StringFieldUpdateOperationsInput | string
    USR_NOME?: StringFieldUpdateOperationsInput | string
    USR_CODIGO?: StringFieldUpdateOperationsInput | string
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z10010CreateInput = {
    Z10_TIPO: string
    Z10_CHAVE: string
    Z10_VENCTO?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z10010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    Z10_TIPO: string
    Z10_CHAVE: string
    Z10_VENCTO?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z10010UpdateInput = {
    Z10_TIPO?: StringFieldUpdateOperationsInput | string
    Z10_CHAVE?: StringFieldUpdateOperationsInput | string
    Z10_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z10010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z10_TIPO?: StringFieldUpdateOperationsInput | string
    Z10_CHAVE?: StringFieldUpdateOperationsInput | string
    Z10_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z10010CreateManyInput = {
    Z10_TIPO: string
    Z10_CHAVE: string
    Z10_VENCTO?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z10010UpdateManyMutationInput = {
    Z10_TIPO?: StringFieldUpdateOperationsInput | string
    Z10_CHAVE?: StringFieldUpdateOperationsInput | string
    Z10_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z10010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z10_TIPO?: StringFieldUpdateOperationsInput | string
    Z10_CHAVE?: StringFieldUpdateOperationsInput | string
    Z10_VENCTO?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z07010CreateInput = {
    Z07_CHAVE: string
    Z07_DESC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z07010UncheckedCreateInput = {
    R_E_C_N_O_?: number
    Z07_CHAVE: string
    Z07_DESC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z07010UpdateInput = {
    Z07_CHAVE?: StringFieldUpdateOperationsInput | string
    Z07_DESC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z07010UncheckedUpdateInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z07_CHAVE?: StringFieldUpdateOperationsInput | string
    Z07_DESC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z07010CreateManyInput = {
    Z07_CHAVE: string
    Z07_DESC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type Z07010UpdateManyMutationInput = {
    Z07_CHAVE?: StringFieldUpdateOperationsInput | string
    Z07_DESC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type Z07010UncheckedUpdateManyInput = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    Z07_CHAVE?: StringFieldUpdateOperationsInput | string
    Z07_DESC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SB1010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    B1_FILIAL?: SortOrder
    B1_COD?: SortOrder
    B1_DESC?: SortOrder
    B1_TIPO?: SortOrder
    B1_UM?: SortOrder
    B1_GRUPO?: SortOrder
    B1_PRV1?: SortOrder
    B1_LOCPAD?: SortOrder
    B1_MARCA?: SortOrder
    B1_MSBLQL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SB1010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    B1_PRV1?: SortOrder
  }

  export type SB1010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    B1_FILIAL?: SortOrder
    B1_COD?: SortOrder
    B1_DESC?: SortOrder
    B1_TIPO?: SortOrder
    B1_UM?: SortOrder
    B1_GRUPO?: SortOrder
    B1_PRV1?: SortOrder
    B1_LOCPAD?: SortOrder
    B1_MARCA?: SortOrder
    B1_MSBLQL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SB1010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    B1_FILIAL?: SortOrder
    B1_COD?: SortOrder
    B1_DESC?: SortOrder
    B1_TIPO?: SortOrder
    B1_UM?: SortOrder
    B1_GRUPO?: SortOrder
    B1_PRV1?: SortOrder
    B1_LOCPAD?: SortOrder
    B1_MARCA?: SortOrder
    B1_MSBLQL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SB1010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    B1_PRV1?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SD1010ListRelationFilter = {
    every?: SD1010WhereInput
    some?: SD1010WhereInput
    none?: SD1010WhereInput
  }

  export type SA2010NullableScalarRelationFilter = {
    is?: SA2010WhereInput | null
    isNot?: SA2010WhereInput | null
  }

  export type SD1010OrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SF1010F1_FILIALF1_DOCF1_SERIEF1_FORNECEF1_LOJACompoundUniqueInput = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_FORNECE: string
    F1_LOJA: string
  }

  export type SF1010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    F1_FILIAL?: SortOrder
    F1_DOC?: SortOrder
    F1_SERIE?: SortOrder
    F1_FORNECE?: SortOrder
    F1_LOJA?: SortOrder
    F1_STATUS?: SortOrder
    F1_EMISSAO?: SortOrder
    F1_DTDIGIT?: SortOrder
    F1_RECBMTO?: SortOrder
    F1_USERLGI?: SortOrder
    D_E_L_E_T_?: SortOrder
    F1_XTIPO?: SortOrder
    F1_XPRIOR?: SortOrder
    F1_XORI?: SortOrder
    F1_XUSRRA?: SortOrder
    F1_XOBS?: SortOrder
    F1_XREV?: SortOrder
    F1_ZOBSREV?: SortOrder
  }

  export type SF1010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type SF1010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    F1_FILIAL?: SortOrder
    F1_DOC?: SortOrder
    F1_SERIE?: SortOrder
    F1_FORNECE?: SortOrder
    F1_LOJA?: SortOrder
    F1_STATUS?: SortOrder
    F1_EMISSAO?: SortOrder
    F1_DTDIGIT?: SortOrder
    F1_RECBMTO?: SortOrder
    F1_USERLGI?: SortOrder
    D_E_L_E_T_?: SortOrder
    F1_XTIPO?: SortOrder
    F1_XPRIOR?: SortOrder
    F1_XORI?: SortOrder
    F1_XUSRRA?: SortOrder
    F1_XOBS?: SortOrder
    F1_XREV?: SortOrder
    F1_ZOBSREV?: SortOrder
  }

  export type SF1010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    F1_FILIAL?: SortOrder
    F1_DOC?: SortOrder
    F1_SERIE?: SortOrder
    F1_FORNECE?: SortOrder
    F1_LOJA?: SortOrder
    F1_STATUS?: SortOrder
    F1_EMISSAO?: SortOrder
    F1_DTDIGIT?: SortOrder
    F1_RECBMTO?: SortOrder
    F1_USERLGI?: SortOrder
    D_E_L_E_T_?: SortOrder
    F1_XTIPO?: SortOrder
    F1_XPRIOR?: SortOrder
    F1_XORI?: SortOrder
    F1_XUSRRA?: SortOrder
    F1_XOBS?: SortOrder
    F1_XREV?: SortOrder
    F1_ZOBSREV?: SortOrder
  }

  export type SF1010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SF1010NullableScalarRelationFilter = {
    is?: SF1010WhereInput | null
    isNot?: SF1010WhereInput | null
  }

  export type SF4010NullableScalarRelationFilter = {
    is?: SF4010WhereInput | null
    isNot?: SF4010WhereInput | null
  }

  export type SD1010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    D1_FILIAL?: SortOrder
    D1_DOC?: SortOrder
    D1_SERIE?: SortOrder
    D1_FORNECE?: SortOrder
    D1_LOJA?: SortOrder
    D1_TOTAL?: SortOrder
    D1_TES?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SD1010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    D1_TOTAL?: SortOrder
  }

  export type SD1010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    D1_FILIAL?: SortOrder
    D1_DOC?: SortOrder
    D1_SERIE?: SortOrder
    D1_FORNECE?: SortOrder
    D1_LOJA?: SortOrder
    D1_TOTAL?: SortOrder
    D1_TES?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SD1010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    D1_FILIAL?: SortOrder
    D1_DOC?: SortOrder
    D1_SERIE?: SortOrder
    D1_FORNECE?: SortOrder
    D1_LOJA?: SortOrder
    D1_TOTAL?: SortOrder
    D1_TES?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SD1010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    D1_TOTAL?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SF4010CountOrderByAggregateInput = {
    F4_CODIGO?: SortOrder
    F4_TRANFIL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SF4010MaxOrderByAggregateInput = {
    F4_CODIGO?: SortOrder
    F4_TRANFIL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SF4010MinOrderByAggregateInput = {
    F4_CODIGO?: SortOrder
    F4_TRANFIL?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SF1010ListRelationFilter = {
    every?: SF1010WhereInput
    some?: SF1010WhereInput
    none?: SF1010WhereInput
  }

  export type SF1010OrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SA2010A2_CODA2_LOJACompoundUniqueInput = {
    A2_COD: string
    A2_LOJA: string
  }

  export type SA2010CountOrderByAggregateInput = {
    A2_COD?: SortOrder
    A2_LOJA?: SortOrder
    A2_NOME?: SortOrder
    A2_CGC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SA2010MaxOrderByAggregateInput = {
    A2_COD?: SortOrder
    A2_LOJA?: SortOrder
    A2_NOME?: SortOrder
    A2_CGC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SA2010MinOrderByAggregateInput = {
    A2_COD?: SortOrder
    A2_LOJA?: SortOrder
    A2_NOME?: SortOrder
    A2_CGC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SC7010C7_FILIALC7_NUMC7_ITEMC7_PRODUTOCompoundUniqueInput = {
    C7_FILIAL: string
    C7_NUM: string
    C7_ITEM: string
    C7_PRODUTO: string
  }

  export type SC7010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    C7_FILIAL?: SortOrder
    C7_NUM?: SortOrder
    C7_ITEM?: SortOrder
    C7_PRODUTO?: SortOrder
    C7_EMISSAO?: SortOrder
    C7_OBS?: SortOrder
    C7_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SC7010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type SC7010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    C7_FILIAL?: SortOrder
    C7_NUM?: SortOrder
    C7_ITEM?: SortOrder
    C7_PRODUTO?: SortOrder
    C7_EMISSAO?: SortOrder
    C7_OBS?: SortOrder
    C7_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SC7010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    C7_FILIAL?: SortOrder
    C7_NUM?: SortOrder
    C7_ITEM?: SortOrder
    C7_PRODUTO?: SortOrder
    C7_EMISSAO?: SortOrder
    C7_OBS?: SortOrder
    C7_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SC7010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type SE2010E2_FILIALE2_NUME2_PREFIXOE2_FORNECEE2_LOJAE2_PARCELACompoundUniqueInput = {
    E2_FILIAL: string
    E2_NUM: string
    E2_PREFIXO: string
    E2_FORNECE: string
    E2_LOJA: string
    E2_PARCELA: string
  }

  export type SE2010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    E2_FILIAL?: SortOrder
    E2_NUM?: SortOrder
    E2_PREFIXO?: SortOrder
    E2_FORNECE?: SortOrder
    E2_LOJA?: SortOrder
    E2_PARCELA?: SortOrder
    E2_VENCTO?: SortOrder
    E2_BAIXA?: SortOrder
    E2_VALOR?: SortOrder
    E2_HIST?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SE2010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    E2_VALOR?: SortOrder
  }

  export type SE2010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    E2_FILIAL?: SortOrder
    E2_NUM?: SortOrder
    E2_PREFIXO?: SortOrder
    E2_FORNECE?: SortOrder
    E2_LOJA?: SortOrder
    E2_PARCELA?: SortOrder
    E2_VENCTO?: SortOrder
    E2_BAIXA?: SortOrder
    E2_VALOR?: SortOrder
    E2_HIST?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SE2010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    E2_FILIAL?: SortOrder
    E2_NUM?: SortOrder
    E2_PREFIXO?: SortOrder
    E2_FORNECE?: SortOrder
    E2_LOJA?: SortOrder
    E2_PARCELA?: SortOrder
    E2_VENCTO?: SortOrder
    E2_BAIXA?: SortOrder
    E2_VALOR?: SortOrder
    E2_HIST?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SE2010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    E2_VALOR?: SortOrder
  }

  export type Z05010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z05_FILIAL?: SortOrder
    Z05_CHAVE?: SortOrder
    Z05_ROTINA?: SortOrder
    Z05_CAMPO?: SortOrder
    Z05_VALATU?: SortOrder
    Z05_DATA?: SortOrder
    Z05_HORA?: SortOrder
    Z05_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z05010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type Z05010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z05_FILIAL?: SortOrder
    Z05_CHAVE?: SortOrder
    Z05_ROTINA?: SortOrder
    Z05_CAMPO?: SortOrder
    Z05_VALATU?: SortOrder
    Z05_DATA?: SortOrder
    Z05_HORA?: SortOrder
    Z05_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z05010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z05_FILIAL?: SortOrder
    Z05_CHAVE?: SortOrder
    Z05_ROTINA?: SortOrder
    Z05_CAMPO?: SortOrder
    Z05_VALATU?: SortOrder
    Z05_DATA?: SortOrder
    Z05_HORA?: SortOrder
    Z05_USER?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z05010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type SYS_USRCountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    USR_ID?: SortOrder
    USR_NOME?: SortOrder
    USR_CODIGO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SYS_USRAvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type SYS_USRMaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    USR_ID?: SortOrder
    USR_NOME?: SortOrder
    USR_CODIGO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SYS_USRMinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    USR_ID?: SortOrder
    USR_NOME?: SortOrder
    USR_CODIGO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type SYS_USRSumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type Z10010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z10_TIPO?: SortOrder
    Z10_CHAVE?: SortOrder
    Z10_VENCTO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z10010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type Z10010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z10_TIPO?: SortOrder
    Z10_CHAVE?: SortOrder
    Z10_VENCTO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z10010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z10_TIPO?: SortOrder
    Z10_CHAVE?: SortOrder
    Z10_VENCTO?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z10010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type Z07010CountOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z07_CHAVE?: SortOrder
    Z07_DESC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z07010AvgOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type Z07010MaxOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z07_CHAVE?: SortOrder
    Z07_DESC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z07010MinOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
    Z07_CHAVE?: SortOrder
    Z07_DESC?: SortOrder
    D_E_L_E_T_?: SortOrder
  }

  export type Z07010SumOrderByAggregateInput = {
    R_E_C_N_O_?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SD1010CreateNestedManyWithoutSF1Input = {
    create?: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input> | SD1010CreateWithoutSF1Input[] | SD1010UncheckedCreateWithoutSF1Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF1Input | SD1010CreateOrConnectWithoutSF1Input[]
    createMany?: SD1010CreateManySF1InputEnvelope
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
  }

  export type SA2010CreateNestedOneWithoutSF1Input = {
    create?: XOR<SA2010CreateWithoutSF1Input, SA2010UncheckedCreateWithoutSF1Input>
    connectOrCreate?: SA2010CreateOrConnectWithoutSF1Input
    connect?: SA2010WhereUniqueInput
  }

  export type SD1010UncheckedCreateNestedManyWithoutSF1Input = {
    create?: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input> | SD1010CreateWithoutSF1Input[] | SD1010UncheckedCreateWithoutSF1Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF1Input | SD1010CreateOrConnectWithoutSF1Input[]
    createMany?: SD1010CreateManySF1InputEnvelope
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
  }

  export type SD1010UpdateManyWithoutSF1NestedInput = {
    create?: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input> | SD1010CreateWithoutSF1Input[] | SD1010UncheckedCreateWithoutSF1Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF1Input | SD1010CreateOrConnectWithoutSF1Input[]
    upsert?: SD1010UpsertWithWhereUniqueWithoutSF1Input | SD1010UpsertWithWhereUniqueWithoutSF1Input[]
    createMany?: SD1010CreateManySF1InputEnvelope
    set?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    disconnect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    delete?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    update?: SD1010UpdateWithWhereUniqueWithoutSF1Input | SD1010UpdateWithWhereUniqueWithoutSF1Input[]
    updateMany?: SD1010UpdateManyWithWhereWithoutSF1Input | SD1010UpdateManyWithWhereWithoutSF1Input[]
    deleteMany?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
  }

  export type SA2010UpdateOneWithoutSF1NestedInput = {
    create?: XOR<SA2010CreateWithoutSF1Input, SA2010UncheckedCreateWithoutSF1Input>
    connectOrCreate?: SA2010CreateOrConnectWithoutSF1Input
    upsert?: SA2010UpsertWithoutSF1Input
    disconnect?: SA2010WhereInput | boolean
    delete?: SA2010WhereInput | boolean
    connect?: SA2010WhereUniqueInput
    update?: XOR<XOR<SA2010UpdateToOneWithWhereWithoutSF1Input, SA2010UpdateWithoutSF1Input>, SA2010UncheckedUpdateWithoutSF1Input>
  }

  export type SD1010UncheckedUpdateManyWithoutSF1NestedInput = {
    create?: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input> | SD1010CreateWithoutSF1Input[] | SD1010UncheckedCreateWithoutSF1Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF1Input | SD1010CreateOrConnectWithoutSF1Input[]
    upsert?: SD1010UpsertWithWhereUniqueWithoutSF1Input | SD1010UpsertWithWhereUniqueWithoutSF1Input[]
    createMany?: SD1010CreateManySF1InputEnvelope
    set?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    disconnect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    delete?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    update?: SD1010UpdateWithWhereUniqueWithoutSF1Input | SD1010UpdateWithWhereUniqueWithoutSF1Input[]
    updateMany?: SD1010UpdateManyWithWhereWithoutSF1Input | SD1010UpdateManyWithWhereWithoutSF1Input[]
    deleteMany?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
  }

  export type SF1010CreateNestedOneWithoutSD1Input = {
    create?: XOR<SF1010CreateWithoutSD1Input, SF1010UncheckedCreateWithoutSD1Input>
    connectOrCreate?: SF1010CreateOrConnectWithoutSD1Input
    connect?: SF1010WhereUniqueInput
  }

  export type SF4010CreateNestedOneWithoutSD1Input = {
    create?: XOR<SF4010CreateWithoutSD1Input, SF4010UncheckedCreateWithoutSD1Input>
    connectOrCreate?: SF4010CreateOrConnectWithoutSD1Input
    connect?: SF4010WhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SF1010UpdateOneWithoutSD1NestedInput = {
    create?: XOR<SF1010CreateWithoutSD1Input, SF1010UncheckedCreateWithoutSD1Input>
    connectOrCreate?: SF1010CreateOrConnectWithoutSD1Input
    upsert?: SF1010UpsertWithoutSD1Input
    disconnect?: SF1010WhereInput | boolean
    delete?: SF1010WhereInput | boolean
    connect?: SF1010WhereUniqueInput
    update?: XOR<XOR<SF1010UpdateToOneWithWhereWithoutSD1Input, SF1010UpdateWithoutSD1Input>, SF1010UncheckedUpdateWithoutSD1Input>
  }

  export type SF4010UpdateOneWithoutSD1NestedInput = {
    create?: XOR<SF4010CreateWithoutSD1Input, SF4010UncheckedCreateWithoutSD1Input>
    connectOrCreate?: SF4010CreateOrConnectWithoutSD1Input
    upsert?: SF4010UpsertWithoutSD1Input
    disconnect?: SF4010WhereInput | boolean
    delete?: SF4010WhereInput | boolean
    connect?: SF4010WhereUniqueInput
    update?: XOR<XOR<SF4010UpdateToOneWithWhereWithoutSD1Input, SF4010UpdateWithoutSD1Input>, SF4010UncheckedUpdateWithoutSD1Input>
  }

  export type SD1010CreateNestedManyWithoutSF4Input = {
    create?: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input> | SD1010CreateWithoutSF4Input[] | SD1010UncheckedCreateWithoutSF4Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF4Input | SD1010CreateOrConnectWithoutSF4Input[]
    createMany?: SD1010CreateManySF4InputEnvelope
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
  }

  export type SD1010UncheckedCreateNestedManyWithoutSF4Input = {
    create?: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input> | SD1010CreateWithoutSF4Input[] | SD1010UncheckedCreateWithoutSF4Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF4Input | SD1010CreateOrConnectWithoutSF4Input[]
    createMany?: SD1010CreateManySF4InputEnvelope
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
  }

  export type SD1010UpdateManyWithoutSF4NestedInput = {
    create?: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input> | SD1010CreateWithoutSF4Input[] | SD1010UncheckedCreateWithoutSF4Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF4Input | SD1010CreateOrConnectWithoutSF4Input[]
    upsert?: SD1010UpsertWithWhereUniqueWithoutSF4Input | SD1010UpsertWithWhereUniqueWithoutSF4Input[]
    createMany?: SD1010CreateManySF4InputEnvelope
    set?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    disconnect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    delete?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    update?: SD1010UpdateWithWhereUniqueWithoutSF4Input | SD1010UpdateWithWhereUniqueWithoutSF4Input[]
    updateMany?: SD1010UpdateManyWithWhereWithoutSF4Input | SD1010UpdateManyWithWhereWithoutSF4Input[]
    deleteMany?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
  }

  export type SD1010UncheckedUpdateManyWithoutSF4NestedInput = {
    create?: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input> | SD1010CreateWithoutSF4Input[] | SD1010UncheckedCreateWithoutSF4Input[]
    connectOrCreate?: SD1010CreateOrConnectWithoutSF4Input | SD1010CreateOrConnectWithoutSF4Input[]
    upsert?: SD1010UpsertWithWhereUniqueWithoutSF4Input | SD1010UpsertWithWhereUniqueWithoutSF4Input[]
    createMany?: SD1010CreateManySF4InputEnvelope
    set?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    disconnect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    delete?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    connect?: SD1010WhereUniqueInput | SD1010WhereUniqueInput[]
    update?: SD1010UpdateWithWhereUniqueWithoutSF4Input | SD1010UpdateWithWhereUniqueWithoutSF4Input[]
    updateMany?: SD1010UpdateManyWithWhereWithoutSF4Input | SD1010UpdateManyWithWhereWithoutSF4Input[]
    deleteMany?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
  }

  export type SF1010CreateNestedManyWithoutSA2Input = {
    create?: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input> | SF1010CreateWithoutSA2Input[] | SF1010UncheckedCreateWithoutSA2Input[]
    connectOrCreate?: SF1010CreateOrConnectWithoutSA2Input | SF1010CreateOrConnectWithoutSA2Input[]
    createMany?: SF1010CreateManySA2InputEnvelope
    connect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
  }

  export type SF1010UncheckedCreateNestedManyWithoutSA2Input = {
    create?: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input> | SF1010CreateWithoutSA2Input[] | SF1010UncheckedCreateWithoutSA2Input[]
    connectOrCreate?: SF1010CreateOrConnectWithoutSA2Input | SF1010CreateOrConnectWithoutSA2Input[]
    createMany?: SF1010CreateManySA2InputEnvelope
    connect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
  }

  export type SF1010UpdateManyWithoutSA2NestedInput = {
    create?: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input> | SF1010CreateWithoutSA2Input[] | SF1010UncheckedCreateWithoutSA2Input[]
    connectOrCreate?: SF1010CreateOrConnectWithoutSA2Input | SF1010CreateOrConnectWithoutSA2Input[]
    upsert?: SF1010UpsertWithWhereUniqueWithoutSA2Input | SF1010UpsertWithWhereUniqueWithoutSA2Input[]
    createMany?: SF1010CreateManySA2InputEnvelope
    set?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    disconnect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    delete?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    connect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    update?: SF1010UpdateWithWhereUniqueWithoutSA2Input | SF1010UpdateWithWhereUniqueWithoutSA2Input[]
    updateMany?: SF1010UpdateManyWithWhereWithoutSA2Input | SF1010UpdateManyWithWhereWithoutSA2Input[]
    deleteMany?: SF1010ScalarWhereInput | SF1010ScalarWhereInput[]
  }

  export type SF1010UncheckedUpdateManyWithoutSA2NestedInput = {
    create?: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input> | SF1010CreateWithoutSA2Input[] | SF1010UncheckedCreateWithoutSA2Input[]
    connectOrCreate?: SF1010CreateOrConnectWithoutSA2Input | SF1010CreateOrConnectWithoutSA2Input[]
    upsert?: SF1010UpsertWithWhereUniqueWithoutSA2Input | SF1010UpsertWithWhereUniqueWithoutSA2Input[]
    createMany?: SF1010CreateManySA2InputEnvelope
    set?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    disconnect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    delete?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    connect?: SF1010WhereUniqueInput | SF1010WhereUniqueInput[]
    update?: SF1010UpdateWithWhereUniqueWithoutSA2Input | SF1010UpdateWithWhereUniqueWithoutSA2Input[]
    updateMany?: SF1010UpdateManyWithWhereWithoutSA2Input | SF1010UpdateManyWithWhereWithoutSA2Input[]
    deleteMany?: SF1010ScalarWhereInput | SF1010ScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SD1010CreateWithoutSF1Input = {
    D1_TOTAL: number
    D_E_L_E_T_?: string | null
    SF4?: SF4010CreateNestedOneWithoutSD1Input
  }

  export type SD1010UncheckedCreateWithoutSF1Input = {
    R_E_C_N_O_?: number
    D1_TOTAL: number
    D1_TES?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SD1010CreateOrConnectWithoutSF1Input = {
    where: SD1010WhereUniqueInput
    create: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input>
  }

  export type SD1010CreateManySF1InputEnvelope = {
    data: SD1010CreateManySF1Input | SD1010CreateManySF1Input[]
  }

  export type SA2010CreateWithoutSF1Input = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SA2010UncheckedCreateWithoutSF1Input = {
    A2_COD: string
    A2_LOJA: string
    A2_NOME: string
    A2_CGC?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SA2010CreateOrConnectWithoutSF1Input = {
    where: SA2010WhereUniqueInput
    create: XOR<SA2010CreateWithoutSF1Input, SA2010UncheckedCreateWithoutSF1Input>
  }

  export type SD1010UpsertWithWhereUniqueWithoutSF1Input = {
    where: SD1010WhereUniqueInput
    update: XOR<SD1010UpdateWithoutSF1Input, SD1010UncheckedUpdateWithoutSF1Input>
    create: XOR<SD1010CreateWithoutSF1Input, SD1010UncheckedCreateWithoutSF1Input>
  }

  export type SD1010UpdateWithWhereUniqueWithoutSF1Input = {
    where: SD1010WhereUniqueInput
    data: XOR<SD1010UpdateWithoutSF1Input, SD1010UncheckedUpdateWithoutSF1Input>
  }

  export type SD1010UpdateManyWithWhereWithoutSF1Input = {
    where: SD1010ScalarWhereInput
    data: XOR<SD1010UpdateManyMutationInput, SD1010UncheckedUpdateManyWithoutSF1Input>
  }

  export type SD1010ScalarWhereInput = {
    AND?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
    OR?: SD1010ScalarWhereInput[]
    NOT?: SD1010ScalarWhereInput | SD1010ScalarWhereInput[]
    R_E_C_N_O_?: IntFilter<"SD1010"> | number
    D1_FILIAL?: StringFilter<"SD1010"> | string
    D1_DOC?: StringFilter<"SD1010"> | string
    D1_SERIE?: StringFilter<"SD1010"> | string
    D1_FORNECE?: StringFilter<"SD1010"> | string
    D1_LOJA?: StringFilter<"SD1010"> | string
    D1_TOTAL?: FloatFilter<"SD1010"> | number
    D1_TES?: StringNullableFilter<"SD1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SD1010"> | string | null
  }

  export type SA2010UpsertWithoutSF1Input = {
    update: XOR<SA2010UpdateWithoutSF1Input, SA2010UncheckedUpdateWithoutSF1Input>
    create: XOR<SA2010CreateWithoutSF1Input, SA2010UncheckedCreateWithoutSF1Input>
    where?: SA2010WhereInput
  }

  export type SA2010UpdateToOneWithWhereWithoutSF1Input = {
    where?: SA2010WhereInput
    data: XOR<SA2010UpdateWithoutSF1Input, SA2010UncheckedUpdateWithoutSF1Input>
  }

  export type SA2010UpdateWithoutSF1Input = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SA2010UncheckedUpdateWithoutSF1Input = {
    A2_COD?: StringFieldUpdateOperationsInput | string
    A2_LOJA?: StringFieldUpdateOperationsInput | string
    A2_NOME?: StringFieldUpdateOperationsInput | string
    A2_CGC?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF1010CreateWithoutSD1Input = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
    SA2?: SA2010CreateNestedOneWithoutSF1Input
  }

  export type SF1010UncheckedCreateWithoutSD1Input = {
    R_E_C_N_O_?: number
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_FORNECE: string
    F1_LOJA: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
  }

  export type SF1010CreateOrConnectWithoutSD1Input = {
    where: SF1010WhereUniqueInput
    create: XOR<SF1010CreateWithoutSD1Input, SF1010UncheckedCreateWithoutSD1Input>
  }

  export type SF4010CreateWithoutSD1Input = {
    F4_CODIGO: string
    F4_TRANFIL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SF4010UncheckedCreateWithoutSD1Input = {
    F4_CODIGO: string
    F4_TRANFIL?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SF4010CreateOrConnectWithoutSD1Input = {
    where: SF4010WhereUniqueInput
    create: XOR<SF4010CreateWithoutSD1Input, SF4010UncheckedCreateWithoutSD1Input>
  }

  export type SF1010UpsertWithoutSD1Input = {
    update: XOR<SF1010UpdateWithoutSD1Input, SF1010UncheckedUpdateWithoutSD1Input>
    create: XOR<SF1010CreateWithoutSD1Input, SF1010UncheckedCreateWithoutSD1Input>
    where?: SF1010WhereInput
  }

  export type SF1010UpdateToOneWithWhereWithoutSD1Input = {
    where?: SF1010WhereInput
    data: XOR<SF1010UpdateWithoutSD1Input, SF1010UncheckedUpdateWithoutSD1Input>
  }

  export type SF1010UpdateWithoutSD1Input = {
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
    SA2?: SA2010UpdateOneWithoutSF1NestedInput
  }

  export type SF1010UncheckedUpdateWithoutSD1Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_FORNECE?: StringFieldUpdateOperationsInput | string
    F1_LOJA?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF4010UpsertWithoutSD1Input = {
    update: XOR<SF4010UpdateWithoutSD1Input, SF4010UncheckedUpdateWithoutSD1Input>
    create: XOR<SF4010CreateWithoutSD1Input, SF4010UncheckedCreateWithoutSD1Input>
    where?: SF4010WhereInput
  }

  export type SF4010UpdateToOneWithWhereWithoutSD1Input = {
    where?: SF4010WhereInput
    data: XOR<SF4010UpdateWithoutSD1Input, SF4010UncheckedUpdateWithoutSD1Input>
  }

  export type SF4010UpdateWithoutSD1Input = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF4010UncheckedUpdateWithoutSD1Input = {
    F4_CODIGO?: StringFieldUpdateOperationsInput | string
    F4_TRANFIL?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010CreateWithoutSF4Input = {
    D1_TOTAL: number
    D_E_L_E_T_?: string | null
    SF1?: SF1010CreateNestedOneWithoutSD1Input
  }

  export type SD1010UncheckedCreateWithoutSF4Input = {
    R_E_C_N_O_?: number
    D1_FILIAL: string
    D1_DOC: string
    D1_SERIE: string
    D1_FORNECE: string
    D1_LOJA: string
    D1_TOTAL: number
    D_E_L_E_T_?: string | null
  }

  export type SD1010CreateOrConnectWithoutSF4Input = {
    where: SD1010WhereUniqueInput
    create: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input>
  }

  export type SD1010CreateManySF4InputEnvelope = {
    data: SD1010CreateManySF4Input | SD1010CreateManySF4Input[]
  }

  export type SD1010UpsertWithWhereUniqueWithoutSF4Input = {
    where: SD1010WhereUniqueInput
    update: XOR<SD1010UpdateWithoutSF4Input, SD1010UncheckedUpdateWithoutSF4Input>
    create: XOR<SD1010CreateWithoutSF4Input, SD1010UncheckedCreateWithoutSF4Input>
  }

  export type SD1010UpdateWithWhereUniqueWithoutSF4Input = {
    where: SD1010WhereUniqueInput
    data: XOR<SD1010UpdateWithoutSF4Input, SD1010UncheckedUpdateWithoutSF4Input>
  }

  export type SD1010UpdateManyWithWhereWithoutSF4Input = {
    where: SD1010ScalarWhereInput
    data: XOR<SD1010UpdateManyMutationInput, SD1010UncheckedUpdateManyWithoutSF4Input>
  }

  export type SF1010CreateWithoutSA2Input = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
    SD1?: SD1010CreateNestedManyWithoutSF1Input
  }

  export type SF1010UncheckedCreateWithoutSA2Input = {
    R_E_C_N_O_?: number
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
    SD1?: SD1010UncheckedCreateNestedManyWithoutSF1Input
  }

  export type SF1010CreateOrConnectWithoutSA2Input = {
    where: SF1010WhereUniqueInput
    create: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input>
  }

  export type SF1010CreateManySA2InputEnvelope = {
    data: SF1010CreateManySA2Input | SF1010CreateManySA2Input[]
  }

  export type SF1010UpsertWithWhereUniqueWithoutSA2Input = {
    where: SF1010WhereUniqueInput
    update: XOR<SF1010UpdateWithoutSA2Input, SF1010UncheckedUpdateWithoutSA2Input>
    create: XOR<SF1010CreateWithoutSA2Input, SF1010UncheckedCreateWithoutSA2Input>
  }

  export type SF1010UpdateWithWhereUniqueWithoutSA2Input = {
    where: SF1010WhereUniqueInput
    data: XOR<SF1010UpdateWithoutSA2Input, SF1010UncheckedUpdateWithoutSA2Input>
  }

  export type SF1010UpdateManyWithWhereWithoutSA2Input = {
    where: SF1010ScalarWhereInput
    data: XOR<SF1010UpdateManyMutationInput, SF1010UncheckedUpdateManyWithoutSA2Input>
  }

  export type SF1010ScalarWhereInput = {
    AND?: SF1010ScalarWhereInput | SF1010ScalarWhereInput[]
    OR?: SF1010ScalarWhereInput[]
    NOT?: SF1010ScalarWhereInput | SF1010ScalarWhereInput[]
    R_E_C_N_O_?: IntFilter<"SF1010"> | number
    F1_FILIAL?: StringFilter<"SF1010"> | string
    F1_DOC?: StringFilter<"SF1010"> | string
    F1_SERIE?: StringFilter<"SF1010"> | string
    F1_FORNECE?: StringFilter<"SF1010"> | string
    F1_LOJA?: StringFilter<"SF1010"> | string
    F1_STATUS?: StringNullableFilter<"SF1010"> | string | null
    F1_EMISSAO?: StringNullableFilter<"SF1010"> | string | null
    F1_DTDIGIT?: StringNullableFilter<"SF1010"> | string | null
    F1_RECBMTO?: StringNullableFilter<"SF1010"> | string | null
    F1_USERLGI?: StringNullableFilter<"SF1010"> | string | null
    D_E_L_E_T_?: StringNullableFilter<"SF1010"> | string | null
    F1_XTIPO?: StringNullableFilter<"SF1010"> | string | null
    F1_XPRIOR?: StringNullableFilter<"SF1010"> | string | null
    F1_XORI?: StringNullableFilter<"SF1010"> | string | null
    F1_XUSRRA?: StringNullableFilter<"SF1010"> | string | null
    F1_XOBS?: StringNullableFilter<"SF1010"> | string | null
    F1_XREV?: StringNullableFilter<"SF1010"> | string | null
    F1_ZOBSREV?: StringNullableFilter<"SF1010"> | string | null
  }

  export type SD1010CreateManySF1Input = {
    D1_TOTAL: number
    D1_TES?: string | null
    D_E_L_E_T_?: string | null
  }

  export type SD1010UpdateWithoutSF1Input = {
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SF4?: SF4010UpdateOneWithoutSD1NestedInput
  }

  export type SD1010UncheckedUpdateWithoutSF1Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D1_TES?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010UncheckedUpdateManyWithoutSF1Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D1_TES?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010CreateManySF4Input = {
    D1_FILIAL: string
    D1_DOC: string
    D1_SERIE: string
    D1_FORNECE: string
    D1_LOJA: string
    D1_TOTAL: number
    D_E_L_E_T_?: string | null
  }

  export type SD1010UpdateWithoutSF4Input = {
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    SF1?: SF1010UpdateOneWithoutSD1NestedInput
  }

  export type SD1010UncheckedUpdateWithoutSF4Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_FILIAL?: StringFieldUpdateOperationsInput | string
    D1_DOC?: StringFieldUpdateOperationsInput | string
    D1_SERIE?: StringFieldUpdateOperationsInput | string
    D1_FORNECE?: StringFieldUpdateOperationsInput | string
    D1_LOJA?: StringFieldUpdateOperationsInput | string
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SD1010UncheckedUpdateManyWithoutSF4Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    D1_FILIAL?: StringFieldUpdateOperationsInput | string
    D1_DOC?: StringFieldUpdateOperationsInput | string
    D1_SERIE?: StringFieldUpdateOperationsInput | string
    D1_FORNECE?: StringFieldUpdateOperationsInput | string
    D1_LOJA?: StringFieldUpdateOperationsInput | string
    D1_TOTAL?: FloatFieldUpdateOperationsInput | number
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SF1010CreateManySA2Input = {
    F1_FILIAL: string
    F1_DOC: string
    F1_SERIE: string
    F1_STATUS?: string | null
    F1_EMISSAO?: string | null
    F1_DTDIGIT?: string | null
    F1_RECBMTO?: string | null
    F1_USERLGI?: string | null
    D_E_L_E_T_?: string | null
    F1_XTIPO?: string | null
    F1_XPRIOR?: string | null
    F1_XORI?: string | null
    F1_XUSRRA?: string | null
    F1_XOBS?: string | null
    F1_XREV?: string | null
    F1_ZOBSREV?: string | null
  }

  export type SF1010UpdateWithoutSA2Input = {
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UpdateManyWithoutSF1NestedInput
  }

  export type SF1010UncheckedUpdateWithoutSA2Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
    SD1?: SD1010UncheckedUpdateManyWithoutSF1NestedInput
  }

  export type SF1010UncheckedUpdateManyWithoutSA2Input = {
    R_E_C_N_O_?: IntFieldUpdateOperationsInput | number
    F1_FILIAL?: StringFieldUpdateOperationsInput | string
    F1_DOC?: StringFieldUpdateOperationsInput | string
    F1_SERIE?: StringFieldUpdateOperationsInput | string
    F1_STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_EMISSAO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_DTDIGIT?: NullableStringFieldUpdateOperationsInput | string | null
    F1_RECBMTO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_USERLGI?: NullableStringFieldUpdateOperationsInput | string | null
    D_E_L_E_T_?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XTIPO?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XPRIOR?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XORI?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XUSRRA?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XOBS?: NullableStringFieldUpdateOperationsInput | string | null
    F1_XREV?: NullableStringFieldUpdateOperationsInput | string | null
    F1_ZOBSREV?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}